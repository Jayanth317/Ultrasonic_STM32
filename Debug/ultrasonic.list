
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007d80  08007d80  00017d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b4  080081b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081bc  080081bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080081c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001dc  080083a0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  080083a0  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d736  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002118  00000000  00000000  0002d942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  00030518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a6c  00000000  00000000  00030ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d01a  00000000  00000000  00057964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e92c2  00000000  00000000  0006497e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014dc40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c04  00000000  00000000  0014dc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d68 	.word	0x08007d68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007d68 	.word	0x08007d68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fc46 	bl	8001742 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f837 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 f90d 	bl	80010d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebe:	f000 f8e5 	bl	800108c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f883 	bl	8000fcc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ec6:	f000 f8b1 	bl	800102c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	ultrasonic_init();
 8000eca:	f000 fc03 	bl	80016d4 <ultrasonic_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(g_dataReady_u8 == 1)
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <main+0x68>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d1fb      	bne.n	8000ece <main+0x22>
		{
			g_dataReady_u8 = 0;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <main+0x68>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
			g_distance = Get_distance();
 8000edc:	f000 fbe4 	bl	80016a8 <Get_distance>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <main+0x6c>)
 8000ee6:	801a      	strh	r2, [r3, #0]
			uint8_t Len=sprintf(Tx_Buf,"DISTANCE: %d\r\n",g_distance);
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <main+0x6c>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	490b      	ldr	r1, [pc, #44]	; (8000f1c <main+0x70>)
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <main+0x74>)
 8000ef2:	f004 fcbf 	bl	8005874 <siprintf>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
			HAL_UART_Transmit(&huart2,(uint8_t *)Tx_Buf,Len,100);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <main+0x74>)
 8000f02:	4808      	ldr	r0, [pc, #32]	; (8000f24 <main+0x78>)
 8000f04:	f002 fd56 	bl	80039b4 <HAL_UART_Transmit>
			HAL_Delay(500);
 8000f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0c:	f000 fc8e 	bl	800182c <HAL_Delay>
		if(g_dataReady_u8 == 1)
 8000f10:	e7dd      	b.n	8000ece <main+0x22>
 8000f12:	bf00      	nop
 8000f14:	2000043b 	.word	0x2000043b
 8000f18:	20000390 	.word	0x20000390
 8000f1c:	08007d80 	.word	0x08007d80
 8000f20:	20000394 	.word	0x20000394
 8000f24:	200001f8 	.word	0x200001f8

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b096      	sub	sp, #88	; 0x58
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2244      	movs	r2, #68	; 0x44
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 f82a 	bl	8004f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f4e:	f001 f9d1 	bl	80022f4 <HAL_PWREx_ControlVoltageScaling>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f58:	f000 f8ee 	bl	8001138 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f66:	2310      	movs	r3, #16
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f76:	230a      	movs	r3, #10
 8000f78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fa08 	bl	80023a0 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f96:	f000 f8cf 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fdd0 	bl	8002b58 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fbe:	f000 f8bb 	bl	8001138 <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3758      	adds	r7, #88	; 0x58
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fd2:	4a15      	ldr	r2, [pc, #84]	; (8001028 <MX_USART2_UART_Init+0x5c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USART2_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8001010:	f002 fc82 	bl	8003918 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800101a:	f000 f88d 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001f8 	.word	0x200001f8
 8001028:	40004400 	.word	0x40004400

0800102c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_USART3_UART_Init+0x58>)
 8001032:	4a15      	ldr	r2, [pc, #84]	; (8001088 <MX_USART3_UART_Init+0x5c>)
 8001034:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_USART3_UART_Init+0x58>)
 8001038:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800103c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART3_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_USART3_UART_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART3_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART3_UART_Init+0x58>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART3_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART3_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART3_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART3_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART3_UART_Init+0x58>)
 8001070:	f002 fc52 	bl	8003918 <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800107a:	f000 f85d 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000027c 	.word	0x2000027c
 8001088:	40004800 	.word	0x40004800

0800108c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_DMA_Init+0x48>)
 8001094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <MX_DMA_Init+0x48>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6493      	str	r3, [r2, #72]	; 0x48
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <MX_DMA_Init+0x48>)
 80010a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	200d      	movs	r0, #13
 80010b0:	f000 fcbb 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010b4:	200d      	movs	r0, #13
 80010b6:	f000 fcd4 	bl	8001a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2010      	movs	r0, #16
 80010c0:	f000 fcb3 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010c4:	2010      	movs	r0, #16
 80010c6:	f000 fccc 	bl	8001a62 <HAL_NVIC_EnableIRQ>

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_GPIO_Init+0x5c>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <MX_GPIO_Init+0x5c>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_GPIO_Init+0x5c>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_GPIO_Init+0x5c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <MX_GPIO_Init+0x5c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_GPIO_Init+0x5c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_GPIO_Init+0x5c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <MX_GPIO_Init+0x5c>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_GPIO_Init+0x5c>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_MspInit+0x44>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6613      	str	r3, [r2, #96]	; 0x60
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x44>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0ae      	sub	sp, #184	; 0xb8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	2288      	movs	r2, #136	; 0x88
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 feef 	bl	8004f90 <memset>
  if(huart->Instance==USART2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a73      	ldr	r2, [pc, #460]	; (8001384 <HAL_UART_MspInit+0x1f8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d16d      	bne.n	8001298 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fee9 	bl	8002fa0 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011d4:	f7ff ffb0 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d8:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	4a6a      	ldr	r2, [pc, #424]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80011de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e2:	6593      	str	r3, [r2, #88]	; 0x58
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b65      	ldr	r3, [pc, #404]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a64      	ldr	r2, [pc, #400]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b62      	ldr	r3, [pc, #392]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001208:	230c      	movs	r3, #12
 800120a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001220:	2307      	movs	r3, #7
 8001222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f000 fea8 	bl	8001f84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001234:	4b55      	ldr	r3, [pc, #340]	; (800138c <HAL_UART_MspInit+0x200>)
 8001236:	4a56      	ldr	r2, [pc, #344]	; (8001390 <HAL_UART_MspInit+0x204>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800123a:	4b54      	ldr	r3, [pc, #336]	; (800138c <HAL_UART_MspInit+0x200>)
 800123c:	2202      	movs	r2, #2
 800123e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001240:	4b52      	ldr	r3, [pc, #328]	; (800138c <HAL_UART_MspInit+0x200>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b51      	ldr	r3, [pc, #324]	; (800138c <HAL_UART_MspInit+0x200>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b4f      	ldr	r3, [pc, #316]	; (800138c <HAL_UART_MspInit+0x200>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001252:	4b4e      	ldr	r3, [pc, #312]	; (800138c <HAL_UART_MspInit+0x200>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <HAL_UART_MspInit+0x200>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800125e:	4b4b      	ldr	r3, [pc, #300]	; (800138c <HAL_UART_MspInit+0x200>)
 8001260:	2220      	movs	r2, #32
 8001262:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001264:	4b49      	ldr	r3, [pc, #292]	; (800138c <HAL_UART_MspInit+0x200>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800126a:	4848      	ldr	r0, [pc, #288]	; (800138c <HAL_UART_MspInit+0x200>)
 800126c:	f000 fc14 	bl	8001a98 <HAL_DMA_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001276:	f7ff ff5f 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a43      	ldr	r2, [pc, #268]	; (800138c <HAL_UART_MspInit+0x200>)
 800127e:	671a      	str	r2, [r3, #112]	; 0x70
 8001280:	4a42      	ldr	r2, [pc, #264]	; (800138c <HAL_UART_MspInit+0x200>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2026      	movs	r0, #38	; 0x26
 800128c:	f000 fbcd 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001290:	2026      	movs	r0, #38	; 0x26
 8001292:	f000 fbe6 	bl	8001a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001296:	e070      	b.n	800137a <HAL_UART_MspInit+0x1ee>
  else if(huart->Instance==USART3)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <HAL_UART_MspInit+0x208>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d16b      	bne.n	800137a <HAL_UART_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012a2:	2304      	movs	r3, #4
 80012a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 fe76 	bl	8002fa0 <HAL_RCCEx_PeriphCLKConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_UART_MspInit+0x132>
      Error_Handler();
 80012ba:	f7ff ff3d 	bl	8001138 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a2b      	ldr	r2, [pc, #172]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <HAL_UART_MspInit+0x1fc>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012ee:	2330      	movs	r3, #48	; 0x30
 80012f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001306:	2307      	movs	r3, #7
 8001308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001310:	4619      	mov	r1, r3
 8001312:	4821      	ldr	r0, [pc, #132]	; (8001398 <HAL_UART_MspInit+0x20c>)
 8001314:	f000 fe36 	bl	8001f84 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_UART_MspInit+0x210>)
 800131a:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <HAL_UART_MspInit+0x214>)
 800131c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <HAL_UART_MspInit+0x210>)
 8001320:	2202      	movs	r2, #2
 8001322:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_UART_MspInit+0x210>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <HAL_UART_MspInit+0x210>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_UART_MspInit+0x210>)
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_UART_MspInit+0x210>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_UART_MspInit+0x210>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_UART_MspInit+0x210>)
 8001344:	2220      	movs	r2, #32
 8001346:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_UART_MspInit+0x210>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800134e:	4813      	ldr	r0, [pc, #76]	; (800139c <HAL_UART_MspInit+0x210>)
 8001350:	f000 fba2 	bl	8001a98 <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 800135a:	f7ff feed 	bl	8001138 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_UART_MspInit+0x210>)
 8001362:	671a      	str	r2, [r3, #112]	; 0x70
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <HAL_UART_MspInit+0x210>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2027      	movs	r0, #39	; 0x27
 8001370:	f000 fb5b 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001374:	2027      	movs	r0, #39	; 0x27
 8001376:	f000 fb74 	bl	8001a62 <HAL_NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	37b8      	adds	r7, #184	; 0xb8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40004400 	.word	0x40004400
 8001388:	40021000 	.word	0x40021000
 800138c:	20000300 	.word	0x20000300
 8001390:	4002006c 	.word	0x4002006c
 8001394:	40004800 	.word	0x40004800
 8001398:	48000800 	.word	0x48000800
 800139c:	20000348 	.word	0x20000348
 80013a0:	40020030 	.word	0x40020030

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 f9fc 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA1_Channel3_IRQHandler+0x10>)
 80013fe:	f000 fce2 	bl	8001dc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000348 	.word	0x20000348

0800140c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Channel6_IRQHandler+0x10>)
 8001412:	f000 fcd8 	bl	8001dc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000300 	.word	0x20000300

08001420 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <USART2_IRQHandler+0x10>)
 8001426:	f002 fbaf 	bl	8003b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001f8 	.word	0x200001f8

08001434 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <USART3_IRQHandler+0x10>)
 800143a:	f002 fba5 	bl	8003b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000027c 	.word	0x2000027c

08001448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_kill>:

int _kill(int pid, int sig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001462:	f003 fd6b 	bl	8004f3c <__errno>
 8001466:	4603      	mov	r3, r0
 8001468:	2216      	movs	r2, #22
 800146a:	601a      	str	r2, [r3, #0]
  return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_exit>:

void _exit (int status)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ffe7 	bl	8001458 <_kill>
  while (1) {}    /* Make sure we hang here */
 800148a:	e7fe      	b.n	800148a <_exit+0x12>

0800148c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e00a      	b.n	80014b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800149e:	f3af 8000 	nop.w
 80014a2:	4601      	mov	r1, r0
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	b2ca      	uxtb	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbf0      	blt.n	800149e <_read+0x12>
  }

  return len;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e009      	b.n	80014ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf1      	blt.n	80014d8 <_write+0x12>
  }
  return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_close>:

int _close(int file)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001526:	605a      	str	r2, [r3, #4]
  return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f003 fcd0 	bl	8004f3c <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20018000 	.word	0x20018000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	200003c8 	.word	0x200003c8
 80015d0:	20000450 	.word	0x20000450

080015d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <HAL_UART_RxCpltCallback>:
uint8_t g_data_l;
uint8_t g_dataReady_u8 = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a21      	ldr	r2, [pc, #132]	; (8001688 <HAL_UART_RxCpltCallback+0x90>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d13a      	bne.n	800167e <HAL_UART_RxCpltCallback+0x86>
	{
		g_dataBuf_u8[g_rxBufCounter_u32] = g_rxBufByte_u8;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <HAL_UART_RxCpltCallback+0x94>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a20      	ldr	r2, [pc, #128]	; (8001690 <HAL_UART_RxCpltCallback+0x98>)
 800160e:	7811      	ldrb	r1, [r2, #0]
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_UART_RxCpltCallback+0x9c>)
 8001612:	54d1      	strb	r1, [r2, r3]
		g_rxBufCounter_u32++;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_UART_RxCpltCallback+0x94>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a1c      	ldr	r2, [pc, #112]	; (800168c <HAL_UART_RxCpltCallback+0x94>)
 800161c:	6013      	str	r3, [r2, #0]
		if(g_rxBufCounter_u32 > sizeof(g_dataBuf_u8))
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_UART_RxCpltCallback+0x94>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d902      	bls.n	800162c <HAL_UART_RxCpltCallback+0x34>
		{
			g_rxBufCounter_u32 = 0;
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_UART_RxCpltCallback+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
		}

		uint8_t gethex = g_rxBufByte_u8;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_UART_RxCpltCallback+0x98>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	73fb      	strb	r3, [r7, #15]

		if(gethex == 0xff)
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	2bff      	cmp	r3, #255	; 0xff
 8001636:	d103      	bne.n	8001640 <HAL_UART_RxCpltCallback+0x48>
	    {
	    	g_byte_counter_u8 = 1;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_UART_RxCpltCallback+0xa0>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e019      	b.n	8001674 <HAL_UART_RxCpltCallback+0x7c>

	    }
	    else if(g_byte_counter_u8 == 1)
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_UART_RxCpltCallback+0xa0>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <HAL_UART_RxCpltCallback+0x60>
	    {
	    	g_byte_counter_u8 = 2;
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_UART_RxCpltCallback+0xa0>)
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]
	    	g_data_h = g_rxBufByte_u8;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_UART_RxCpltCallback+0x98>)
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_UART_RxCpltCallback+0xa4>)
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e00d      	b.n	8001674 <HAL_UART_RxCpltCallback+0x7c>
	    }
	    else if(g_byte_counter_u8 == 2)
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_UART_RxCpltCallback+0xa0>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d109      	bne.n	8001674 <HAL_UART_RxCpltCallback+0x7c>
	    {
	    	g_data_l = g_rxBufByte_u8;
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_UART_RxCpltCallback+0x98>)
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_UART_RxCpltCallback+0xa8>)
 8001666:	701a      	strb	r2, [r3, #0]
	    	g_byte_counter_u8 = 3;
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_UART_RxCpltCallback+0xa0>)
 800166a:	2203      	movs	r2, #3
 800166c:	701a      	strb	r2, [r3, #0]
	    	g_dataReady_u8 = 1;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_UART_RxCpltCallback+0xac>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
	    }
	    HAL_UART_Receive_DMA(&huart3, &g_rxBufByte_u8, sizeof(g_rxBufByte_u8));
 8001674:	2201      	movs	r2, #1
 8001676:	4906      	ldr	r1, [pc, #24]	; (8001690 <HAL_UART_RxCpltCallback+0x98>)
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <HAL_UART_RxCpltCallback+0x90>)
 800167a:	f002 fa2f 	bl	8003adc <HAL_UART_Receive_DMA>
	}
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000027c 	.word	0x2000027c
 800168c:	20000434 	.word	0x20000434
 8001690:	20000430 	.word	0x20000430
 8001694:	200003cc 	.word	0x200003cc
 8001698:	20000438 	.word	0x20000438
 800169c:	20000439 	.word	0x20000439
 80016a0:	2000043a 	.word	0x2000043a
 80016a4:	2000043b 	.word	0x2000043b

080016a8 <Get_distance>:


uint16_t Get_distance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
	//while(g_dataReady_u8!=1);
	//g_dataReady_u8 = 0;
    return  (g_data_h*256+g_data_l);
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <Get_distance+0x24>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <Get_distance+0x28>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4413      	add	r3, r2
 80016be:	b29b      	uxth	r3, r3
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000439 	.word	0x20000439
 80016d0:	2000043a 	.word	0x2000043a

080016d4 <ultrasonic_init>:


void ultrasonic_init()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, &g_rxBufByte_u8, sizeof(g_rxBufByte_u8));
 80016d8:	2201      	movs	r2, #1
 80016da:	4903      	ldr	r1, [pc, #12]	; (80016e8 <ultrasonic_init+0x14>)
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <ultrasonic_init+0x18>)
 80016de:	f002 f9fd 	bl	8003adc <HAL_UART_Receive_DMA>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000430 	.word	0x20000430
 80016ec:	2000027c 	.word	0x2000027c

080016f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff ff6e 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <LoopForever+0x6>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LoopForever+0xe>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	; (800173c <LoopForever+0x16>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f003 fc13 	bl	8004f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001722:	f7ff fbc3 	bl	8000eac <main>

08001726 <LoopForever>:

LoopForever:
    b LoopForever
 8001726:	e7fe      	b.n	8001726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001728:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001734:	080081c4 	.word	0x080081c4
  ldr r2, =_sbss
 8001738:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800173c:	20000450 	.word	0x20000450

08001740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_2_IRQHandler>

08001742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f961 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001752:	200f      	movs	r0, #15
 8001754:	f000 f80e 	bl	8001774 <HAL_InitTick>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e001      	b.n	8001768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001764:	f7ff fcee 	bl	8001144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001768:	79fb      	ldrb	r3, [r7, #7]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_InitTick+0x6c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_InitTick+0x70>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_InitTick+0x6c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f96d 	bl	8001a7e <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10f      	bne.n	80017ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d809      	bhi.n	80017c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f937 	bl	8001a2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_InitTick+0x74>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e007      	b.n	80017d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e004      	b.n	80017d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e001      	b.n	80017d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008
 8001810:	2000043c 	.word	0x2000043c

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	2000043c 	.word	0x2000043c

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff3e 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff31 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e098      	b.n	8001bdc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <HAL_DMA_Init+0x150>)
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d80f      	bhi.n	8001ad6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_DMA_Init+0x154>)
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a4b      	ldr	r2, [pc, #300]	; (8001bf0 <HAL_DMA_Init+0x158>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	009a      	lsls	r2, r3, #2
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_DMA_Init+0x15c>)
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad4:	e00e      	b.n	8001af4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_DMA_Init+0x160>)
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <HAL_DMA_Init+0x158>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	009a      	lsls	r2, r3, #2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_DMA_Init+0x164>)
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b4e:	d039      	beq.n	8001bc4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <HAL_DMA_Init+0x15c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d11a      	bne.n	8001b90 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_DMA_Init+0x168>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f003 031c 	and.w	r3, r3, #28
 8001b66:	210f      	movs	r1, #15
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4924      	ldr	r1, [pc, #144]	; (8001c00 <HAL_DMA_Init+0x168>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_DMA_Init+0x168>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f003 031c 	and.w	r3, r3, #28
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	491d      	ldr	r1, [pc, #116]	; (8001c00 <HAL_DMA_Init+0x168>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
 8001b8e:	e019      	b.n	8001bc4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_DMA_Init+0x16c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	f003 031c 	and.w	r3, r3, #28
 8001b9c:	210f      	movs	r1, #15
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4917      	ldr	r1, [pc, #92]	; (8001c04 <HAL_DMA_Init+0x16c>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_DMA_Init+0x16c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6859      	ldr	r1, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f003 031c 	and.w	r3, r3, #28
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	4911      	ldr	r1, [pc, #68]	; (8001c04 <HAL_DMA_Init+0x16c>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40020407 	.word	0x40020407
 8001bec:	bffdfff8 	.word	0xbffdfff8
 8001bf0:	cccccccd 	.word	0xcccccccd
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	bffdfbf8 	.word	0xbffdfbf8
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	400200a8 	.word	0x400200a8
 8001c04:	400204a8 	.word	0x400204a8

08001c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_DMA_Start_IT+0x20>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e04b      	b.n	8001cc0 <HAL_DMA_Start_IT+0xb8>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d13a      	bne.n	8001cb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f95f 	bl	8001f24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 020e 	orr.w	r2, r2, #14
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e00f      	b.n	8001ca0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0204 	bic.w	r2, r2, #4
 8001c8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 020a 	orr.w	r2, r2, #10
 8001c9e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e005      	b.n	8001cbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d008      	beq.n	8001cf2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e022      	b.n	8001d38 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 020e 	bic.w	r2, r2, #14
 8001d00:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f003 021c 	and.w	r2, r3, #28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d005      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	e029      	b.n	8001dbc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 020e 	bic.w	r2, r2, #14
 8001d76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f003 021c 	and.w	r2, r3, #28
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
    }
  }
  return status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f003 031c 	and.w	r3, r3, #28
 8001de6:	2204      	movs	r2, #4
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d026      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x7a>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d021      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0204 	bic.w	r2, r2, #4
 8001e18:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f003 021c 	and.w	r2, r3, #28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2104      	movs	r1, #4
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d071      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001e3e:	e06c      	b.n	8001f1a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f003 031c 	and.w	r3, r3, #28
 8001e48:	2202      	movs	r2, #2
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d02e      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xec>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d029      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 020a 	bic.w	r2, r2, #10
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	f003 021c 	and.w	r2, r3, #28
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	2102      	movs	r1, #2
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d038      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001eb0:	e033      	b.n	8001f1a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f003 031c 	and.w	r3, r3, #28
 8001eba:	2208      	movs	r2, #8
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d02a      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x156>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d025      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 020e 	bic.w	r2, r2, #14
 8001ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	f003 021c 	and.w	r2, r3, #28
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
}
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f003 021c 	and.w	r2, r3, #28
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d108      	bne.n	8001f68 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f66:	e007      	b.n	8001f78 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f92:	e17f      	b.n	8002294 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8171 	beq.w	800228e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d005      	beq.n	8001fc4 <HAL_GPIO_Init+0x40>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d130      	bne.n	8002026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	f003 0201 	and.w	r2, r3, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b03      	cmp	r3, #3
 8002030:	d118      	bne.n	8002064 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002038:	2201      	movs	r2, #1
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	08db      	lsrs	r3, r3, #3
 800204e:	f003 0201 	and.w	r2, r3, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b03      	cmp	r3, #3
 800206e:	d017      	beq.n	80020a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d123      	bne.n	80020f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	6939      	ldr	r1, [r7, #16]
 80020f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80ac 	beq.w	800228e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	4b5f      	ldr	r3, [pc, #380]	; (80022b4 <HAL_GPIO_Init+0x330>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	4a5e      	ldr	r2, [pc, #376]	; (80022b4 <HAL_GPIO_Init+0x330>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6613      	str	r3, [r2, #96]	; 0x60
 8002142:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <HAL_GPIO_Init+0x330>)
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800214e:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <HAL_GPIO_Init+0x334>)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002178:	d025      	beq.n	80021c6 <HAL_GPIO_Init+0x242>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x338>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <HAL_GPIO_Init+0x23e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_GPIO_Init+0x33c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x23a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <HAL_GPIO_Init+0x340>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x236>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_GPIO_Init+0x344>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x232>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_GPIO_Init+0x348>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x22e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4a      	ldr	r2, [pc, #296]	; (80022d0 <HAL_GPIO_Init+0x34c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x22a>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x244>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x244>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x244>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x244>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x244>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x244>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x244>
 80021c6:	2300      	movs	r3, #0
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021d8:	4937      	ldr	r1, [pc, #220]	; (80022b8 <HAL_GPIO_Init+0x334>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_GPIO_Init+0x350>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800220a:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <HAL_GPIO_Init+0x350>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002210:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_GPIO_Init+0x350>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <HAL_GPIO_Init+0x350>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_GPIO_Init+0x350>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800225e:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_GPIO_Init+0x350>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_GPIO_Init+0x350>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_GPIO_Init+0x350>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3301      	adds	r3, #1
 8002292:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f47f ae78 	bne.w	8001f94 <HAL_GPIO_Init+0x10>
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010000 	.word	0x40010000
 80022bc:	48000400 	.word	0x48000400
 80022c0:	48000800 	.word	0x48000800
 80022c4:	48000c00 	.word	0x48000c00
 80022c8:	48001000 	.word	0x48001000
 80022cc:	48001400 	.word	0x48001400
 80022d0:	48001800 	.word	0x48001800
 80022d4:	40010400 	.word	0x40010400

080022d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40007000 	.word	0x40007000

080022f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002302:	d130      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800230c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002310:	d038      	beq.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800231a:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2232      	movs	r2, #50	; 0x32
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0c9b      	lsrs	r3, r3, #18
 8002334:	3301      	adds	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002338:	e002      	b.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3b01      	subs	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234c:	d102      	bne.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f2      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002360:	d110      	bne.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e00f      	b.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800236e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002372:	d007      	beq.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800237c:	4a05      	ldr	r2, [pc, #20]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40007000 	.word	0x40007000
 8002398:	20000000 	.word	0x20000000
 800239c:	431bde83 	.word	0x431bde83

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e3ca      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b2:	4b97      	ldr	r3, [pc, #604]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023bc:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80e4 	beq.w	800259c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_RCC_OscConfig+0x4a>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	f040 808b 	bne.w	80024f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 8087 	bne.w	80024f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ea:	4b89      	ldr	r3, [pc, #548]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x62>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e3a2      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_RCC_OscConfig+0x7c>
 8002412:	4b7f      	ldr	r3, [pc, #508]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241a:	e005      	b.n	8002428 <HAL_RCC_OscConfig+0x88>
 800241c:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002428:	4293      	cmp	r3, r2
 800242a:	d223      	bcs.n	8002474 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fd55 	bl	8002ee0 <RCC_SetFlashLatencyFromMSIRange>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e383      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002440:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	496d      	ldr	r1, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245e:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4968      	ldr	r1, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
 8002472:	e025      	b.n	80024c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4960      	ldr	r1, [pc, #384]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002492:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	495b      	ldr	r1, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fd15 	bl	8002ee0 <RCC_SetFlashLatencyFromMSIRange>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e343      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c0:	f000 fc4a 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b52      	ldr	r3, [pc, #328]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	4950      	ldr	r1, [pc, #320]	; (8002614 <HAL_RCC_OscConfig+0x274>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_RCC_OscConfig+0x278>)
 80024de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024e0:	4b4e      	ldr	r3, [pc, #312]	; (800261c <HAL_RCC_OscConfig+0x27c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f945 	bl	8001774 <HAL_InitTick>
 80024ea:	4603      	mov	r3, r0
 80024ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d052      	beq.n	800259a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	e327      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d032      	beq.n	8002566 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002500:	4b43      	ldr	r3, [pc, #268]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a42      	ldr	r2, [pc, #264]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800250c:	f7ff f982 	bl	8001814 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002514:	f7ff f97e 	bl	8001814 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e310      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002532:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a36      	ldr	r2, [pc, #216]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4931      	ldr	r1, [pc, #196]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	492c      	ldr	r1, [pc, #176]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	e01a      	b.n	800259c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002566:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a29      	ldr	r2, [pc, #164]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002572:	f7ff f94f 	bl	8001814 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800257a:	f7ff f94b 	bl	8001814 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e2dd      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x1da>
 8002598:	e000      	b.n	800259c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800259a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d074      	beq.n	8002692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x21a>
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b0c      	cmp	r3, #12
 80025b2:	d10e      	bne.n	80025d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d10b      	bne.n	80025d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d064      	beq.n	8002690 <HAL_RCC_OscConfig+0x2f0>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d160      	bne.n	8002690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e2ba      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x24a>
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	e026      	b.n	8002638 <HAL_RCC_OscConfig+0x298>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f2:	d115      	bne.n	8002620 <HAL_RCC_OscConfig+0x280>
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a05      	ldr	r2, [pc, #20]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a02      	ldr	r2, [pc, #8]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x298>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	08007d90 	.word	0x08007d90
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004
 8002620:	4ba0      	ldr	r3, [pc, #640]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a9f      	ldr	r2, [pc, #636]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b9d      	ldr	r3, [pc, #628]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a9c      	ldr	r2, [pc, #624]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7ff f8e8 	bl	8001814 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff f8e4 	bl	8001814 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e276      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265a:	4b92      	ldr	r3, [pc, #584]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x2a8>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff f8d4 	bl	8001814 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff f8d0 	bl	8001814 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e262      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002682:	4b88      	ldr	r3, [pc, #544]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x2d0>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d060      	beq.n	8002760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x310>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d119      	bne.n	80026de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d116      	bne.n	80026de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b0:	4b7c      	ldr	r3, [pc, #496]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x328>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e23f      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b76      	ldr	r3, [pc, #472]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	4973      	ldr	r1, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026dc:	e040      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d023      	beq.n	800272e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e6:	4b6f      	ldr	r3, [pc, #444]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6e      	ldr	r2, [pc, #440]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7ff f88f 	bl	8001814 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7ff f88b 	bl	8001814 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e21d      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800270c:	4b65      	ldr	r3, [pc, #404]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b62      	ldr	r3, [pc, #392]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	495f      	ldr	r1, [pc, #380]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e018      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff f86b 	bl	8001814 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7ff f867 	bl	8001814 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1f9      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002754:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01c      	beq.n	80027ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002774:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277a:	4a4a      	ldr	r2, [pc, #296]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7ff f846 	bl	8001814 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278c:	f7ff f842 	bl	8001814 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e1d4      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ef      	beq.n	800278c <HAL_RCC_OscConfig+0x3ec>
 80027ac:	e01b      	b.n	80027e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b4:	4a3b      	ldr	r2, [pc, #236]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7ff f829 	bl	8001814 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7ff f825 	bl	8001814 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1b7      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d8:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ef      	bne.n	80027c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80a6 	beq.w	8002940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027f8:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280e:	6593      	str	r3, [r2, #88]	; 0x58
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281c:	2301      	movs	r3, #1
 800281e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d118      	bne.n	800285e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCC_OscConfig+0x508>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002838:	f7fe ffec 	bl	8001814 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7fe ffe8 	bl	8001814 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e17a      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d108      	bne.n	8002878 <HAL_RCC_OscConfig+0x4d8>
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002876:	e029      	b.n	80028cc <HAL_RCC_OscConfig+0x52c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d115      	bne.n	80028ac <HAL_RCC_OscConfig+0x50c>
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	4a03      	ldr	r2, [pc, #12]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a0:	e014      	b.n	80028cc <HAL_RCC_OscConfig+0x52c>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
 80028ac:	4b9c      	ldr	r3, [pc, #624]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a9b      	ldr	r2, [pc, #620]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028bc:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a97      	ldr	r2, [pc, #604]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d016      	beq.n	8002902 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe ff9e 	bl	8001814 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028dc:	f7fe ff9a 	bl	8001814 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e12a      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f2:	4b8b      	ldr	r3, [pc, #556]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ed      	beq.n	80028dc <HAL_RCC_OscConfig+0x53c>
 8002900:	e015      	b.n	800292e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7fe ff87 	bl	8001814 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe ff83 	bl	8001814 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e113      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002920:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ed      	bne.n	800290a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 800293a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80fe 	beq.w	8002b46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	2b02      	cmp	r3, #2
 8002950:	f040 80d0 	bne.w	8002af4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002954:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	429a      	cmp	r2, r3
 8002966:	d130      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	3b01      	subs	r3, #1
 8002974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d127      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d11f      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002994:	2a07      	cmp	r2, #7
 8002996:	bf14      	ite	ne
 8002998:	2201      	movne	r2, #1
 800299a:	2200      	moveq	r2, #0
 800299c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299e:	4293      	cmp	r3, r2
 80029a0:	d113      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	3b01      	subs	r3, #1
 80029b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d06e      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	d069      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0ad      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029ec:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029f8:	f7fe ff0c 	bl	8001814 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe ff08 	bl	8001814 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e09a      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a12:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1e:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <HAL_RCC_OscConfig+0x784>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a38:	0212      	lsls	r2, r2, #8
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a40:	0852      	lsrs	r2, r2, #1
 8002a42:	3a01      	subs	r2, #1
 8002a44:	0552      	lsls	r2, r2, #21
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a4c:	0852      	lsrs	r2, r2, #1
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	0652      	lsls	r2, r2, #25
 8002a52:	4311      	orrs	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a58:	0912      	lsrs	r2, r2, #4
 8002a5a:	0452      	lsls	r2, r2, #17
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	4930      	ldr	r1, [pc, #192]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2d      	ldr	r2, [pc, #180]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a7c:	f7fe feca 	bl	8001814 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe fec6 	bl	8001814 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e058      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a96:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa2:	e050      	b.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e04f      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d148      	bne.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002acc:	f7fe fea2 	bl	8001814 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe fe9e 	bl	8001814 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e030      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x734>
 8002af2:	e028      	b.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d023      	beq.n	8002b42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fe85 	bl	8001814 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	e00c      	b.n	8002b28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fe81 	bl	8001814 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d905      	bls.n	8002b28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e013      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ec      	bne.n	8002b0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4905      	ldr	r1, [pc, #20]	; (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_OscConfig+0x7b4>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60cb      	str	r3, [r1, #12]
 8002b40:	e001      	b.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	feeefffc 	.word	0xfeeefffc

08002b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0e7      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b75      	ldr	r3, [pc, #468]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d910      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b72      	ldr	r3, [pc, #456]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4970      	ldr	r1, [pc, #448]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0cf      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d908      	bls.n	8002bca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4960      	ldr	r1, [pc, #384]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04c      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	4b5a      	ldr	r3, [pc, #360]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d121      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0a6      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e09a      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e08e      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e086      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4943      	ldr	r1, [pc, #268]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fe fde8 	bl	8001814 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe fde4 	bl	8001814 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e06e      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d208      	bcs.n	8002c9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	492b      	ldr	r1, [pc, #172]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d210      	bcs.n	8002cce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 0207 	bic.w	r2, r3, #7
 8002cb4:	4923      	ldr	r1, [pc, #140]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbc:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e036      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4918      	ldr	r1, [pc, #96]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4910      	ldr	r1, [pc, #64]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0c:	f000 f824 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	490b      	ldr	r1, [pc, #44]	; (8002d4c <HAL_RCC_ClockConfig+0x1f4>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1fc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fd1f 	bl	8001774 <HAL_InitTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08007d90 	.word	0x08007d90
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000004 	.word	0x20000004

08002d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d66:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d70:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x34>
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d121      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d11e      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d8c:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e005      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002db4:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d102      	bne.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	e004      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ddc:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d134      	bne.n	8002e50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0xac>
 8002dfc:	e005      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e00:	617b      	str	r3, [r7, #20]
      break;
 8002e02:	e005      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e06:	617b      	str	r3, [r7, #20]
      break;
 8002e08:	e002      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	617b      	str	r3, [r7, #20]
      break;
 8002e0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	fb03 f202 	mul.w	r2, r3, r2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	0e5b      	lsrs	r3, r3, #25
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	3301      	adds	r3, #1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e50:	69bb      	ldr	r3, [r7, #24]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08007da8 	.word	0x08007da8
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000

08002e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e8c:	f7ff fff0 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	08007da0 	.word	0x08007da0

08002eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eb8:	f7ff ffda 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	0adb      	lsrs	r3, r3, #11
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08007da0 	.word	0x08007da0

08002ee0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eec:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ef8:	f7ff f9ee 	bl	80022d8 <HAL_PWREx_GetVoltageRange>
 8002efc:	6178      	str	r0, [r7, #20]
 8002efe:	e014      	b.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	4a24      	ldr	r2, [pc, #144]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f0c:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f18:	f7ff f9de 	bl	80022d8 <HAL_PWREx_GetVoltageRange>
 8002f1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d10b      	bne.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d919      	bls.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f3c:	d902      	bls.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f3e:	2302      	movs	r3, #2
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	e013      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f44:	2301      	movs	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	e010      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	d902      	bls.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f50:	2303      	movs	r3, #3
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	e00a      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d102      	bne.n	8002f62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	e004      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b70      	cmp	r3, #112	; 0x70
 8002f66:	d101      	bne.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f68:	2301      	movs	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 0207 	bic.w	r2, r3, #7
 8002f74:	4909      	ldr	r1, [pc, #36]	; (8002f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f7c:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d001      	beq.n	8002f8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fa8:	2300      	movs	r3, #0
 8002faa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fac:	2300      	movs	r3, #0
 8002fae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d041      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fc4:	d02a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fca:	d824      	bhi.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fd6:	d81e      	bhi.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe0:	d010      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fe2:	e018      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fe4:	4b86      	ldr	r3, [pc, #536]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a85      	ldr	r2, [pc, #532]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff0:	e015      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fabb 	bl	8003574 <RCCEx_PLLSAI1_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003002:	e00c      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3320      	adds	r3, #32
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fba6 	bl	800375c <RCCEx_PLLSAI2_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003014:	e003      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	74fb      	strb	r3, [r7, #19]
      break;
 800301a:	e000      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800301c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003024:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003032:	4973      	ldr	r1, [pc, #460]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800303a:	e001      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d041      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003050:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003054:	d02a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003056:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800305a:	d824      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800305c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003066:	d81e      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003070:	d010      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003072:	e018      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003074:	4b62      	ldr	r3, [pc, #392]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a61      	ldr	r2, [pc, #388]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003080:	e015      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fa73 	bl	8003574 <RCCEx_PLLSAI1_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003092:	e00c      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3320      	adds	r3, #32
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fb5e 	bl	800375c <RCCEx_PLLSAI2_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	74fb      	strb	r3, [r7, #19]
      break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030b4:	4b52      	ldr	r3, [pc, #328]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c2:	494f      	ldr	r1, [pc, #316]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030ca:	e001      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a0 	beq.w	800321e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	4a40      	ldr	r2, [pc, #256]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003102:	6593      	str	r3, [r2, #88]	; 0x58
 8003104:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003110:	2301      	movs	r3, #1
 8003112:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003114:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800311a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003120:	f7fe fb78 	bl	8001814 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003126:	e009      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003128:	f7fe fb74 	bl	8001814 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d902      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	74fb      	strb	r3, [r7, #19]
        break;
 800313a:	e005      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ef      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d15c      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800314e:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003158:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01f      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	429a      	cmp	r2, r3
 800316a:	d019      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800316c:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003178:	4b21      	ldr	r3, [pc, #132]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	4a20      	ldr	r2, [pc, #128]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003198:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d016      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fe fb33 	bl	8001814 <HAL_GetTick>
 80031ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b0:	e00b      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe fb2f 	bl	8001814 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d902      	bls.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	74fb      	strb	r3, [r7, #19]
            break;
 80031c8:	e006      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ec      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ee:	4904      	ldr	r1, [pc, #16]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031f6:	e009      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	74bb      	strb	r3, [r7, #18]
 80031fc:	e006      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320c:	7c7b      	ldrb	r3, [r7, #17]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d105      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003212:	4b9e      	ldr	r3, [pc, #632]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	4a9d      	ldr	r2, [pc, #628]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800322a:	4b98      	ldr	r3, [pc, #608]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003230:	f023 0203 	bic.w	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	4994      	ldr	r1, [pc, #592]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800324c:	4b8f      	ldr	r3, [pc, #572]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f023 020c 	bic.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	498c      	ldr	r1, [pc, #560]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800326e:	4b87      	ldr	r3, [pc, #540]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	4983      	ldr	r1, [pc, #524]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003290:	4b7e      	ldr	r3, [pc, #504]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	497b      	ldr	r1, [pc, #492]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032b2:	4b76      	ldr	r3, [pc, #472]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c0:	4972      	ldr	r1, [pc, #456]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032d4:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e2:	496a      	ldr	r1, [pc, #424]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032f6:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	4961      	ldr	r1, [pc, #388]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003318:	4b5c      	ldr	r3, [pc, #368]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003326:	4959      	ldr	r1, [pc, #356]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800333a:	4b54      	ldr	r3, [pc, #336]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003348:	4950      	ldr	r1, [pc, #320]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800335c:	4b4b      	ldr	r3, [pc, #300]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	4948      	ldr	r1, [pc, #288]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800337e:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	493f      	ldr	r1, [pc, #252]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d028      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a0:	4b3a      	ldr	r3, [pc, #232]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ae:	4937      	ldr	r1, [pc, #220]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033be:	d106      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c0:	4b32      	ldr	r3, [pc, #200]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a31      	ldr	r2, [pc, #196]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ca:	60d3      	str	r3, [r2, #12]
 80033cc:	e011      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2101      	movs	r1, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f8c8 	bl	8003574 <RCCEx_PLLSAI1_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d028      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033fe:	4b23      	ldr	r3, [pc, #140]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	491f      	ldr	r1, [pc, #124]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800341c:	d106      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003428:	60d3      	str	r3, [r2, #12]
 800342a:	e011      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003434:	d10c      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	2101      	movs	r1, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f899 	bl	8003574 <RCCEx_PLLSAI1_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02b      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346a:	4908      	ldr	r1, [pc, #32]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800347a:	d109      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a02      	ldr	r2, [pc, #8]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003486:	60d3      	str	r3, [r2, #12]
 8003488:	e014      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003494:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003498:	d10c      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	2101      	movs	r1, #1
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f867 	bl	8003574 <RCCEx_PLLSAI1_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d02f      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c0:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ce:	4928      	ldr	r1, [pc, #160]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034de:	d10d      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	2102      	movs	r1, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f844 	bl	8003574 <RCCEx_PLLSAI1_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d014      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	74bb      	strb	r3, [r7, #18]
 80034fa:	e011      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003504:	d10c      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3320      	adds	r3, #32
 800350a:	2102      	movs	r1, #2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f925 	bl	800375c <RCCEx_PLLSAI2_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800353a:	490d      	ldr	r1, [pc, #52]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800355e:	4904      	ldr	r1, [pc, #16]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003566:	7cbb      	ldrb	r3, [r7, #18]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000

08003574 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003582:	4b75      	ldr	r3, [pc, #468]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800358e:	4b72      	ldr	r3, [pc, #456]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0203 	and.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d10d      	bne.n	80035ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
       ||
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035a6:	4b6c      	ldr	r3, [pc, #432]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
       ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d047      	beq.n	800364a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e044      	b.n	800364a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d018      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0x86>
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d825      	bhi.n	8003618 <RCCEx_PLLSAI1_Config+0xa4>
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d002      	beq.n	80035d6 <RCCEx_PLLSAI1_Config+0x62>
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d009      	beq.n	80035e8 <RCCEx_PLLSAI1_Config+0x74>
 80035d4:	e020      	b.n	8003618 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035d6:	4b60      	ldr	r3, [pc, #384]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d11d      	bne.n	800361e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e6:	e01a      	b.n	800361e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035e8:	4b5b      	ldr	r3, [pc, #364]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d116      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f8:	e013      	b.n	8003622 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035fa:	4b57      	ldr	r3, [pc, #348]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10f      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003606:	4b54      	ldr	r3, [pc, #336]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003616:	e006      	b.n	8003626 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e004      	b.n	8003628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800361e:	bf00      	nop
 8003620:	e002      	b.n	8003628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003626:	bf00      	nop
    }

    if(status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	430b      	orrs	r3, r1
 8003644:	4944      	ldr	r1, [pc, #272]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d17d      	bne.n	800374c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a40      	ldr	r2, [pc, #256]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003656:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800365a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365c:	f7fe f8da 	bl	8001814 <HAL_GetTick>
 8003660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003662:	e009      	b.n	8003678 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003664:	f7fe f8d6 	bl	8001814 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d902      	bls.n	8003678 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	73fb      	strb	r3, [r7, #15]
        break;
 8003676:	e005      	b.n	8003684 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003678:	4b37      	ldr	r3, [pc, #220]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ef      	bne.n	8003664 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d160      	bne.n	800374c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d111      	bne.n	80036b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003690:	4b31      	ldr	r3, [pc, #196]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6892      	ldr	r2, [r2, #8]
 80036a0:	0211      	lsls	r1, r2, #8
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68d2      	ldr	r2, [r2, #12]
 80036a6:	0912      	lsrs	r2, r2, #4
 80036a8:	0452      	lsls	r2, r2, #17
 80036aa:	430a      	orrs	r2, r1
 80036ac:	492a      	ldr	r1, [pc, #168]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	610b      	str	r3, [r1, #16]
 80036b2:	e027      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d112      	bne.n	80036e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ba:	4b27      	ldr	r3, [pc, #156]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6892      	ldr	r2, [r2, #8]
 80036ca:	0211      	lsls	r1, r2, #8
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6912      	ldr	r2, [r2, #16]
 80036d0:	0852      	lsrs	r2, r2, #1
 80036d2:	3a01      	subs	r2, #1
 80036d4:	0552      	lsls	r2, r2, #21
 80036d6:	430a      	orrs	r2, r1
 80036d8:	491f      	ldr	r1, [pc, #124]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	610b      	str	r3, [r1, #16]
 80036de:	e011      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6892      	ldr	r2, [r2, #8]
 80036f0:	0211      	lsls	r1, r2, #8
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6952      	ldr	r2, [r2, #20]
 80036f6:	0852      	lsrs	r2, r2, #1
 80036f8:	3a01      	subs	r2, #1
 80036fa:	0652      	lsls	r2, r2, #25
 80036fc:	430a      	orrs	r2, r1
 80036fe:	4916      	ldr	r1, [pc, #88]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a13      	ldr	r2, [pc, #76]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800370e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fe f880 	bl	8001814 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003716:	e009      	b.n	800372c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003718:	f7fe f87c 	bl	8001814 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d902      	bls.n	800372c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	73fb      	strb	r3, [r7, #15]
          break;
 800372a:	e005      	b.n	8003738 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ef      	beq.n	8003718 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	4904      	ldr	r1, [pc, #16]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000

0800375c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800376a:	4b6a      	ldr	r3, [pc, #424]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003776:	4b67      	ldr	r3, [pc, #412]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0203 	and.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d10d      	bne.n	80037a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
       ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800378e:	4b61      	ldr	r3, [pc, #388]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
       ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d047      	beq.n	8003832 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	e044      	b.n	8003832 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d018      	beq.n	80037e2 <RCCEx_PLLSAI2_Config+0x86>
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d825      	bhi.n	8003800 <RCCEx_PLLSAI2_Config+0xa4>
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d002      	beq.n	80037be <RCCEx_PLLSAI2_Config+0x62>
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d009      	beq.n	80037d0 <RCCEx_PLLSAI2_Config+0x74>
 80037bc:	e020      	b.n	8003800 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037be:	4b55      	ldr	r3, [pc, #340]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11d      	bne.n	8003806 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ce:	e01a      	b.n	8003806 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e0:	e013      	b.n	800380a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037e2:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ee:	4b49      	ldr	r3, [pc, #292]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037fe:	e006      	b.n	800380e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e004      	b.n	8003810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800380e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10d      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003816:	4b3f      	ldr	r3, [pc, #252]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	430b      	orrs	r3, r1
 800382c:	4939      	ldr	r1, [pc, #228]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	4313      	orrs	r3, r2
 8003830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d167      	bne.n	8003908 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003838:	4b36      	ldr	r3, [pc, #216]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a35      	ldr	r2, [pc, #212]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fd ffe6 	bl	8001814 <HAL_GetTick>
 8003848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800384a:	e009      	b.n	8003860 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800384c:	f7fd ffe2 	bl	8001814 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d902      	bls.n	8003860 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	73fb      	strb	r3, [r7, #15]
        break;
 800385e:	e005      	b.n	800386c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003860:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ef      	bne.n	800384c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d14a      	bne.n	8003908 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	0211      	lsls	r1, r2, #8
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68d2      	ldr	r2, [r2, #12]
 800388e:	0912      	lsrs	r2, r2, #4
 8003890:	0452      	lsls	r2, r2, #17
 8003892:	430a      	orrs	r2, r1
 8003894:	491f      	ldr	r1, [pc, #124]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	4313      	orrs	r3, r2
 8003898:	614b      	str	r3, [r1, #20]
 800389a:	e011      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	0211      	lsls	r1, r2, #8
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6912      	ldr	r2, [r2, #16]
 80038b2:	0852      	lsrs	r2, r2, #1
 80038b4:	3a01      	subs	r2, #1
 80038b6:	0652      	lsls	r2, r2, #25
 80038b8:	430a      	orrs	r2, r1
 80038ba:	4916      	ldr	r1, [pc, #88]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038c0:	4b14      	ldr	r3, [pc, #80]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a13      	ldr	r2, [pc, #76]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd ffa2 	bl	8001814 <HAL_GetTick>
 80038d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038d2:	e009      	b.n	80038e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038d4:	f7fd ff9e 	bl	8001814 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d902      	bls.n	80038e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	73fb      	strb	r3, [r7, #15]
          break;
 80038e6:	e005      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ef      	beq.n	80038d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	4904      	ldr	r1, [pc, #16]	; (8003914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003904:	4313      	orrs	r3, r2
 8003906:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000

08003918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e040      	b.n	80039ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd fc26 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	; 0x24
 8003944:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fc22 	bl	80041a0 <UART_SetConfig>
 800395c:	4603      	mov	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e022      	b.n	80039ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fece 	bl	8004710 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 ff55 	bl	8004854 <UART_CheckIdleState>
 80039aa:	4603      	mov	r3, r0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	f040 8082 	bne.w	8003ad2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_Transmit+0x26>
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07a      	b.n	8003ad4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Transmit+0x38>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e073      	b.n	8003ad4 <HAL_UART_Transmit+0x120>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2221      	movs	r2, #33	; 0x21
 8003a00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a02:	f7fd ff07 	bl	8001814 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	88fa      	ldrh	r2, [r7, #6]
 8003a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a20:	d108      	bne.n	8003a34 <HAL_UART_Transmit+0x80>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	e003      	b.n	8003a3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a44:	e02d      	b.n	8003aa2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 ff48 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e039      	b.n	8003ad4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a72:	b292      	uxth	r2, r2
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	3302      	adds	r3, #2
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	e008      	b.n	8003a90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	781a      	ldrb	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	b292      	uxth	r2, r2
 8003a88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1cb      	bne.n	8003a46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2140      	movs	r1, #64	; 0x40
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 ff14 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e005      	b.n	8003ad4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d142      	bne.n	8003b78 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_UART_Receive_DMA+0x22>
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e03b      	b.n	8003b7a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_UART_Receive_DMA+0x34>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e034      	b.n	8003b7a <HAL_UART_Receive_DMA+0x9e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <HAL_UART_Receive_DMA+0xa8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d01f      	beq.n	8003b68 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d018      	beq.n	8003b68 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	613b      	str	r3, [r7, #16]
   return(result);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	623b      	str	r3, [r7, #32]
 8003b56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	69f9      	ldr	r1, [r7, #28]
 8003b5a:	6a3a      	ldr	r2, [r7, #32]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e6      	bne.n	8003b36 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 ff7e 	bl	8004a70 <UART_Start_Receive_DMA>
 8003b74:	4603      	mov	r3, r0
 8003b76:	e000      	b.n	8003b7a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3728      	adds	r7, #40	; 0x28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40008000 	.word	0x40008000

08003b88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b0ba      	sub	sp, #232	; 0xe8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003bb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003bbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d115      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00f      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 82a6 	beq.w	8004132 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
      }
      return;
 8003bee:	e2a0      	b.n	8004132 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003bf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8117 	beq.w	8003e28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c0a:	4b85      	ldr	r3, [pc, #532]	; (8003e20 <HAL_UART_IRQHandler+0x298>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 810a 	beq.w	8003e28 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d011      	beq.n	8003c44 <HAL_UART_IRQHandler+0xbc>
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00b      	beq.n	8003c44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2201      	movs	r2, #1
 8003c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3a:	f043 0201 	orr.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d011      	beq.n	8003c74 <HAL_UART_IRQHandler+0xec>
 8003c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2202      	movs	r2, #2
 8003c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6a:	f043 0204 	orr.w	r2, r3, #4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d011      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x11c>
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2204      	movs	r2, #4
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9a:	f043 0202 	orr.w	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d017      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd6:	f043 0208 	orr.w	r2, r3, #8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d012      	beq.n	8003d12 <HAL_UART_IRQHandler+0x18a>
 8003cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00c      	beq.n	8003d12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 820c 	beq.w	8004136 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d005      	beq.n	8003d6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d04f      	beq.n	8003e0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 ff4c 	bl	8004c08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d141      	bne.n	8003e02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3308      	adds	r3, #8
 8003d84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3308      	adds	r3, #8
 8003da6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003daa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1d9      	bne.n	8003d7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d013      	beq.n	8003dfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <HAL_UART_IRQHandler+0x29c>)
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd ffb0 	bl	8001d44 <HAL_DMA_Abort_IT>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d017      	beq.n	8003e1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003df4:	4610      	mov	r0, r2
 8003df6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	e00f      	b.n	8003e1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f9ba 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	e00b      	b.n	8003e1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f9b6 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	e007      	b.n	8003e1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f9b2 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e18:	e18d      	b.n	8004136 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1a:	bf00      	nop
    return;
 8003e1c:	e18b      	b.n	8004136 <HAL_UART_IRQHandler+0x5ae>
 8003e1e:	bf00      	nop
 8003e20:	04000120 	.word	0x04000120
 8003e24:	08004ea7 	.word	0x08004ea7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	f040 8146 	bne.w	80040be <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 813f 	beq.w	80040be <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8138 	beq.w	80040be <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2210      	movs	r2, #16
 8003e54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	f040 80b4 	bne.w	8003fce <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 815f 	beq.w	800413a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e86:	429a      	cmp	r2, r3
 8003e88:	f080 8157 	bcs.w	800413a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f040 8085 	bne.w	8003fb2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ed6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1da      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3308      	adds	r3, #8
 8003f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e1      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3308      	adds	r3, #8
 8003f34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e3      	bne.n	8003f2e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f82:	f023 0310 	bic.w	r3, r3, #16
 8003f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f94:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e4      	bne.n	8003f72 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd fe8b 	bl	8001cc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8de 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fcc:	e0b5      	b.n	800413a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80a7 	beq.w	800413e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003ff0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a2 	beq.w	800413e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800400e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800401c:	647b      	str	r3, [r7, #68]	; 0x44
 800401e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e4      	bne.n	8003ffa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	623b      	str	r3, [r7, #32]
   return(result);
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004054:	633a      	str	r2, [r7, #48]	; 0x30
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800405a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e3      	bne.n	8004030 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	60fb      	str	r3, [r7, #12]
   return(result);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0310 	bic.w	r3, r3, #16
 800408e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	617b      	str	r3, [r7, #20]
   return(result);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e4      	bne.n	800407a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f866 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040bc:	e03f      	b.n	800413e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00e      	beq.n	80040e8 <HAL_UART_IRQHandler+0x560>
 80040ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 ff20 	bl	8004f26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040e6:	e02d      	b.n	8004144 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01c      	beq.n	8004142 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
    }
    return;
 8004110:	e017      	b.n	8004142 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d012      	beq.n	8004144 <HAL_UART_IRQHandler+0x5bc>
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00c      	beq.n	8004144 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fed1 	bl	8004ed2 <UART_EndTransmit_IT>
    return;
 8004130:	e008      	b.n	8004144 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004132:	bf00      	nop
 8004134:	e006      	b.n	8004144 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004136:	bf00      	nop
 8004138:	e004      	b.n	8004144 <HAL_UART_IRQHandler+0x5bc>
      return;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <HAL_UART_IRQHandler+0x5bc>
      return;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004142:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004144:	37e8      	adds	r7, #232	; 0xe8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop

0800414c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a4:	b08a      	sub	sp, #40	; 0x28
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	431a      	orrs	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4ba4      	ldr	r3, [pc, #656]	; (8004460 <UART_SetConfig+0x2c0>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041d8:	430b      	orrs	r3, r1
 80041da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a99      	ldr	r2, [pc, #612]	; (8004464 <UART_SetConfig+0x2c4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d004      	beq.n	800420c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	4313      	orrs	r3, r2
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	430a      	orrs	r2, r1
 800421e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a90      	ldr	r2, [pc, #576]	; (8004468 <UART_SetConfig+0x2c8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d126      	bne.n	8004278 <UART_SetConfig+0xd8>
 800422a:	4b90      	ldr	r3, [pc, #576]	; (800446c <UART_SetConfig+0x2cc>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	2b03      	cmp	r3, #3
 8004236:	d81b      	bhi.n	8004270 <UART_SetConfig+0xd0>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <UART_SetConfig+0xa0>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004251 	.word	0x08004251
 8004244:	08004261 	.word	0x08004261
 8004248:	08004259 	.word	0x08004259
 800424c:	08004269 	.word	0x08004269
 8004250:	2301      	movs	r3, #1
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e116      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004258:	2302      	movs	r3, #2
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e112      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004260:	2304      	movs	r3, #4
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e10e      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004268:	2308      	movs	r3, #8
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	e10a      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004270:	2310      	movs	r3, #16
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e106      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a7c      	ldr	r2, [pc, #496]	; (8004470 <UART_SetConfig+0x2d0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d138      	bne.n	80042f4 <UART_SetConfig+0x154>
 8004282:	4b7a      	ldr	r3, [pc, #488]	; (800446c <UART_SetConfig+0x2cc>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d82d      	bhi.n	80042ec <UART_SetConfig+0x14c>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0xf8>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042cd 	.word	0x080042cd
 800429c:	080042ed 	.word	0x080042ed
 80042a0:	080042ed 	.word	0x080042ed
 80042a4:	080042ed 	.word	0x080042ed
 80042a8:	080042dd 	.word	0x080042dd
 80042ac:	080042ed 	.word	0x080042ed
 80042b0:	080042ed 	.word	0x080042ed
 80042b4:	080042ed 	.word	0x080042ed
 80042b8:	080042d5 	.word	0x080042d5
 80042bc:	080042ed 	.word	0x080042ed
 80042c0:	080042ed 	.word	0x080042ed
 80042c4:	080042ed 	.word	0x080042ed
 80042c8:	080042e5 	.word	0x080042e5
 80042cc:	2300      	movs	r3, #0
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e0d8      	b.n	8004486 <UART_SetConfig+0x2e6>
 80042d4:	2302      	movs	r3, #2
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042da:	e0d4      	b.n	8004486 <UART_SetConfig+0x2e6>
 80042dc:	2304      	movs	r3, #4
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e2:	e0d0      	b.n	8004486 <UART_SetConfig+0x2e6>
 80042e4:	2308      	movs	r3, #8
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ea:	e0cc      	b.n	8004486 <UART_SetConfig+0x2e6>
 80042ec:	2310      	movs	r3, #16
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f2:	e0c8      	b.n	8004486 <UART_SetConfig+0x2e6>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a5e      	ldr	r2, [pc, #376]	; (8004474 <UART_SetConfig+0x2d4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d125      	bne.n	800434a <UART_SetConfig+0x1aa>
 80042fe:	4b5b      	ldr	r3, [pc, #364]	; (800446c <UART_SetConfig+0x2cc>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d016      	beq.n	800433a <UART_SetConfig+0x19a>
 800430c:	2b30      	cmp	r3, #48	; 0x30
 800430e:	d818      	bhi.n	8004342 <UART_SetConfig+0x1a2>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d00a      	beq.n	800432a <UART_SetConfig+0x18a>
 8004314:	2b20      	cmp	r3, #32
 8004316:	d814      	bhi.n	8004342 <UART_SetConfig+0x1a2>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <UART_SetConfig+0x182>
 800431c:	2b10      	cmp	r3, #16
 800431e:	d008      	beq.n	8004332 <UART_SetConfig+0x192>
 8004320:	e00f      	b.n	8004342 <UART_SetConfig+0x1a2>
 8004322:	2300      	movs	r3, #0
 8004324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004328:	e0ad      	b.n	8004486 <UART_SetConfig+0x2e6>
 800432a:	2302      	movs	r3, #2
 800432c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004330:	e0a9      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004332:	2304      	movs	r3, #4
 8004334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004338:	e0a5      	b.n	8004486 <UART_SetConfig+0x2e6>
 800433a:	2308      	movs	r3, #8
 800433c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004340:	e0a1      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004342:	2310      	movs	r3, #16
 8004344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004348:	e09d      	b.n	8004486 <UART_SetConfig+0x2e6>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <UART_SetConfig+0x2d8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d125      	bne.n	80043a0 <UART_SetConfig+0x200>
 8004354:	4b45      	ldr	r3, [pc, #276]	; (800446c <UART_SetConfig+0x2cc>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800435e:	2bc0      	cmp	r3, #192	; 0xc0
 8004360:	d016      	beq.n	8004390 <UART_SetConfig+0x1f0>
 8004362:	2bc0      	cmp	r3, #192	; 0xc0
 8004364:	d818      	bhi.n	8004398 <UART_SetConfig+0x1f8>
 8004366:	2b80      	cmp	r3, #128	; 0x80
 8004368:	d00a      	beq.n	8004380 <UART_SetConfig+0x1e0>
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d814      	bhi.n	8004398 <UART_SetConfig+0x1f8>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <UART_SetConfig+0x1d8>
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d008      	beq.n	8004388 <UART_SetConfig+0x1e8>
 8004376:	e00f      	b.n	8004398 <UART_SetConfig+0x1f8>
 8004378:	2300      	movs	r3, #0
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e082      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004380:	2302      	movs	r3, #2
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e07e      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004388:	2304      	movs	r3, #4
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e07a      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004390:	2308      	movs	r3, #8
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e076      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004398:	2310      	movs	r3, #16
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e072      	b.n	8004486 <UART_SetConfig+0x2e6>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a35      	ldr	r2, [pc, #212]	; (800447c <UART_SetConfig+0x2dc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d12a      	bne.n	8004400 <UART_SetConfig+0x260>
 80043aa:	4b30      	ldr	r3, [pc, #192]	; (800446c <UART_SetConfig+0x2cc>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b8:	d01a      	beq.n	80043f0 <UART_SetConfig+0x250>
 80043ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043be:	d81b      	bhi.n	80043f8 <UART_SetConfig+0x258>
 80043c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c4:	d00c      	beq.n	80043e0 <UART_SetConfig+0x240>
 80043c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ca:	d815      	bhi.n	80043f8 <UART_SetConfig+0x258>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <UART_SetConfig+0x238>
 80043d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d4:	d008      	beq.n	80043e8 <UART_SetConfig+0x248>
 80043d6:	e00f      	b.n	80043f8 <UART_SetConfig+0x258>
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043de:	e052      	b.n	8004486 <UART_SetConfig+0x2e6>
 80043e0:	2302      	movs	r3, #2
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e6:	e04e      	b.n	8004486 <UART_SetConfig+0x2e6>
 80043e8:	2304      	movs	r3, #4
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ee:	e04a      	b.n	8004486 <UART_SetConfig+0x2e6>
 80043f0:	2308      	movs	r3, #8
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f6:	e046      	b.n	8004486 <UART_SetConfig+0x2e6>
 80043f8:	2310      	movs	r3, #16
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fe:	e042      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a17      	ldr	r2, [pc, #92]	; (8004464 <UART_SetConfig+0x2c4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d13a      	bne.n	8004480 <UART_SetConfig+0x2e0>
 800440a:	4b18      	ldr	r3, [pc, #96]	; (800446c <UART_SetConfig+0x2cc>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004418:	d01a      	beq.n	8004450 <UART_SetConfig+0x2b0>
 800441a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800441e:	d81b      	bhi.n	8004458 <UART_SetConfig+0x2b8>
 8004420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004424:	d00c      	beq.n	8004440 <UART_SetConfig+0x2a0>
 8004426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442a:	d815      	bhi.n	8004458 <UART_SetConfig+0x2b8>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <UART_SetConfig+0x298>
 8004430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004434:	d008      	beq.n	8004448 <UART_SetConfig+0x2a8>
 8004436:	e00f      	b.n	8004458 <UART_SetConfig+0x2b8>
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e022      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004440:	2302      	movs	r3, #2
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e01e      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004448:	2304      	movs	r3, #4
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e01a      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004450:	2308      	movs	r3, #8
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e016      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004458:	2310      	movs	r3, #16
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e012      	b.n	8004486 <UART_SetConfig+0x2e6>
 8004460:	efff69f3 	.word	0xefff69f3
 8004464:	40008000 	.word	0x40008000
 8004468:	40013800 	.word	0x40013800
 800446c:	40021000 	.word	0x40021000
 8004470:	40004400 	.word	0x40004400
 8004474:	40004800 	.word	0x40004800
 8004478:	40004c00 	.word	0x40004c00
 800447c:	40005000 	.word	0x40005000
 8004480:	2310      	movs	r3, #16
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a9f      	ldr	r2, [pc, #636]	; (8004708 <UART_SetConfig+0x568>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d17a      	bne.n	8004586 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004490:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004494:	2b08      	cmp	r3, #8
 8004496:	d824      	bhi.n	80044e2 <UART_SetConfig+0x342>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0x300>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044e3 	.word	0x080044e3
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	080044e3 	.word	0x080044e3
 80044b0:	080044d3 	.word	0x080044d3
 80044b4:	080044e3 	.word	0x080044e3
 80044b8:	080044e3 	.word	0x080044e3
 80044bc:	080044e3 	.word	0x080044e3
 80044c0:	080044db 	.word	0x080044db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7fe fce0 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 80044c8:	61f8      	str	r0, [r7, #28]
        break;
 80044ca:	e010      	b.n	80044ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044cc:	4b8f      	ldr	r3, [pc, #572]	; (800470c <UART_SetConfig+0x56c>)
 80044ce:	61fb      	str	r3, [r7, #28]
        break;
 80044d0:	e00d      	b.n	80044ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d2:	f7fe fc41 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 80044d6:	61f8      	str	r0, [r7, #28]
        break;
 80044d8:	e009      	b.n	80044ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	61fb      	str	r3, [r7, #28]
        break;
 80044e0:	e005      	b.n	80044ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80fb 	beq.w	80046ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	4413      	add	r3, r2
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	429a      	cmp	r2, r3
 8004504:	d305      	bcc.n	8004512 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	429a      	cmp	r2, r3
 8004510:	d903      	bls.n	800451a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004518:	e0e8      	b.n	80046ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2200      	movs	r2, #0
 800451e:	461c      	mov	r4, r3
 8004520:	4615      	mov	r5, r2
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	022b      	lsls	r3, r5, #8
 800452c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004530:	0222      	lsls	r2, r4, #8
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	6849      	ldr	r1, [r1, #4]
 8004536:	0849      	lsrs	r1, r1, #1
 8004538:	2000      	movs	r0, #0
 800453a:	4688      	mov	r8, r1
 800453c:	4681      	mov	r9, r0
 800453e:	eb12 0a08 	adds.w	sl, r2, r8
 8004542:	eb43 0b09 	adc.w	fp, r3, r9
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004554:	4650      	mov	r0, sl
 8004556:	4659      	mov	r1, fp
 8004558:	f7fc fb26 	bl	8000ba8 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4613      	mov	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456a:	d308      	bcc.n	800457e <UART_SetConfig+0x3de>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d204      	bcs.n	800457e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	e0b6      	b.n	80046ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004584:	e0b2      	b.n	80046ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458e:	d15e      	bne.n	800464e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004594:	2b08      	cmp	r3, #8
 8004596:	d828      	bhi.n	80045ea <UART_SetConfig+0x44a>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <UART_SetConfig+0x400>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045c5 	.word	0x080045c5
 80045a4:	080045cd 	.word	0x080045cd
 80045a8:	080045d5 	.word	0x080045d5
 80045ac:	080045eb 	.word	0x080045eb
 80045b0:	080045db 	.word	0x080045db
 80045b4:	080045eb 	.word	0x080045eb
 80045b8:	080045eb 	.word	0x080045eb
 80045bc:	080045eb 	.word	0x080045eb
 80045c0:	080045e3 	.word	0x080045e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c4:	f7fe fc60 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 80045c8:	61f8      	str	r0, [r7, #28]
        break;
 80045ca:	e014      	b.n	80045f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045cc:	f7fe fc72 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 80045d0:	61f8      	str	r0, [r7, #28]
        break;
 80045d2:	e010      	b.n	80045f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d4:	4b4d      	ldr	r3, [pc, #308]	; (800470c <UART_SetConfig+0x56c>)
 80045d6:	61fb      	str	r3, [r7, #28]
        break;
 80045d8:	e00d      	b.n	80045f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045da:	f7fe fbbd 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 80045de:	61f8      	str	r0, [r7, #28]
        break;
 80045e0:	e009      	b.n	80045f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e6:	61fb      	str	r3, [r7, #28]
        break;
 80045e8:	e005      	b.n	80045f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d077      	beq.n	80046ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005a      	lsls	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	441a      	add	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b0f      	cmp	r3, #15
 8004616:	d916      	bls.n	8004646 <UART_SetConfig+0x4a6>
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461e:	d212      	bcs.n	8004646 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f023 030f 	bic.w	r3, r3, #15
 8004628:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	b29a      	uxth	r2, r3
 8004636:	8afb      	ldrh	r3, [r7, #22]
 8004638:	4313      	orrs	r3, r2
 800463a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	8afa      	ldrh	r2, [r7, #22]
 8004642:	60da      	str	r2, [r3, #12]
 8004644:	e052      	b.n	80046ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800464c:	e04e      	b.n	80046ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800464e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004652:	2b08      	cmp	r3, #8
 8004654:	d827      	bhi.n	80046a6 <UART_SetConfig+0x506>
 8004656:	a201      	add	r2, pc, #4	; (adr r2, 800465c <UART_SetConfig+0x4bc>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004681 	.word	0x08004681
 8004660:	08004689 	.word	0x08004689
 8004664:	08004691 	.word	0x08004691
 8004668:	080046a7 	.word	0x080046a7
 800466c:	08004697 	.word	0x08004697
 8004670:	080046a7 	.word	0x080046a7
 8004674:	080046a7 	.word	0x080046a7
 8004678:	080046a7 	.word	0x080046a7
 800467c:	0800469f 	.word	0x0800469f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004680:	f7fe fc02 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8004684:	61f8      	str	r0, [r7, #28]
        break;
 8004686:	e014      	b.n	80046b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004688:	f7fe fc14 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 800468c:	61f8      	str	r0, [r7, #28]
        break;
 800468e:	e010      	b.n	80046b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004690:	4b1e      	ldr	r3, [pc, #120]	; (800470c <UART_SetConfig+0x56c>)
 8004692:	61fb      	str	r3, [r7, #28]
        break;
 8004694:	e00d      	b.n	80046b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004696:	f7fe fb5f 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 800469a:	61f8      	str	r0, [r7, #28]
        break;
 800469c:	e009      	b.n	80046b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046a2:	61fb      	str	r3, [r7, #28]
        break;
 80046a4:	e005      	b.n	80046b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046b0:	bf00      	nop
    }

    if (pclk != 0U)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d019      	beq.n	80046ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	085a      	lsrs	r2, r3, #1
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	441a      	add	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b0f      	cmp	r3, #15
 80046d0:	d909      	bls.n	80046e6 <UART_SetConfig+0x546>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d8:	d205      	bcs.n	80046e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	e002      	b.n	80046ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3728      	adds	r7, #40	; 0x28
 8004700:	46bd      	mov	sp, r7
 8004702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004706:	bf00      	nop
 8004708:	40008000 	.word	0x40008000
 800470c:	00f42400 	.word	0x00f42400

08004710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01a      	beq.n	8004826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480e:	d10a      	bne.n	8004826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]
  }
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af02      	add	r7, sp, #8
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004864:	f7fc ffd6 	bl	8001814 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d10e      	bne.n	8004896 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f82d 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e023      	b.n	80048de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d10e      	bne.n	80048c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f817 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e00d      	b.n	80048de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b09c      	sub	sp, #112	; 0x70
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f6:	e0a5      	b.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	f000 80a1 	beq.w	8004a44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fc ff87 	bl	8001814 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <UART_WaitOnFlagUntilTimeout+0x32>
 8004912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004914:	2b00      	cmp	r3, #0
 8004916:	d13e      	bne.n	8004996 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492c:	667b      	str	r3, [r7, #100]	; 0x64
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004938:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800493c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e6      	bne.n	8004918 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3308      	adds	r3, #8
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	663b      	str	r3, [r7, #96]	; 0x60
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3308      	adds	r3, #8
 8004968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800496a:	64ba      	str	r2, [r7, #72]	; 0x48
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e067      	b.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d04f      	beq.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b2:	d147      	bne.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049bc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
 80049de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e6      	bne.n	80049be <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a10:	623a      	str	r2, [r7, #32]
 8004a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	69f9      	ldr	r1, [r7, #28]
 8004a16:	6a3a      	ldr	r2, [r7, #32]
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e5      	bne.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e010      	b.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	bf0c      	ite	eq
 8004a54:	2301      	moveq	r3, #1
 8004a56:	2300      	movne	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	f43f af4a 	beq.w	80048f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3770      	adds	r7, #112	; 0x70
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b096      	sub	sp, #88	; 0x58
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2222      	movs	r2, #34	; 0x22
 8004a98:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02b      	beq.n	8004afa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a42      	ldr	r2, [pc, #264]	; (8004bb0 <UART_Start_Receive_DMA+0x140>)
 8004aa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	4a41      	ldr	r2, [pc, #260]	; (8004bb4 <UART_Start_Receive_DMA+0x144>)
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <UART_Start_Receive_DMA+0x148>)
 8004ab8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	2200      	movs	r2, #0
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3324      	adds	r3, #36	; 0x24
 8004acc:	4619      	mov	r1, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
 8004ad6:	f7fd f897 	bl	8001c08 <HAL_DMA_Start_IT>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00c      	beq.n	8004afa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2210      	movs	r2, #16
 8004ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e055      	b.n	8004ba6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b2a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e6      	bne.n	8004b0a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	653b      	str	r3, [r7, #80]	; 0x50
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3308      	adds	r3, #8
 8004b5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b5c:	637a      	str	r2, [r7, #52]	; 0x34
 8004b5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e5      	bne.n	8004b3c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b90:	623a      	str	r2, [r7, #32]
 8004b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	69f9      	ldr	r1, [r7, #28]
 8004b96:	6a3a      	ldr	r2, [r7, #32]
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e5      	bne.n	8004b70 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3758      	adds	r7, #88	; 0x58
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	08004ccf 	.word	0x08004ccf
 8004bb4:	08004df3 	.word	0x08004df3
 8004bb8:	08004e2b 	.word	0x08004e2b

08004bbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6979      	ldr	r1, [r7, #20]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e6      	bne.n	8004bc4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004bfc:	bf00      	nop
 8004bfe:	3724      	adds	r7, #36	; 0x24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b095      	sub	sp, #84	; 0x54
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e6      	bne.n	8004c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3308      	adds	r3, #8
 8004c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e5      	bne.n	8004c42 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d118      	bne.n	8004cb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f023 0310 	bic.w	r3, r3, #16
 8004c92:	647b      	str	r3, [r7, #68]	; 0x44
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6979      	ldr	r1, [r7, #20]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e6      	bne.n	8004c7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004cc2:	bf00      	nop
 8004cc4:	3754      	adds	r7, #84	; 0x54
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b09c      	sub	sp, #112	; 0x70
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d170      	bne.n	8004dcc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e6      	bne.n	8004cf2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	f023 0301 	bic.w	r3, r3, #1
 8004d3a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3308      	adds	r3, #8
 8004d42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d44:	647a      	str	r2, [r7, #68]	; 0x44
 8004d46:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	623b      	str	r3, [r7, #32]
   return(result);
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d78:	633a      	str	r2, [r7, #48]	; 0x30
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8e:	2220      	movs	r2, #32
 8004d90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d118      	bne.n	8004dcc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0310 	bic.w	r3, r3, #16
 8004dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	69b9      	ldr	r1, [r7, #24]
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e6      	bne.n	8004d9a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d107      	bne.n	8004de4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004dde:	f7ff f9d3 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004de2:	e002      	b.n	8004dea <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004de4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004de6:	f7fc fc07 	bl	80015f8 <HAL_UART_RxCpltCallback>
}
 8004dea:	bf00      	nop
 8004dec:	3770      	adds	r7, #112	; 0x70
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d109      	bne.n	8004e1c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e0e:	085b      	lsrs	r3, r3, #1
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4619      	mov	r1, r3
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff f9b7 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e1a:	e002      	b.n	8004e22 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff f99f 	bl	8004160 <HAL_UART_RxHalfCpltCallback>
}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b086      	sub	sp, #24
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	2b80      	cmp	r3, #128	; 0x80
 8004e50:	d109      	bne.n	8004e66 <UART_DMAError+0x3c>
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b21      	cmp	r3, #33	; 0x21
 8004e56:	d106      	bne.n	8004e66 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004e60:	6978      	ldr	r0, [r7, #20]
 8004e62:	f7ff feab 	bl	8004bbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d109      	bne.n	8004e88 <UART_DMAError+0x5e>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b22      	cmp	r3, #34	; 0x22
 8004e78:	d106      	bne.n	8004e88 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004e82:	6978      	ldr	r0, [r7, #20]
 8004e84:	f7ff fec0 	bl	8004c08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8e:	f043 0210 	orr.w	r2, r3, #16
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e98:	6978      	ldr	r0, [r7, #20]
 8004e9a:	f7ff f96b 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e9e:	bf00      	nop
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7ff f955 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b088      	sub	sp, #32
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	6979      	ldr	r1, [r7, #20]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	613b      	str	r3, [r7, #16]
   return(result);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e6      	bne.n	8004eda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff f917 	bl	800414c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f1e:	bf00      	nop
 8004f20:	3720      	adds	r7, #32
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <__errno>:
 8004f3c:	4b01      	ldr	r3, [pc, #4]	; (8004f44 <__errno+0x8>)
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	2000000c 	.word	0x2000000c

08004f48 <__libc_init_array>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4d0d      	ldr	r5, [pc, #52]	; (8004f80 <__libc_init_array+0x38>)
 8004f4c:	4c0d      	ldr	r4, [pc, #52]	; (8004f84 <__libc_init_array+0x3c>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	2600      	movs	r6, #0
 8004f54:	42a6      	cmp	r6, r4
 8004f56:	d109      	bne.n	8004f6c <__libc_init_array+0x24>
 8004f58:	4d0b      	ldr	r5, [pc, #44]	; (8004f88 <__libc_init_array+0x40>)
 8004f5a:	4c0c      	ldr	r4, [pc, #48]	; (8004f8c <__libc_init_array+0x44>)
 8004f5c:	f002 ff04 	bl	8007d68 <_init>
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	2600      	movs	r6, #0
 8004f66:	42a6      	cmp	r6, r4
 8004f68:	d105      	bne.n	8004f76 <__libc_init_array+0x2e>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f70:	4798      	blx	r3
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7ee      	b.n	8004f54 <__libc_init_array+0xc>
 8004f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7a:	4798      	blx	r3
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	e7f2      	b.n	8004f66 <__libc_init_array+0x1e>
 8004f80:	080081bc 	.word	0x080081bc
 8004f84:	080081bc 	.word	0x080081bc
 8004f88:	080081bc 	.word	0x080081bc
 8004f8c:	080081c0 	.word	0x080081c0

08004f90 <memset>:
 8004f90:	4402      	add	r2, r0
 8004f92:	4603      	mov	r3, r0
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d100      	bne.n	8004f9a <memset+0xa>
 8004f98:	4770      	bx	lr
 8004f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9e:	e7f9      	b.n	8004f94 <memset+0x4>

08004fa0 <__cvt>:
 8004fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa4:	ec55 4b10 	vmov	r4, r5, d0
 8004fa8:	2d00      	cmp	r5, #0
 8004faa:	460e      	mov	r6, r1
 8004fac:	4619      	mov	r1, r3
 8004fae:	462b      	mov	r3, r5
 8004fb0:	bfbb      	ittet	lt
 8004fb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004fb6:	461d      	movlt	r5, r3
 8004fb8:	2300      	movge	r3, #0
 8004fba:	232d      	movlt	r3, #45	; 0x2d
 8004fbc:	700b      	strb	r3, [r1, #0]
 8004fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004fc4:	4691      	mov	r9, r2
 8004fc6:	f023 0820 	bic.w	r8, r3, #32
 8004fca:	bfbc      	itt	lt
 8004fcc:	4622      	movlt	r2, r4
 8004fce:	4614      	movlt	r4, r2
 8004fd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fd4:	d005      	beq.n	8004fe2 <__cvt+0x42>
 8004fd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fda:	d100      	bne.n	8004fde <__cvt+0x3e>
 8004fdc:	3601      	adds	r6, #1
 8004fde:	2102      	movs	r1, #2
 8004fe0:	e000      	b.n	8004fe4 <__cvt+0x44>
 8004fe2:	2103      	movs	r1, #3
 8004fe4:	ab03      	add	r3, sp, #12
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	ab02      	add	r3, sp, #8
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	ec45 4b10 	vmov	d0, r4, r5
 8004ff0:	4653      	mov	r3, sl
 8004ff2:	4632      	mov	r2, r6
 8004ff4:	f000 fcec 	bl	80059d0 <_dtoa_r>
 8004ff8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	d102      	bne.n	8005006 <__cvt+0x66>
 8005000:	f019 0f01 	tst.w	r9, #1
 8005004:	d022      	beq.n	800504c <__cvt+0xac>
 8005006:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800500a:	eb07 0906 	add.w	r9, r7, r6
 800500e:	d110      	bne.n	8005032 <__cvt+0x92>
 8005010:	783b      	ldrb	r3, [r7, #0]
 8005012:	2b30      	cmp	r3, #48	; 0x30
 8005014:	d10a      	bne.n	800502c <__cvt+0x8c>
 8005016:	2200      	movs	r2, #0
 8005018:	2300      	movs	r3, #0
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	f7fb fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 8005022:	b918      	cbnz	r0, 800502c <__cvt+0x8c>
 8005024:	f1c6 0601 	rsb	r6, r6, #1
 8005028:	f8ca 6000 	str.w	r6, [sl]
 800502c:	f8da 3000 	ldr.w	r3, [sl]
 8005030:	4499      	add	r9, r3
 8005032:	2200      	movs	r2, #0
 8005034:	2300      	movs	r3, #0
 8005036:	4620      	mov	r0, r4
 8005038:	4629      	mov	r1, r5
 800503a:	f7fb fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 800503e:	b108      	cbz	r0, 8005044 <__cvt+0xa4>
 8005040:	f8cd 900c 	str.w	r9, [sp, #12]
 8005044:	2230      	movs	r2, #48	; 0x30
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	454b      	cmp	r3, r9
 800504a:	d307      	bcc.n	800505c <__cvt+0xbc>
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005050:	1bdb      	subs	r3, r3, r7
 8005052:	4638      	mov	r0, r7
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	b004      	add	sp, #16
 8005058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505c:	1c59      	adds	r1, r3, #1
 800505e:	9103      	str	r1, [sp, #12]
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e7f0      	b.n	8005046 <__cvt+0xa6>

08005064 <__exponent>:
 8005064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005066:	4603      	mov	r3, r0
 8005068:	2900      	cmp	r1, #0
 800506a:	bfb8      	it	lt
 800506c:	4249      	neglt	r1, r1
 800506e:	f803 2b02 	strb.w	r2, [r3], #2
 8005072:	bfb4      	ite	lt
 8005074:	222d      	movlt	r2, #45	; 0x2d
 8005076:	222b      	movge	r2, #43	; 0x2b
 8005078:	2909      	cmp	r1, #9
 800507a:	7042      	strb	r2, [r0, #1]
 800507c:	dd2a      	ble.n	80050d4 <__exponent+0x70>
 800507e:	f10d 0407 	add.w	r4, sp, #7
 8005082:	46a4      	mov	ip, r4
 8005084:	270a      	movs	r7, #10
 8005086:	46a6      	mov	lr, r4
 8005088:	460a      	mov	r2, r1
 800508a:	fb91 f6f7 	sdiv	r6, r1, r7
 800508e:	fb07 1516 	mls	r5, r7, r6, r1
 8005092:	3530      	adds	r5, #48	; 0x30
 8005094:	2a63      	cmp	r2, #99	; 0x63
 8005096:	f104 34ff 	add.w	r4, r4, #4294967295
 800509a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800509e:	4631      	mov	r1, r6
 80050a0:	dcf1      	bgt.n	8005086 <__exponent+0x22>
 80050a2:	3130      	adds	r1, #48	; 0x30
 80050a4:	f1ae 0502 	sub.w	r5, lr, #2
 80050a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80050ac:	1c44      	adds	r4, r0, #1
 80050ae:	4629      	mov	r1, r5
 80050b0:	4561      	cmp	r1, ip
 80050b2:	d30a      	bcc.n	80050ca <__exponent+0x66>
 80050b4:	f10d 0209 	add.w	r2, sp, #9
 80050b8:	eba2 020e 	sub.w	r2, r2, lr
 80050bc:	4565      	cmp	r5, ip
 80050be:	bf88      	it	hi
 80050c0:	2200      	movhi	r2, #0
 80050c2:	4413      	add	r3, r2
 80050c4:	1a18      	subs	r0, r3, r0
 80050c6:	b003      	add	sp, #12
 80050c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80050d2:	e7ed      	b.n	80050b0 <__exponent+0x4c>
 80050d4:	2330      	movs	r3, #48	; 0x30
 80050d6:	3130      	adds	r1, #48	; 0x30
 80050d8:	7083      	strb	r3, [r0, #2]
 80050da:	70c1      	strb	r1, [r0, #3]
 80050dc:	1d03      	adds	r3, r0, #4
 80050de:	e7f1      	b.n	80050c4 <__exponent+0x60>

080050e0 <_printf_float>:
 80050e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e4:	ed2d 8b02 	vpush	{d8}
 80050e8:	b08d      	sub	sp, #52	; 0x34
 80050ea:	460c      	mov	r4, r1
 80050ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050f0:	4616      	mov	r6, r2
 80050f2:	461f      	mov	r7, r3
 80050f4:	4605      	mov	r5, r0
 80050f6:	f001 fa59 	bl	80065ac <_localeconv_r>
 80050fa:	f8d0 a000 	ldr.w	sl, [r0]
 80050fe:	4650      	mov	r0, sl
 8005100:	f7fb f866 	bl	80001d0 <strlen>
 8005104:	2300      	movs	r3, #0
 8005106:	930a      	str	r3, [sp, #40]	; 0x28
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	9305      	str	r3, [sp, #20]
 800510c:	f8d8 3000 	ldr.w	r3, [r8]
 8005110:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005114:	3307      	adds	r3, #7
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	f103 0208 	add.w	r2, r3, #8
 800511e:	f8c8 2000 	str.w	r2, [r8]
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800512a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800512e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005132:	9307      	str	r3, [sp, #28]
 8005134:	f8cd 8018 	str.w	r8, [sp, #24]
 8005138:	ee08 0a10 	vmov	s16, r0
 800513c:	4b9f      	ldr	r3, [pc, #636]	; (80053bc <_printf_float+0x2dc>)
 800513e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005142:	f04f 32ff 	mov.w	r2, #4294967295
 8005146:	f7fb fcf1 	bl	8000b2c <__aeabi_dcmpun>
 800514a:	bb88      	cbnz	r0, 80051b0 <_printf_float+0xd0>
 800514c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005150:	4b9a      	ldr	r3, [pc, #616]	; (80053bc <_printf_float+0x2dc>)
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	f7fb fccb 	bl	8000af0 <__aeabi_dcmple>
 800515a:	bb48      	cbnz	r0, 80051b0 <_printf_float+0xd0>
 800515c:	2200      	movs	r2, #0
 800515e:	2300      	movs	r3, #0
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	f7fb fcba 	bl	8000adc <__aeabi_dcmplt>
 8005168:	b110      	cbz	r0, 8005170 <_printf_float+0x90>
 800516a:	232d      	movs	r3, #45	; 0x2d
 800516c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005170:	4b93      	ldr	r3, [pc, #588]	; (80053c0 <_printf_float+0x2e0>)
 8005172:	4894      	ldr	r0, [pc, #592]	; (80053c4 <_printf_float+0x2e4>)
 8005174:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005178:	bf94      	ite	ls
 800517a:	4698      	movls	r8, r3
 800517c:	4680      	movhi	r8, r0
 800517e:	2303      	movs	r3, #3
 8005180:	6123      	str	r3, [r4, #16]
 8005182:	9b05      	ldr	r3, [sp, #20]
 8005184:	f023 0204 	bic.w	r2, r3, #4
 8005188:	6022      	str	r2, [r4, #0]
 800518a:	f04f 0900 	mov.w	r9, #0
 800518e:	9700      	str	r7, [sp, #0]
 8005190:	4633      	mov	r3, r6
 8005192:	aa0b      	add	r2, sp, #44	; 0x2c
 8005194:	4621      	mov	r1, r4
 8005196:	4628      	mov	r0, r5
 8005198:	f000 f9d8 	bl	800554c <_printf_common>
 800519c:	3001      	adds	r0, #1
 800519e:	f040 8090 	bne.w	80052c2 <_printf_float+0x1e2>
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295
 80051a6:	b00d      	add	sp, #52	; 0x34
 80051a8:	ecbd 8b02 	vpop	{d8}
 80051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b0:	4642      	mov	r2, r8
 80051b2:	464b      	mov	r3, r9
 80051b4:	4640      	mov	r0, r8
 80051b6:	4649      	mov	r1, r9
 80051b8:	f7fb fcb8 	bl	8000b2c <__aeabi_dcmpun>
 80051bc:	b140      	cbz	r0, 80051d0 <_printf_float+0xf0>
 80051be:	464b      	mov	r3, r9
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bfbc      	itt	lt
 80051c4:	232d      	movlt	r3, #45	; 0x2d
 80051c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051ca:	487f      	ldr	r0, [pc, #508]	; (80053c8 <_printf_float+0x2e8>)
 80051cc:	4b7f      	ldr	r3, [pc, #508]	; (80053cc <_printf_float+0x2ec>)
 80051ce:	e7d1      	b.n	8005174 <_printf_float+0x94>
 80051d0:	6863      	ldr	r3, [r4, #4]
 80051d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051d6:	9206      	str	r2, [sp, #24]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	d13f      	bne.n	800525c <_printf_float+0x17c>
 80051dc:	2306      	movs	r3, #6
 80051de:	6063      	str	r3, [r4, #4]
 80051e0:	9b05      	ldr	r3, [sp, #20]
 80051e2:	6861      	ldr	r1, [r4, #4]
 80051e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051e8:	2300      	movs	r3, #0
 80051ea:	9303      	str	r3, [sp, #12]
 80051ec:	ab0a      	add	r3, sp, #40	; 0x28
 80051ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051f2:	ab09      	add	r3, sp, #36	; 0x24
 80051f4:	ec49 8b10 	vmov	d0, r8, r9
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	6022      	str	r2, [r4, #0]
 80051fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005200:	4628      	mov	r0, r5
 8005202:	f7ff fecd 	bl	8004fa0 <__cvt>
 8005206:	9b06      	ldr	r3, [sp, #24]
 8005208:	9909      	ldr	r1, [sp, #36]	; 0x24
 800520a:	2b47      	cmp	r3, #71	; 0x47
 800520c:	4680      	mov	r8, r0
 800520e:	d108      	bne.n	8005222 <_printf_float+0x142>
 8005210:	1cc8      	adds	r0, r1, #3
 8005212:	db02      	blt.n	800521a <_printf_float+0x13a>
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	4299      	cmp	r1, r3
 8005218:	dd41      	ble.n	800529e <_printf_float+0x1be>
 800521a:	f1ab 0b02 	sub.w	fp, fp, #2
 800521e:	fa5f fb8b 	uxtb.w	fp, fp
 8005222:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005226:	d820      	bhi.n	800526a <_printf_float+0x18a>
 8005228:	3901      	subs	r1, #1
 800522a:	465a      	mov	r2, fp
 800522c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005230:	9109      	str	r1, [sp, #36]	; 0x24
 8005232:	f7ff ff17 	bl	8005064 <__exponent>
 8005236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005238:	1813      	adds	r3, r2, r0
 800523a:	2a01      	cmp	r2, #1
 800523c:	4681      	mov	r9, r0
 800523e:	6123      	str	r3, [r4, #16]
 8005240:	dc02      	bgt.n	8005248 <_printf_float+0x168>
 8005242:	6822      	ldr	r2, [r4, #0]
 8005244:	07d2      	lsls	r2, r2, #31
 8005246:	d501      	bpl.n	800524c <_printf_float+0x16c>
 8005248:	3301      	adds	r3, #1
 800524a:	6123      	str	r3, [r4, #16]
 800524c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005250:	2b00      	cmp	r3, #0
 8005252:	d09c      	beq.n	800518e <_printf_float+0xae>
 8005254:	232d      	movs	r3, #45	; 0x2d
 8005256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800525a:	e798      	b.n	800518e <_printf_float+0xae>
 800525c:	9a06      	ldr	r2, [sp, #24]
 800525e:	2a47      	cmp	r2, #71	; 0x47
 8005260:	d1be      	bne.n	80051e0 <_printf_float+0x100>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1bc      	bne.n	80051e0 <_printf_float+0x100>
 8005266:	2301      	movs	r3, #1
 8005268:	e7b9      	b.n	80051de <_printf_float+0xfe>
 800526a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800526e:	d118      	bne.n	80052a2 <_printf_float+0x1c2>
 8005270:	2900      	cmp	r1, #0
 8005272:	6863      	ldr	r3, [r4, #4]
 8005274:	dd0b      	ble.n	800528e <_printf_float+0x1ae>
 8005276:	6121      	str	r1, [r4, #16]
 8005278:	b913      	cbnz	r3, 8005280 <_printf_float+0x1a0>
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	07d0      	lsls	r0, r2, #31
 800527e:	d502      	bpl.n	8005286 <_printf_float+0x1a6>
 8005280:	3301      	adds	r3, #1
 8005282:	440b      	add	r3, r1
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	65a1      	str	r1, [r4, #88]	; 0x58
 8005288:	f04f 0900 	mov.w	r9, #0
 800528c:	e7de      	b.n	800524c <_printf_float+0x16c>
 800528e:	b913      	cbnz	r3, 8005296 <_printf_float+0x1b6>
 8005290:	6822      	ldr	r2, [r4, #0]
 8005292:	07d2      	lsls	r2, r2, #31
 8005294:	d501      	bpl.n	800529a <_printf_float+0x1ba>
 8005296:	3302      	adds	r3, #2
 8005298:	e7f4      	b.n	8005284 <_printf_float+0x1a4>
 800529a:	2301      	movs	r3, #1
 800529c:	e7f2      	b.n	8005284 <_printf_float+0x1a4>
 800529e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a4:	4299      	cmp	r1, r3
 80052a6:	db05      	blt.n	80052b4 <_printf_float+0x1d4>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	6121      	str	r1, [r4, #16]
 80052ac:	07d8      	lsls	r0, r3, #31
 80052ae:	d5ea      	bpl.n	8005286 <_printf_float+0x1a6>
 80052b0:	1c4b      	adds	r3, r1, #1
 80052b2:	e7e7      	b.n	8005284 <_printf_float+0x1a4>
 80052b4:	2900      	cmp	r1, #0
 80052b6:	bfd4      	ite	le
 80052b8:	f1c1 0202 	rsble	r2, r1, #2
 80052bc:	2201      	movgt	r2, #1
 80052be:	4413      	add	r3, r2
 80052c0:	e7e0      	b.n	8005284 <_printf_float+0x1a4>
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	055a      	lsls	r2, r3, #21
 80052c6:	d407      	bmi.n	80052d8 <_printf_float+0x1f8>
 80052c8:	6923      	ldr	r3, [r4, #16]
 80052ca:	4642      	mov	r2, r8
 80052cc:	4631      	mov	r1, r6
 80052ce:	4628      	mov	r0, r5
 80052d0:	47b8      	blx	r7
 80052d2:	3001      	adds	r0, #1
 80052d4:	d12c      	bne.n	8005330 <_printf_float+0x250>
 80052d6:	e764      	b.n	80051a2 <_printf_float+0xc2>
 80052d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052dc:	f240 80e0 	bls.w	80054a0 <_printf_float+0x3c0>
 80052e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052e4:	2200      	movs	r2, #0
 80052e6:	2300      	movs	r3, #0
 80052e8:	f7fb fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d034      	beq.n	800535a <_printf_float+0x27a>
 80052f0:	4a37      	ldr	r2, [pc, #220]	; (80053d0 <_printf_float+0x2f0>)
 80052f2:	2301      	movs	r3, #1
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f af51 	beq.w	80051a2 <_printf_float+0xc2>
 8005300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005304:	429a      	cmp	r2, r3
 8005306:	db02      	blt.n	800530e <_printf_float+0x22e>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	07d8      	lsls	r0, r3, #31
 800530c:	d510      	bpl.n	8005330 <_printf_float+0x250>
 800530e:	ee18 3a10 	vmov	r3, s16
 8005312:	4652      	mov	r2, sl
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	f43f af41 	beq.w	80051a2 <_printf_float+0xc2>
 8005320:	f04f 0800 	mov.w	r8, #0
 8005324:	f104 091a 	add.w	r9, r4, #26
 8005328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532a:	3b01      	subs	r3, #1
 800532c:	4543      	cmp	r3, r8
 800532e:	dc09      	bgt.n	8005344 <_printf_float+0x264>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	079b      	lsls	r3, r3, #30
 8005334:	f100 8105 	bmi.w	8005542 <_printf_float+0x462>
 8005338:	68e0      	ldr	r0, [r4, #12]
 800533a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800533c:	4298      	cmp	r0, r3
 800533e:	bfb8      	it	lt
 8005340:	4618      	movlt	r0, r3
 8005342:	e730      	b.n	80051a6 <_printf_float+0xc6>
 8005344:	2301      	movs	r3, #1
 8005346:	464a      	mov	r2, r9
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	f43f af27 	beq.w	80051a2 <_printf_float+0xc2>
 8005354:	f108 0801 	add.w	r8, r8, #1
 8005358:	e7e6      	b.n	8005328 <_printf_float+0x248>
 800535a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	dc39      	bgt.n	80053d4 <_printf_float+0x2f4>
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <_printf_float+0x2f0>)
 8005362:	2301      	movs	r3, #1
 8005364:	4631      	mov	r1, r6
 8005366:	4628      	mov	r0, r5
 8005368:	47b8      	blx	r7
 800536a:	3001      	adds	r0, #1
 800536c:	f43f af19 	beq.w	80051a2 <_printf_float+0xc2>
 8005370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005374:	4313      	orrs	r3, r2
 8005376:	d102      	bne.n	800537e <_printf_float+0x29e>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	07d9      	lsls	r1, r3, #31
 800537c:	d5d8      	bpl.n	8005330 <_printf_float+0x250>
 800537e:	ee18 3a10 	vmov	r3, s16
 8005382:	4652      	mov	r2, sl
 8005384:	4631      	mov	r1, r6
 8005386:	4628      	mov	r0, r5
 8005388:	47b8      	blx	r7
 800538a:	3001      	adds	r0, #1
 800538c:	f43f af09 	beq.w	80051a2 <_printf_float+0xc2>
 8005390:	f04f 0900 	mov.w	r9, #0
 8005394:	f104 0a1a 	add.w	sl, r4, #26
 8005398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539a:	425b      	negs	r3, r3
 800539c:	454b      	cmp	r3, r9
 800539e:	dc01      	bgt.n	80053a4 <_printf_float+0x2c4>
 80053a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a2:	e792      	b.n	80052ca <_printf_float+0x1ea>
 80053a4:	2301      	movs	r3, #1
 80053a6:	4652      	mov	r2, sl
 80053a8:	4631      	mov	r1, r6
 80053aa:	4628      	mov	r0, r5
 80053ac:	47b8      	blx	r7
 80053ae:	3001      	adds	r0, #1
 80053b0:	f43f aef7 	beq.w	80051a2 <_printf_float+0xc2>
 80053b4:	f109 0901 	add.w	r9, r9, #1
 80053b8:	e7ee      	b.n	8005398 <_printf_float+0x2b8>
 80053ba:	bf00      	nop
 80053bc:	7fefffff 	.word	0x7fefffff
 80053c0:	08007ddc 	.word	0x08007ddc
 80053c4:	08007de0 	.word	0x08007de0
 80053c8:	08007de8 	.word	0x08007de8
 80053cc:	08007de4 	.word	0x08007de4
 80053d0:	08007dec 	.word	0x08007dec
 80053d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053d8:	429a      	cmp	r2, r3
 80053da:	bfa8      	it	ge
 80053dc:	461a      	movge	r2, r3
 80053de:	2a00      	cmp	r2, #0
 80053e0:	4691      	mov	r9, r2
 80053e2:	dc37      	bgt.n	8005454 <_printf_float+0x374>
 80053e4:	f04f 0b00 	mov.w	fp, #0
 80053e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053ec:	f104 021a 	add.w	r2, r4, #26
 80053f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053f2:	9305      	str	r3, [sp, #20]
 80053f4:	eba3 0309 	sub.w	r3, r3, r9
 80053f8:	455b      	cmp	r3, fp
 80053fa:	dc33      	bgt.n	8005464 <_printf_float+0x384>
 80053fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005400:	429a      	cmp	r2, r3
 8005402:	db3b      	blt.n	800547c <_printf_float+0x39c>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	07da      	lsls	r2, r3, #31
 8005408:	d438      	bmi.n	800547c <_printf_float+0x39c>
 800540a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800540c:	9a05      	ldr	r2, [sp, #20]
 800540e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005410:	1a9a      	subs	r2, r3, r2
 8005412:	eba3 0901 	sub.w	r9, r3, r1
 8005416:	4591      	cmp	r9, r2
 8005418:	bfa8      	it	ge
 800541a:	4691      	movge	r9, r2
 800541c:	f1b9 0f00 	cmp.w	r9, #0
 8005420:	dc35      	bgt.n	800548e <_printf_float+0x3ae>
 8005422:	f04f 0800 	mov.w	r8, #0
 8005426:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800542a:	f104 0a1a 	add.w	sl, r4, #26
 800542e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	eba3 0309 	sub.w	r3, r3, r9
 8005438:	4543      	cmp	r3, r8
 800543a:	f77f af79 	ble.w	8005330 <_printf_float+0x250>
 800543e:	2301      	movs	r3, #1
 8005440:	4652      	mov	r2, sl
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	f43f aeaa 	beq.w	80051a2 <_printf_float+0xc2>
 800544e:	f108 0801 	add.w	r8, r8, #1
 8005452:	e7ec      	b.n	800542e <_printf_float+0x34e>
 8005454:	4613      	mov	r3, r2
 8005456:	4631      	mov	r1, r6
 8005458:	4642      	mov	r2, r8
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	d1c0      	bne.n	80053e4 <_printf_float+0x304>
 8005462:	e69e      	b.n	80051a2 <_printf_float+0xc2>
 8005464:	2301      	movs	r3, #1
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	9205      	str	r2, [sp, #20]
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	f43f ae97 	beq.w	80051a2 <_printf_float+0xc2>
 8005474:	9a05      	ldr	r2, [sp, #20]
 8005476:	f10b 0b01 	add.w	fp, fp, #1
 800547a:	e7b9      	b.n	80053f0 <_printf_float+0x310>
 800547c:	ee18 3a10 	vmov	r3, s16
 8005480:	4652      	mov	r2, sl
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	47b8      	blx	r7
 8005488:	3001      	adds	r0, #1
 800548a:	d1be      	bne.n	800540a <_printf_float+0x32a>
 800548c:	e689      	b.n	80051a2 <_printf_float+0xc2>
 800548e:	9a05      	ldr	r2, [sp, #20]
 8005490:	464b      	mov	r3, r9
 8005492:	4442      	add	r2, r8
 8005494:	4631      	mov	r1, r6
 8005496:	4628      	mov	r0, r5
 8005498:	47b8      	blx	r7
 800549a:	3001      	adds	r0, #1
 800549c:	d1c1      	bne.n	8005422 <_printf_float+0x342>
 800549e:	e680      	b.n	80051a2 <_printf_float+0xc2>
 80054a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054a2:	2a01      	cmp	r2, #1
 80054a4:	dc01      	bgt.n	80054aa <_printf_float+0x3ca>
 80054a6:	07db      	lsls	r3, r3, #31
 80054a8:	d538      	bpl.n	800551c <_printf_float+0x43c>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4642      	mov	r2, r8
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	f43f ae74 	beq.w	80051a2 <_printf_float+0xc2>
 80054ba:	ee18 3a10 	vmov	r3, s16
 80054be:	4652      	mov	r2, sl
 80054c0:	4631      	mov	r1, r6
 80054c2:	4628      	mov	r0, r5
 80054c4:	47b8      	blx	r7
 80054c6:	3001      	adds	r0, #1
 80054c8:	f43f ae6b 	beq.w	80051a2 <_printf_float+0xc2>
 80054cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054d0:	2200      	movs	r2, #0
 80054d2:	2300      	movs	r3, #0
 80054d4:	f7fb faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80054d8:	b9d8      	cbnz	r0, 8005512 <_printf_float+0x432>
 80054da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054dc:	f108 0201 	add.w	r2, r8, #1
 80054e0:	3b01      	subs	r3, #1
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	d10e      	bne.n	800550a <_printf_float+0x42a>
 80054ec:	e659      	b.n	80051a2 <_printf_float+0xc2>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4652      	mov	r2, sl
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f ae52 	beq.w	80051a2 <_printf_float+0xc2>
 80054fe:	f108 0801 	add.w	r8, r8, #1
 8005502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005504:	3b01      	subs	r3, #1
 8005506:	4543      	cmp	r3, r8
 8005508:	dcf1      	bgt.n	80054ee <_printf_float+0x40e>
 800550a:	464b      	mov	r3, r9
 800550c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005510:	e6dc      	b.n	80052cc <_printf_float+0x1ec>
 8005512:	f04f 0800 	mov.w	r8, #0
 8005516:	f104 0a1a 	add.w	sl, r4, #26
 800551a:	e7f2      	b.n	8005502 <_printf_float+0x422>
 800551c:	2301      	movs	r3, #1
 800551e:	4642      	mov	r2, r8
 8005520:	e7df      	b.n	80054e2 <_printf_float+0x402>
 8005522:	2301      	movs	r3, #1
 8005524:	464a      	mov	r2, r9
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	f43f ae38 	beq.w	80051a2 <_printf_float+0xc2>
 8005532:	f108 0801 	add.w	r8, r8, #1
 8005536:	68e3      	ldr	r3, [r4, #12]
 8005538:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800553a:	1a5b      	subs	r3, r3, r1
 800553c:	4543      	cmp	r3, r8
 800553e:	dcf0      	bgt.n	8005522 <_printf_float+0x442>
 8005540:	e6fa      	b.n	8005338 <_printf_float+0x258>
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	f104 0919 	add.w	r9, r4, #25
 800554a:	e7f4      	b.n	8005536 <_printf_float+0x456>

0800554c <_printf_common>:
 800554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	4616      	mov	r6, r2
 8005552:	4699      	mov	r9, r3
 8005554:	688a      	ldr	r2, [r1, #8]
 8005556:	690b      	ldr	r3, [r1, #16]
 8005558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800555c:	4293      	cmp	r3, r2
 800555e:	bfb8      	it	lt
 8005560:	4613      	movlt	r3, r2
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005568:	4607      	mov	r7, r0
 800556a:	460c      	mov	r4, r1
 800556c:	b10a      	cbz	r2, 8005572 <_printf_common+0x26>
 800556e:	3301      	adds	r3, #1
 8005570:	6033      	str	r3, [r6, #0]
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	0699      	lsls	r1, r3, #26
 8005576:	bf42      	ittt	mi
 8005578:	6833      	ldrmi	r3, [r6, #0]
 800557a:	3302      	addmi	r3, #2
 800557c:	6033      	strmi	r3, [r6, #0]
 800557e:	6825      	ldr	r5, [r4, #0]
 8005580:	f015 0506 	ands.w	r5, r5, #6
 8005584:	d106      	bne.n	8005594 <_printf_common+0x48>
 8005586:	f104 0a19 	add.w	sl, r4, #25
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	6832      	ldr	r2, [r6, #0]
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	42ab      	cmp	r3, r5
 8005592:	dc26      	bgt.n	80055e2 <_printf_common+0x96>
 8005594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005598:	1e13      	subs	r3, r2, #0
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	bf18      	it	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	0692      	lsls	r2, r2, #26
 80055a2:	d42b      	bmi.n	80055fc <_printf_common+0xb0>
 80055a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055a8:	4649      	mov	r1, r9
 80055aa:	4638      	mov	r0, r7
 80055ac:	47c0      	blx	r8
 80055ae:	3001      	adds	r0, #1
 80055b0:	d01e      	beq.n	80055f0 <_printf_common+0xa4>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	68e5      	ldr	r5, [r4, #12]
 80055b6:	6832      	ldr	r2, [r6, #0]
 80055b8:	f003 0306 	and.w	r3, r3, #6
 80055bc:	2b04      	cmp	r3, #4
 80055be:	bf08      	it	eq
 80055c0:	1aad      	subeq	r5, r5, r2
 80055c2:	68a3      	ldr	r3, [r4, #8]
 80055c4:	6922      	ldr	r2, [r4, #16]
 80055c6:	bf0c      	ite	eq
 80055c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055cc:	2500      	movne	r5, #0
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bfc4      	itt	gt
 80055d2:	1a9b      	subgt	r3, r3, r2
 80055d4:	18ed      	addgt	r5, r5, r3
 80055d6:	2600      	movs	r6, #0
 80055d8:	341a      	adds	r4, #26
 80055da:	42b5      	cmp	r5, r6
 80055dc:	d11a      	bne.n	8005614 <_printf_common+0xc8>
 80055de:	2000      	movs	r0, #0
 80055e0:	e008      	b.n	80055f4 <_printf_common+0xa8>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4652      	mov	r2, sl
 80055e6:	4649      	mov	r1, r9
 80055e8:	4638      	mov	r0, r7
 80055ea:	47c0      	blx	r8
 80055ec:	3001      	adds	r0, #1
 80055ee:	d103      	bne.n	80055f8 <_printf_common+0xac>
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f8:	3501      	adds	r5, #1
 80055fa:	e7c6      	b.n	800558a <_printf_common+0x3e>
 80055fc:	18e1      	adds	r1, r4, r3
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	2030      	movs	r0, #48	; 0x30
 8005602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005606:	4422      	add	r2, r4
 8005608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800560c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005610:	3302      	adds	r3, #2
 8005612:	e7c7      	b.n	80055a4 <_printf_common+0x58>
 8005614:	2301      	movs	r3, #1
 8005616:	4622      	mov	r2, r4
 8005618:	4649      	mov	r1, r9
 800561a:	4638      	mov	r0, r7
 800561c:	47c0      	blx	r8
 800561e:	3001      	adds	r0, #1
 8005620:	d0e6      	beq.n	80055f0 <_printf_common+0xa4>
 8005622:	3601      	adds	r6, #1
 8005624:	e7d9      	b.n	80055da <_printf_common+0x8e>
	...

08005628 <_printf_i>:
 8005628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	7e0f      	ldrb	r7, [r1, #24]
 800562e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005630:	2f78      	cmp	r7, #120	; 0x78
 8005632:	4691      	mov	r9, r2
 8005634:	4680      	mov	r8, r0
 8005636:	460c      	mov	r4, r1
 8005638:	469a      	mov	sl, r3
 800563a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800563e:	d807      	bhi.n	8005650 <_printf_i+0x28>
 8005640:	2f62      	cmp	r7, #98	; 0x62
 8005642:	d80a      	bhi.n	800565a <_printf_i+0x32>
 8005644:	2f00      	cmp	r7, #0
 8005646:	f000 80d8 	beq.w	80057fa <_printf_i+0x1d2>
 800564a:	2f58      	cmp	r7, #88	; 0x58
 800564c:	f000 80a3 	beq.w	8005796 <_printf_i+0x16e>
 8005650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005658:	e03a      	b.n	80056d0 <_printf_i+0xa8>
 800565a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800565e:	2b15      	cmp	r3, #21
 8005660:	d8f6      	bhi.n	8005650 <_printf_i+0x28>
 8005662:	a101      	add	r1, pc, #4	; (adr r1, 8005668 <_printf_i+0x40>)
 8005664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056d5 	.word	0x080056d5
 8005670:	08005651 	.word	0x08005651
 8005674:	08005651 	.word	0x08005651
 8005678:	08005651 	.word	0x08005651
 800567c:	08005651 	.word	0x08005651
 8005680:	080056d5 	.word	0x080056d5
 8005684:	08005651 	.word	0x08005651
 8005688:	08005651 	.word	0x08005651
 800568c:	08005651 	.word	0x08005651
 8005690:	08005651 	.word	0x08005651
 8005694:	080057e1 	.word	0x080057e1
 8005698:	08005705 	.word	0x08005705
 800569c:	080057c3 	.word	0x080057c3
 80056a0:	08005651 	.word	0x08005651
 80056a4:	08005651 	.word	0x08005651
 80056a8:	08005803 	.word	0x08005803
 80056ac:	08005651 	.word	0x08005651
 80056b0:	08005705 	.word	0x08005705
 80056b4:	08005651 	.word	0x08005651
 80056b8:	08005651 	.word	0x08005651
 80056bc:	080057cb 	.word	0x080057cb
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	602a      	str	r2, [r5, #0]
 80056c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0a3      	b.n	800581c <_printf_i+0x1f4>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	6829      	ldr	r1, [r5, #0]
 80056d8:	0606      	lsls	r6, r0, #24
 80056da:	f101 0304 	add.w	r3, r1, #4
 80056de:	d50a      	bpl.n	80056f6 <_printf_i+0xce>
 80056e0:	680e      	ldr	r6, [r1, #0]
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	2e00      	cmp	r6, #0
 80056e6:	da03      	bge.n	80056f0 <_printf_i+0xc8>
 80056e8:	232d      	movs	r3, #45	; 0x2d
 80056ea:	4276      	negs	r6, r6
 80056ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f0:	485e      	ldr	r0, [pc, #376]	; (800586c <_printf_i+0x244>)
 80056f2:	230a      	movs	r3, #10
 80056f4:	e019      	b.n	800572a <_printf_i+0x102>
 80056f6:	680e      	ldr	r6, [r1, #0]
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056fe:	bf18      	it	ne
 8005700:	b236      	sxthne	r6, r6
 8005702:	e7ef      	b.n	80056e4 <_printf_i+0xbc>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	1d19      	adds	r1, r3, #4
 800570a:	6029      	str	r1, [r5, #0]
 800570c:	0601      	lsls	r1, r0, #24
 800570e:	d501      	bpl.n	8005714 <_printf_i+0xec>
 8005710:	681e      	ldr	r6, [r3, #0]
 8005712:	e002      	b.n	800571a <_printf_i+0xf2>
 8005714:	0646      	lsls	r6, r0, #25
 8005716:	d5fb      	bpl.n	8005710 <_printf_i+0xe8>
 8005718:	881e      	ldrh	r6, [r3, #0]
 800571a:	4854      	ldr	r0, [pc, #336]	; (800586c <_printf_i+0x244>)
 800571c:	2f6f      	cmp	r7, #111	; 0x6f
 800571e:	bf0c      	ite	eq
 8005720:	2308      	moveq	r3, #8
 8005722:	230a      	movne	r3, #10
 8005724:	2100      	movs	r1, #0
 8005726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800572a:	6865      	ldr	r5, [r4, #4]
 800572c:	60a5      	str	r5, [r4, #8]
 800572e:	2d00      	cmp	r5, #0
 8005730:	bfa2      	ittt	ge
 8005732:	6821      	ldrge	r1, [r4, #0]
 8005734:	f021 0104 	bicge.w	r1, r1, #4
 8005738:	6021      	strge	r1, [r4, #0]
 800573a:	b90e      	cbnz	r6, 8005740 <_printf_i+0x118>
 800573c:	2d00      	cmp	r5, #0
 800573e:	d04d      	beq.n	80057dc <_printf_i+0x1b4>
 8005740:	4615      	mov	r5, r2
 8005742:	fbb6 f1f3 	udiv	r1, r6, r3
 8005746:	fb03 6711 	mls	r7, r3, r1, r6
 800574a:	5dc7      	ldrb	r7, [r0, r7]
 800574c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005750:	4637      	mov	r7, r6
 8005752:	42bb      	cmp	r3, r7
 8005754:	460e      	mov	r6, r1
 8005756:	d9f4      	bls.n	8005742 <_printf_i+0x11a>
 8005758:	2b08      	cmp	r3, #8
 800575a:	d10b      	bne.n	8005774 <_printf_i+0x14c>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	07de      	lsls	r6, r3, #31
 8005760:	d508      	bpl.n	8005774 <_printf_i+0x14c>
 8005762:	6923      	ldr	r3, [r4, #16]
 8005764:	6861      	ldr	r1, [r4, #4]
 8005766:	4299      	cmp	r1, r3
 8005768:	bfde      	ittt	le
 800576a:	2330      	movle	r3, #48	; 0x30
 800576c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005770:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005774:	1b52      	subs	r2, r2, r5
 8005776:	6122      	str	r2, [r4, #16]
 8005778:	f8cd a000 	str.w	sl, [sp]
 800577c:	464b      	mov	r3, r9
 800577e:	aa03      	add	r2, sp, #12
 8005780:	4621      	mov	r1, r4
 8005782:	4640      	mov	r0, r8
 8005784:	f7ff fee2 	bl	800554c <_printf_common>
 8005788:	3001      	adds	r0, #1
 800578a:	d14c      	bne.n	8005826 <_printf_i+0x1fe>
 800578c:	f04f 30ff 	mov.w	r0, #4294967295
 8005790:	b004      	add	sp, #16
 8005792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005796:	4835      	ldr	r0, [pc, #212]	; (800586c <_printf_i+0x244>)
 8005798:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800579c:	6829      	ldr	r1, [r5, #0]
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80057a4:	6029      	str	r1, [r5, #0]
 80057a6:	061d      	lsls	r5, r3, #24
 80057a8:	d514      	bpl.n	80057d4 <_printf_i+0x1ac>
 80057aa:	07df      	lsls	r7, r3, #31
 80057ac:	bf44      	itt	mi
 80057ae:	f043 0320 	orrmi.w	r3, r3, #32
 80057b2:	6023      	strmi	r3, [r4, #0]
 80057b4:	b91e      	cbnz	r6, 80057be <_printf_i+0x196>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f023 0320 	bic.w	r3, r3, #32
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	2310      	movs	r3, #16
 80057c0:	e7b0      	b.n	8005724 <_printf_i+0xfc>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	f043 0320 	orr.w	r3, r3, #32
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	2378      	movs	r3, #120	; 0x78
 80057cc:	4828      	ldr	r0, [pc, #160]	; (8005870 <_printf_i+0x248>)
 80057ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057d2:	e7e3      	b.n	800579c <_printf_i+0x174>
 80057d4:	0659      	lsls	r1, r3, #25
 80057d6:	bf48      	it	mi
 80057d8:	b2b6      	uxthmi	r6, r6
 80057da:	e7e6      	b.n	80057aa <_printf_i+0x182>
 80057dc:	4615      	mov	r5, r2
 80057de:	e7bb      	b.n	8005758 <_printf_i+0x130>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	6826      	ldr	r6, [r4, #0]
 80057e4:	6961      	ldr	r1, [r4, #20]
 80057e6:	1d18      	adds	r0, r3, #4
 80057e8:	6028      	str	r0, [r5, #0]
 80057ea:	0635      	lsls	r5, r6, #24
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	d501      	bpl.n	80057f4 <_printf_i+0x1cc>
 80057f0:	6019      	str	r1, [r3, #0]
 80057f2:	e002      	b.n	80057fa <_printf_i+0x1d2>
 80057f4:	0670      	lsls	r0, r6, #25
 80057f6:	d5fb      	bpl.n	80057f0 <_printf_i+0x1c8>
 80057f8:	8019      	strh	r1, [r3, #0]
 80057fa:	2300      	movs	r3, #0
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	4615      	mov	r5, r2
 8005800:	e7ba      	b.n	8005778 <_printf_i+0x150>
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	602a      	str	r2, [r5, #0]
 8005808:	681d      	ldr	r5, [r3, #0]
 800580a:	6862      	ldr	r2, [r4, #4]
 800580c:	2100      	movs	r1, #0
 800580e:	4628      	mov	r0, r5
 8005810:	f7fa fce6 	bl	80001e0 <memchr>
 8005814:	b108      	cbz	r0, 800581a <_printf_i+0x1f2>
 8005816:	1b40      	subs	r0, r0, r5
 8005818:	6060      	str	r0, [r4, #4]
 800581a:	6863      	ldr	r3, [r4, #4]
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	2300      	movs	r3, #0
 8005820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005824:	e7a8      	b.n	8005778 <_printf_i+0x150>
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	462a      	mov	r2, r5
 800582a:	4649      	mov	r1, r9
 800582c:	4640      	mov	r0, r8
 800582e:	47d0      	blx	sl
 8005830:	3001      	adds	r0, #1
 8005832:	d0ab      	beq.n	800578c <_printf_i+0x164>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	079b      	lsls	r3, r3, #30
 8005838:	d413      	bmi.n	8005862 <_printf_i+0x23a>
 800583a:	68e0      	ldr	r0, [r4, #12]
 800583c:	9b03      	ldr	r3, [sp, #12]
 800583e:	4298      	cmp	r0, r3
 8005840:	bfb8      	it	lt
 8005842:	4618      	movlt	r0, r3
 8005844:	e7a4      	b.n	8005790 <_printf_i+0x168>
 8005846:	2301      	movs	r3, #1
 8005848:	4632      	mov	r2, r6
 800584a:	4649      	mov	r1, r9
 800584c:	4640      	mov	r0, r8
 800584e:	47d0      	blx	sl
 8005850:	3001      	adds	r0, #1
 8005852:	d09b      	beq.n	800578c <_printf_i+0x164>
 8005854:	3501      	adds	r5, #1
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	9903      	ldr	r1, [sp, #12]
 800585a:	1a5b      	subs	r3, r3, r1
 800585c:	42ab      	cmp	r3, r5
 800585e:	dcf2      	bgt.n	8005846 <_printf_i+0x21e>
 8005860:	e7eb      	b.n	800583a <_printf_i+0x212>
 8005862:	2500      	movs	r5, #0
 8005864:	f104 0619 	add.w	r6, r4, #25
 8005868:	e7f5      	b.n	8005856 <_printf_i+0x22e>
 800586a:	bf00      	nop
 800586c:	08007dee 	.word	0x08007dee
 8005870:	08007dff 	.word	0x08007dff

08005874 <siprintf>:
 8005874:	b40e      	push	{r1, r2, r3}
 8005876:	b500      	push	{lr}
 8005878:	b09c      	sub	sp, #112	; 0x70
 800587a:	ab1d      	add	r3, sp, #116	; 0x74
 800587c:	9002      	str	r0, [sp, #8]
 800587e:	9006      	str	r0, [sp, #24]
 8005880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005884:	4809      	ldr	r0, [pc, #36]	; (80058ac <siprintf+0x38>)
 8005886:	9107      	str	r1, [sp, #28]
 8005888:	9104      	str	r1, [sp, #16]
 800588a:	4909      	ldr	r1, [pc, #36]	; (80058b0 <siprintf+0x3c>)
 800588c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005890:	9105      	str	r1, [sp, #20]
 8005892:	6800      	ldr	r0, [r0, #0]
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	a902      	add	r1, sp, #8
 8005898:	f001 fb78 	bl	8006f8c <_svfiprintf_r>
 800589c:	9b02      	ldr	r3, [sp, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	b01c      	add	sp, #112	; 0x70
 80058a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a8:	b003      	add	sp, #12
 80058aa:	4770      	bx	lr
 80058ac:	2000000c 	.word	0x2000000c
 80058b0:	ffff0208 	.word	0xffff0208

080058b4 <quorem>:
 80058b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	6903      	ldr	r3, [r0, #16]
 80058ba:	690c      	ldr	r4, [r1, #16]
 80058bc:	42a3      	cmp	r3, r4
 80058be:	4607      	mov	r7, r0
 80058c0:	f2c0 8081 	blt.w	80059c6 <quorem+0x112>
 80058c4:	3c01      	subs	r4, #1
 80058c6:	f101 0814 	add.w	r8, r1, #20
 80058ca:	f100 0514 	add.w	r5, r0, #20
 80058ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058dc:	3301      	adds	r3, #1
 80058de:	429a      	cmp	r2, r3
 80058e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80058ec:	d331      	bcc.n	8005952 <quorem+0x9e>
 80058ee:	f04f 0e00 	mov.w	lr, #0
 80058f2:	4640      	mov	r0, r8
 80058f4:	46ac      	mov	ip, r5
 80058f6:	46f2      	mov	sl, lr
 80058f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80058fc:	b293      	uxth	r3, r2
 80058fe:	fb06 e303 	mla	r3, r6, r3, lr
 8005902:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005906:	b29b      	uxth	r3, r3
 8005908:	ebaa 0303 	sub.w	r3, sl, r3
 800590c:	f8dc a000 	ldr.w	sl, [ip]
 8005910:	0c12      	lsrs	r2, r2, #16
 8005912:	fa13 f38a 	uxtah	r3, r3, sl
 8005916:	fb06 e202 	mla	r2, r6, r2, lr
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	9b00      	ldr	r3, [sp, #0]
 800591e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005922:	b292      	uxth	r2, r2
 8005924:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800592c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005930:	4581      	cmp	r9, r0
 8005932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005936:	f84c 3b04 	str.w	r3, [ip], #4
 800593a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800593e:	d2db      	bcs.n	80058f8 <quorem+0x44>
 8005940:	f855 300b 	ldr.w	r3, [r5, fp]
 8005944:	b92b      	cbnz	r3, 8005952 <quorem+0x9e>
 8005946:	9b01      	ldr	r3, [sp, #4]
 8005948:	3b04      	subs	r3, #4
 800594a:	429d      	cmp	r5, r3
 800594c:	461a      	mov	r2, r3
 800594e:	d32e      	bcc.n	80059ae <quorem+0xfa>
 8005950:	613c      	str	r4, [r7, #16]
 8005952:	4638      	mov	r0, r7
 8005954:	f001 f8c6 	bl	8006ae4 <__mcmp>
 8005958:	2800      	cmp	r0, #0
 800595a:	db24      	blt.n	80059a6 <quorem+0xf2>
 800595c:	3601      	adds	r6, #1
 800595e:	4628      	mov	r0, r5
 8005960:	f04f 0c00 	mov.w	ip, #0
 8005964:	f858 2b04 	ldr.w	r2, [r8], #4
 8005968:	f8d0 e000 	ldr.w	lr, [r0]
 800596c:	b293      	uxth	r3, r2
 800596e:	ebac 0303 	sub.w	r3, ip, r3
 8005972:	0c12      	lsrs	r2, r2, #16
 8005974:	fa13 f38e 	uxtah	r3, r3, lr
 8005978:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800597c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005980:	b29b      	uxth	r3, r3
 8005982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005986:	45c1      	cmp	r9, r8
 8005988:	f840 3b04 	str.w	r3, [r0], #4
 800598c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005990:	d2e8      	bcs.n	8005964 <quorem+0xb0>
 8005992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800599a:	b922      	cbnz	r2, 80059a6 <quorem+0xf2>
 800599c:	3b04      	subs	r3, #4
 800599e:	429d      	cmp	r5, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	d30a      	bcc.n	80059ba <quorem+0x106>
 80059a4:	613c      	str	r4, [r7, #16]
 80059a6:	4630      	mov	r0, r6
 80059a8:	b003      	add	sp, #12
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	3b04      	subs	r3, #4
 80059b2:	2a00      	cmp	r2, #0
 80059b4:	d1cc      	bne.n	8005950 <quorem+0x9c>
 80059b6:	3c01      	subs	r4, #1
 80059b8:	e7c7      	b.n	800594a <quorem+0x96>
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	3b04      	subs	r3, #4
 80059be:	2a00      	cmp	r2, #0
 80059c0:	d1f0      	bne.n	80059a4 <quorem+0xf0>
 80059c2:	3c01      	subs	r4, #1
 80059c4:	e7eb      	b.n	800599e <quorem+0xea>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e7ee      	b.n	80059a8 <quorem+0xf4>
 80059ca:	0000      	movs	r0, r0
 80059cc:	0000      	movs	r0, r0
	...

080059d0 <_dtoa_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	ed2d 8b04 	vpush	{d8-d9}
 80059d8:	ec57 6b10 	vmov	r6, r7, d0
 80059dc:	b093      	sub	sp, #76	; 0x4c
 80059de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80059e4:	9106      	str	r1, [sp, #24]
 80059e6:	ee10 aa10 	vmov	sl, s0
 80059ea:	4604      	mov	r4, r0
 80059ec:	9209      	str	r2, [sp, #36]	; 0x24
 80059ee:	930c      	str	r3, [sp, #48]	; 0x30
 80059f0:	46bb      	mov	fp, r7
 80059f2:	b975      	cbnz	r5, 8005a12 <_dtoa_r+0x42>
 80059f4:	2010      	movs	r0, #16
 80059f6:	f000 fddd 	bl	80065b4 <malloc>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6260      	str	r0, [r4, #36]	; 0x24
 80059fe:	b920      	cbnz	r0, 8005a0a <_dtoa_r+0x3a>
 8005a00:	4ba7      	ldr	r3, [pc, #668]	; (8005ca0 <_dtoa_r+0x2d0>)
 8005a02:	21ea      	movs	r1, #234	; 0xea
 8005a04:	48a7      	ldr	r0, [pc, #668]	; (8005ca4 <_dtoa_r+0x2d4>)
 8005a06:	f001 fbd1 	bl	80071ac <__assert_func>
 8005a0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a0e:	6005      	str	r5, [r0, #0]
 8005a10:	60c5      	str	r5, [r0, #12]
 8005a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	b151      	cbz	r1, 8005a2e <_dtoa_r+0x5e>
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	604a      	str	r2, [r1, #4]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	4093      	lsls	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 fe1c 	bl	8006660 <_Bfree>
 8005a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	1e3b      	subs	r3, r7, #0
 8005a30:	bfaa      	itet	ge
 8005a32:	2300      	movge	r3, #0
 8005a34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005a38:	f8c8 3000 	strge.w	r3, [r8]
 8005a3c:	4b9a      	ldr	r3, [pc, #616]	; (8005ca8 <_dtoa_r+0x2d8>)
 8005a3e:	bfbc      	itt	lt
 8005a40:	2201      	movlt	r2, #1
 8005a42:	f8c8 2000 	strlt.w	r2, [r8]
 8005a46:	ea33 030b 	bics.w	r3, r3, fp
 8005a4a:	d11b      	bne.n	8005a84 <_dtoa_r+0xb4>
 8005a4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a58:	4333      	orrs	r3, r6
 8005a5a:	f000 8592 	beq.w	8006582 <_dtoa_r+0xbb2>
 8005a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a60:	b963      	cbnz	r3, 8005a7c <_dtoa_r+0xac>
 8005a62:	4b92      	ldr	r3, [pc, #584]	; (8005cac <_dtoa_r+0x2dc>)
 8005a64:	e022      	b.n	8005aac <_dtoa_r+0xdc>
 8005a66:	4b92      	ldr	r3, [pc, #584]	; (8005cb0 <_dtoa_r+0x2e0>)
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	9801      	ldr	r0, [sp, #4]
 8005a72:	b013      	add	sp, #76	; 0x4c
 8005a74:	ecbd 8b04 	vpop	{d8-d9}
 8005a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7c:	4b8b      	ldr	r3, [pc, #556]	; (8005cac <_dtoa_r+0x2dc>)
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	3303      	adds	r3, #3
 8005a82:	e7f3      	b.n	8005a6c <_dtoa_r+0x9c>
 8005a84:	2200      	movs	r2, #0
 8005a86:	2300      	movs	r3, #0
 8005a88:	4650      	mov	r0, sl
 8005a8a:	4659      	mov	r1, fp
 8005a8c:	f7fb f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a90:	ec4b ab19 	vmov	d9, sl, fp
 8005a94:	4680      	mov	r8, r0
 8005a96:	b158      	cbz	r0, 8005ab0 <_dtoa_r+0xe0>
 8005a98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 856b 	beq.w	800657c <_dtoa_r+0xbac>
 8005aa6:	4883      	ldr	r0, [pc, #524]	; (8005cb4 <_dtoa_r+0x2e4>)
 8005aa8:	6018      	str	r0, [r3, #0]
 8005aaa:	1e43      	subs	r3, r0, #1
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	e7df      	b.n	8005a70 <_dtoa_r+0xa0>
 8005ab0:	ec4b ab10 	vmov	d0, sl, fp
 8005ab4:	aa10      	add	r2, sp, #64	; 0x40
 8005ab6:	a911      	add	r1, sp, #68	; 0x44
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f001 f8b9 	bl	8006c30 <__d2b>
 8005abe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005ac2:	ee08 0a10 	vmov	s16, r0
 8005ac6:	2d00      	cmp	r5, #0
 8005ac8:	f000 8084 	beq.w	8005bd4 <_dtoa_r+0x204>
 8005acc:	ee19 3a90 	vmov	r3, s19
 8005ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ad8:	4656      	mov	r6, sl
 8005ada:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ade:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ae2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ae6:	4b74      	ldr	r3, [pc, #464]	; (8005cb8 <_dtoa_r+0x2e8>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4630      	mov	r0, r6
 8005aec:	4639      	mov	r1, r7
 8005aee:	f7fa fbcb 	bl	8000288 <__aeabi_dsub>
 8005af2:	a365      	add	r3, pc, #404	; (adr r3, 8005c88 <_dtoa_r+0x2b8>)
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f7fa fd7e 	bl	80005f8 <__aeabi_dmul>
 8005afc:	a364      	add	r3, pc, #400	; (adr r3, 8005c90 <_dtoa_r+0x2c0>)
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	f7fa fbc3 	bl	800028c <__adddf3>
 8005b06:	4606      	mov	r6, r0
 8005b08:	4628      	mov	r0, r5
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	f7fa fd0a 	bl	8000524 <__aeabi_i2d>
 8005b10:	a361      	add	r3, pc, #388	; (adr r3, 8005c98 <_dtoa_r+0x2c8>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f7fa fd6f 	bl	80005f8 <__aeabi_dmul>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4630      	mov	r0, r6
 8005b20:	4639      	mov	r1, r7
 8005b22:	f7fa fbb3 	bl	800028c <__adddf3>
 8005b26:	4606      	mov	r6, r0
 8005b28:	460f      	mov	r7, r1
 8005b2a:	f7fb f815 	bl	8000b58 <__aeabi_d2iz>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	9000      	str	r0, [sp, #0]
 8005b32:	2300      	movs	r3, #0
 8005b34:	4630      	mov	r0, r6
 8005b36:	4639      	mov	r1, r7
 8005b38:	f7fa ffd0 	bl	8000adc <__aeabi_dcmplt>
 8005b3c:	b150      	cbz	r0, 8005b54 <_dtoa_r+0x184>
 8005b3e:	9800      	ldr	r0, [sp, #0]
 8005b40:	f7fa fcf0 	bl	8000524 <__aeabi_i2d>
 8005b44:	4632      	mov	r2, r6
 8005b46:	463b      	mov	r3, r7
 8005b48:	f7fa ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b4c:	b910      	cbnz	r0, 8005b54 <_dtoa_r+0x184>
 8005b4e:	9b00      	ldr	r3, [sp, #0]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	9b00      	ldr	r3, [sp, #0]
 8005b56:	2b16      	cmp	r3, #22
 8005b58:	d85a      	bhi.n	8005c10 <_dtoa_r+0x240>
 8005b5a:	9a00      	ldr	r2, [sp, #0]
 8005b5c:	4b57      	ldr	r3, [pc, #348]	; (8005cbc <_dtoa_r+0x2ec>)
 8005b5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	ec51 0b19 	vmov	r0, r1, d9
 8005b6a:	f7fa ffb7 	bl	8000adc <__aeabi_dcmplt>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d050      	beq.n	8005c14 <_dtoa_r+0x244>
 8005b72:	9b00      	ldr	r3, [sp, #0]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b7e:	1b5d      	subs	r5, r3, r5
 8005b80:	1e6b      	subs	r3, r5, #1
 8005b82:	9305      	str	r3, [sp, #20]
 8005b84:	bf45      	ittet	mi
 8005b86:	f1c5 0301 	rsbmi	r3, r5, #1
 8005b8a:	9304      	strmi	r3, [sp, #16]
 8005b8c:	2300      	movpl	r3, #0
 8005b8e:	2300      	movmi	r3, #0
 8005b90:	bf4c      	ite	mi
 8005b92:	9305      	strmi	r3, [sp, #20]
 8005b94:	9304      	strpl	r3, [sp, #16]
 8005b96:	9b00      	ldr	r3, [sp, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	db3d      	blt.n	8005c18 <_dtoa_r+0x248>
 8005b9c:	9b05      	ldr	r3, [sp, #20]
 8005b9e:	9a00      	ldr	r2, [sp, #0]
 8005ba0:	920a      	str	r2, [sp, #40]	; 0x28
 8005ba2:	4413      	add	r3, r2
 8005ba4:	9305      	str	r3, [sp, #20]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9307      	str	r3, [sp, #28]
 8005baa:	9b06      	ldr	r3, [sp, #24]
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	f200 8089 	bhi.w	8005cc4 <_dtoa_r+0x2f4>
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	bfc4      	itt	gt
 8005bb6:	3b04      	subgt	r3, #4
 8005bb8:	9306      	strgt	r3, [sp, #24]
 8005bba:	9b06      	ldr	r3, [sp, #24]
 8005bbc:	f1a3 0302 	sub.w	r3, r3, #2
 8005bc0:	bfcc      	ite	gt
 8005bc2:	2500      	movgt	r5, #0
 8005bc4:	2501      	movle	r5, #1
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	f200 8087 	bhi.w	8005cda <_dtoa_r+0x30a>
 8005bcc:	e8df f003 	tbb	[pc, r3]
 8005bd0:	59383a2d 	.word	0x59383a2d
 8005bd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005bd8:	441d      	add	r5, r3
 8005bda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	bfc1      	itttt	gt
 8005be2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005be6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005bea:	fa0b f303 	lslgt.w	r3, fp, r3
 8005bee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005bf2:	bfda      	itte	le
 8005bf4:	f1c3 0320 	rsble	r3, r3, #32
 8005bf8:	fa06 f003 	lslle.w	r0, r6, r3
 8005bfc:	4318      	orrgt	r0, r3
 8005bfe:	f7fa fc81 	bl	8000504 <__aeabi_ui2d>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4606      	mov	r6, r0
 8005c06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c0a:	3d01      	subs	r5, #1
 8005c0c:	930e      	str	r3, [sp, #56]	; 0x38
 8005c0e:	e76a      	b.n	8005ae6 <_dtoa_r+0x116>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e7b2      	b.n	8005b7a <_dtoa_r+0x1aa>
 8005c14:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c16:	e7b1      	b.n	8005b7c <_dtoa_r+0x1ac>
 8005c18:	9b04      	ldr	r3, [sp, #16]
 8005c1a:	9a00      	ldr	r2, [sp, #0]
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	9304      	str	r3, [sp, #16]
 8005c20:	4253      	negs	r3, r2
 8005c22:	9307      	str	r3, [sp, #28]
 8005c24:	2300      	movs	r3, #0
 8005c26:	930a      	str	r3, [sp, #40]	; 0x28
 8005c28:	e7bf      	b.n	8005baa <_dtoa_r+0x1da>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9308      	str	r3, [sp, #32]
 8005c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dc55      	bgt.n	8005ce0 <_dtoa_r+0x310>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c3e:	e00c      	b.n	8005c5a <_dtoa_r+0x28a>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e7f3      	b.n	8005c2c <_dtoa_r+0x25c>
 8005c44:	2300      	movs	r3, #0
 8005c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c48:	9308      	str	r3, [sp, #32]
 8005c4a:	9b00      	ldr	r3, [sp, #0]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	9302      	str	r3, [sp, #8]
 8005c50:	3301      	adds	r3, #1
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	9303      	str	r3, [sp, #12]
 8005c56:	bfb8      	it	lt
 8005c58:	2301      	movlt	r3, #1
 8005c5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	6042      	str	r2, [r0, #4]
 8005c60:	2204      	movs	r2, #4
 8005c62:	f102 0614 	add.w	r6, r2, #20
 8005c66:	429e      	cmp	r6, r3
 8005c68:	6841      	ldr	r1, [r0, #4]
 8005c6a:	d93d      	bls.n	8005ce8 <_dtoa_r+0x318>
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 fcb7 	bl	80065e0 <_Balloc>
 8005c72:	9001      	str	r0, [sp, #4]
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d13b      	bne.n	8005cf0 <_dtoa_r+0x320>
 8005c78:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <_dtoa_r+0x2f0>)
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c80:	e6c0      	b.n	8005a04 <_dtoa_r+0x34>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e7df      	b.n	8005c46 <_dtoa_r+0x276>
 8005c86:	bf00      	nop
 8005c88:	636f4361 	.word	0x636f4361
 8005c8c:	3fd287a7 	.word	0x3fd287a7
 8005c90:	8b60c8b3 	.word	0x8b60c8b3
 8005c94:	3fc68a28 	.word	0x3fc68a28
 8005c98:	509f79fb 	.word	0x509f79fb
 8005c9c:	3fd34413 	.word	0x3fd34413
 8005ca0:	08007e1d 	.word	0x08007e1d
 8005ca4:	08007e34 	.word	0x08007e34
 8005ca8:	7ff00000 	.word	0x7ff00000
 8005cac:	08007e19 	.word	0x08007e19
 8005cb0:	08007e10 	.word	0x08007e10
 8005cb4:	08007ded 	.word	0x08007ded
 8005cb8:	3ff80000 	.word	0x3ff80000
 8005cbc:	08007f28 	.word	0x08007f28
 8005cc0:	08007e8f 	.word	0x08007e8f
 8005cc4:	2501      	movs	r5, #1
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9306      	str	r3, [sp, #24]
 8005cca:	9508      	str	r5, [sp, #32]
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2312      	movs	r3, #18
 8005cd8:	e7b0      	b.n	8005c3c <_dtoa_r+0x26c>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	9308      	str	r3, [sp, #32]
 8005cde:	e7f5      	b.n	8005ccc <_dtoa_r+0x2fc>
 8005ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ce6:	e7b8      	b.n	8005c5a <_dtoa_r+0x28a>
 8005ce8:	3101      	adds	r1, #1
 8005cea:	6041      	str	r1, [r0, #4]
 8005cec:	0052      	lsls	r2, r2, #1
 8005cee:	e7b8      	b.n	8005c62 <_dtoa_r+0x292>
 8005cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cf2:	9a01      	ldr	r2, [sp, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	9b03      	ldr	r3, [sp, #12]
 8005cf8:	2b0e      	cmp	r3, #14
 8005cfa:	f200 809d 	bhi.w	8005e38 <_dtoa_r+0x468>
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	f000 809a 	beq.w	8005e38 <_dtoa_r+0x468>
 8005d04:	9b00      	ldr	r3, [sp, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	dd32      	ble.n	8005d70 <_dtoa_r+0x3a0>
 8005d0a:	4ab7      	ldr	r2, [pc, #732]	; (8005fe8 <_dtoa_r+0x618>)
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d18:	9b00      	ldr	r3, [sp, #0]
 8005d1a:	05d8      	lsls	r0, r3, #23
 8005d1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005d20:	d516      	bpl.n	8005d50 <_dtoa_r+0x380>
 8005d22:	4bb2      	ldr	r3, [pc, #712]	; (8005fec <_dtoa_r+0x61c>)
 8005d24:	ec51 0b19 	vmov	r0, r1, d9
 8005d28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d2c:	f7fa fd8e 	bl	800084c <__aeabi_ddiv>
 8005d30:	f007 070f 	and.w	r7, r7, #15
 8005d34:	4682      	mov	sl, r0
 8005d36:	468b      	mov	fp, r1
 8005d38:	2503      	movs	r5, #3
 8005d3a:	4eac      	ldr	r6, [pc, #688]	; (8005fec <_dtoa_r+0x61c>)
 8005d3c:	b957      	cbnz	r7, 8005d54 <_dtoa_r+0x384>
 8005d3e:	4642      	mov	r2, r8
 8005d40:	464b      	mov	r3, r9
 8005d42:	4650      	mov	r0, sl
 8005d44:	4659      	mov	r1, fp
 8005d46:	f7fa fd81 	bl	800084c <__aeabi_ddiv>
 8005d4a:	4682      	mov	sl, r0
 8005d4c:	468b      	mov	fp, r1
 8005d4e:	e028      	b.n	8005da2 <_dtoa_r+0x3d2>
 8005d50:	2502      	movs	r5, #2
 8005d52:	e7f2      	b.n	8005d3a <_dtoa_r+0x36a>
 8005d54:	07f9      	lsls	r1, r7, #31
 8005d56:	d508      	bpl.n	8005d6a <_dtoa_r+0x39a>
 8005d58:	4640      	mov	r0, r8
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d60:	f7fa fc4a 	bl	80005f8 <__aeabi_dmul>
 8005d64:	3501      	adds	r5, #1
 8005d66:	4680      	mov	r8, r0
 8005d68:	4689      	mov	r9, r1
 8005d6a:	107f      	asrs	r7, r7, #1
 8005d6c:	3608      	adds	r6, #8
 8005d6e:	e7e5      	b.n	8005d3c <_dtoa_r+0x36c>
 8005d70:	f000 809b 	beq.w	8005eaa <_dtoa_r+0x4da>
 8005d74:	9b00      	ldr	r3, [sp, #0]
 8005d76:	4f9d      	ldr	r7, [pc, #628]	; (8005fec <_dtoa_r+0x61c>)
 8005d78:	425e      	negs	r6, r3
 8005d7a:	4b9b      	ldr	r3, [pc, #620]	; (8005fe8 <_dtoa_r+0x618>)
 8005d7c:	f006 020f 	and.w	r2, r6, #15
 8005d80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	ec51 0b19 	vmov	r0, r1, d9
 8005d8c:	f7fa fc34 	bl	80005f8 <__aeabi_dmul>
 8005d90:	1136      	asrs	r6, r6, #4
 8005d92:	4682      	mov	sl, r0
 8005d94:	468b      	mov	fp, r1
 8005d96:	2300      	movs	r3, #0
 8005d98:	2502      	movs	r5, #2
 8005d9a:	2e00      	cmp	r6, #0
 8005d9c:	d17a      	bne.n	8005e94 <_dtoa_r+0x4c4>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1d3      	bne.n	8005d4a <_dtoa_r+0x37a>
 8005da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 8082 	beq.w	8005eae <_dtoa_r+0x4de>
 8005daa:	4b91      	ldr	r3, [pc, #580]	; (8005ff0 <_dtoa_r+0x620>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	4650      	mov	r0, sl
 8005db0:	4659      	mov	r1, fp
 8005db2:	f7fa fe93 	bl	8000adc <__aeabi_dcmplt>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d079      	beq.n	8005eae <_dtoa_r+0x4de>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d076      	beq.n	8005eae <_dtoa_r+0x4de>
 8005dc0:	9b02      	ldr	r3, [sp, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	dd36      	ble.n	8005e34 <_dtoa_r+0x464>
 8005dc6:	9b00      	ldr	r3, [sp, #0]
 8005dc8:	4650      	mov	r0, sl
 8005dca:	4659      	mov	r1, fp
 8005dcc:	1e5f      	subs	r7, r3, #1
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4b88      	ldr	r3, [pc, #544]	; (8005ff4 <_dtoa_r+0x624>)
 8005dd2:	f7fa fc11 	bl	80005f8 <__aeabi_dmul>
 8005dd6:	9e02      	ldr	r6, [sp, #8]
 8005dd8:	4682      	mov	sl, r0
 8005dda:	468b      	mov	fp, r1
 8005ddc:	3501      	adds	r5, #1
 8005dde:	4628      	mov	r0, r5
 8005de0:	f7fa fba0 	bl	8000524 <__aeabi_i2d>
 8005de4:	4652      	mov	r2, sl
 8005de6:	465b      	mov	r3, fp
 8005de8:	f7fa fc06 	bl	80005f8 <__aeabi_dmul>
 8005dec:	4b82      	ldr	r3, [pc, #520]	; (8005ff8 <_dtoa_r+0x628>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	f7fa fa4c 	bl	800028c <__adddf3>
 8005df4:	46d0      	mov	r8, sl
 8005df6:	46d9      	mov	r9, fp
 8005df8:	4682      	mov	sl, r0
 8005dfa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005dfe:	2e00      	cmp	r6, #0
 8005e00:	d158      	bne.n	8005eb4 <_dtoa_r+0x4e4>
 8005e02:	4b7e      	ldr	r3, [pc, #504]	; (8005ffc <_dtoa_r+0x62c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	4640      	mov	r0, r8
 8005e08:	4649      	mov	r1, r9
 8005e0a:	f7fa fa3d 	bl	8000288 <__aeabi_dsub>
 8005e0e:	4652      	mov	r2, sl
 8005e10:	465b      	mov	r3, fp
 8005e12:	4680      	mov	r8, r0
 8005e14:	4689      	mov	r9, r1
 8005e16:	f7fa fe7f 	bl	8000b18 <__aeabi_dcmpgt>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	f040 8295 	bne.w	800634a <_dtoa_r+0x97a>
 8005e20:	4652      	mov	r2, sl
 8005e22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e26:	4640      	mov	r0, r8
 8005e28:	4649      	mov	r1, r9
 8005e2a:	f7fa fe57 	bl	8000adc <__aeabi_dcmplt>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f040 8289 	bne.w	8006346 <_dtoa_r+0x976>
 8005e34:	ec5b ab19 	vmov	sl, fp, d9
 8005e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f2c0 8148 	blt.w	80060d0 <_dtoa_r+0x700>
 8005e40:	9a00      	ldr	r2, [sp, #0]
 8005e42:	2a0e      	cmp	r2, #14
 8005e44:	f300 8144 	bgt.w	80060d0 <_dtoa_r+0x700>
 8005e48:	4b67      	ldr	r3, [pc, #412]	; (8005fe8 <_dtoa_r+0x618>)
 8005e4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f280 80d5 	bge.w	8006004 <_dtoa_r+0x634>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f300 80d1 	bgt.w	8006004 <_dtoa_r+0x634>
 8005e62:	f040 826f 	bne.w	8006344 <_dtoa_r+0x974>
 8005e66:	4b65      	ldr	r3, [pc, #404]	; (8005ffc <_dtoa_r+0x62c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	f7fa fbc3 	bl	80005f8 <__aeabi_dmul>
 8005e72:	4652      	mov	r2, sl
 8005e74:	465b      	mov	r3, fp
 8005e76:	f7fa fe45 	bl	8000b04 <__aeabi_dcmpge>
 8005e7a:	9e03      	ldr	r6, [sp, #12]
 8005e7c:	4637      	mov	r7, r6
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f040 8245 	bne.w	800630e <_dtoa_r+0x93e>
 8005e84:	9d01      	ldr	r5, [sp, #4]
 8005e86:	2331      	movs	r3, #49	; 0x31
 8005e88:	f805 3b01 	strb.w	r3, [r5], #1
 8005e8c:	9b00      	ldr	r3, [sp, #0]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	e240      	b.n	8006316 <_dtoa_r+0x946>
 8005e94:	07f2      	lsls	r2, r6, #31
 8005e96:	d505      	bpl.n	8005ea4 <_dtoa_r+0x4d4>
 8005e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e9c:	f7fa fbac 	bl	80005f8 <__aeabi_dmul>
 8005ea0:	3501      	adds	r5, #1
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	1076      	asrs	r6, r6, #1
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	e777      	b.n	8005d9a <_dtoa_r+0x3ca>
 8005eaa:	2502      	movs	r5, #2
 8005eac:	e779      	b.n	8005da2 <_dtoa_r+0x3d2>
 8005eae:	9f00      	ldr	r7, [sp, #0]
 8005eb0:	9e03      	ldr	r6, [sp, #12]
 8005eb2:	e794      	b.n	8005dde <_dtoa_r+0x40e>
 8005eb4:	9901      	ldr	r1, [sp, #4]
 8005eb6:	4b4c      	ldr	r3, [pc, #304]	; (8005fe8 <_dtoa_r+0x618>)
 8005eb8:	4431      	add	r1, r6
 8005eba:	910d      	str	r1, [sp, #52]	; 0x34
 8005ebc:	9908      	ldr	r1, [sp, #32]
 8005ebe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ec2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ec6:	2900      	cmp	r1, #0
 8005ec8:	d043      	beq.n	8005f52 <_dtoa_r+0x582>
 8005eca:	494d      	ldr	r1, [pc, #308]	; (8006000 <_dtoa_r+0x630>)
 8005ecc:	2000      	movs	r0, #0
 8005ece:	f7fa fcbd 	bl	800084c <__aeabi_ddiv>
 8005ed2:	4652      	mov	r2, sl
 8005ed4:	465b      	mov	r3, fp
 8005ed6:	f7fa f9d7 	bl	8000288 <__aeabi_dsub>
 8005eda:	9d01      	ldr	r5, [sp, #4]
 8005edc:	4682      	mov	sl, r0
 8005ede:	468b      	mov	fp, r1
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	f7fa fe38 	bl	8000b58 <__aeabi_d2iz>
 8005ee8:	4606      	mov	r6, r0
 8005eea:	f7fa fb1b 	bl	8000524 <__aeabi_i2d>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	f7fa f9c7 	bl	8000288 <__aeabi_dsub>
 8005efa:	3630      	adds	r6, #48	; 0x30
 8005efc:	f805 6b01 	strb.w	r6, [r5], #1
 8005f00:	4652      	mov	r2, sl
 8005f02:	465b      	mov	r3, fp
 8005f04:	4680      	mov	r8, r0
 8005f06:	4689      	mov	r9, r1
 8005f08:	f7fa fde8 	bl	8000adc <__aeabi_dcmplt>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d163      	bne.n	8005fd8 <_dtoa_r+0x608>
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	4936      	ldr	r1, [pc, #216]	; (8005ff0 <_dtoa_r+0x620>)
 8005f16:	2000      	movs	r0, #0
 8005f18:	f7fa f9b6 	bl	8000288 <__aeabi_dsub>
 8005f1c:	4652      	mov	r2, sl
 8005f1e:	465b      	mov	r3, fp
 8005f20:	f7fa fddc 	bl	8000adc <__aeabi_dcmplt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f040 80b5 	bne.w	8006094 <_dtoa_r+0x6c4>
 8005f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f2c:	429d      	cmp	r5, r3
 8005f2e:	d081      	beq.n	8005e34 <_dtoa_r+0x464>
 8005f30:	4b30      	ldr	r3, [pc, #192]	; (8005ff4 <_dtoa_r+0x624>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	4650      	mov	r0, sl
 8005f36:	4659      	mov	r1, fp
 8005f38:	f7fa fb5e 	bl	80005f8 <__aeabi_dmul>
 8005f3c:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <_dtoa_r+0x624>)
 8005f3e:	4682      	mov	sl, r0
 8005f40:	468b      	mov	fp, r1
 8005f42:	4640      	mov	r0, r8
 8005f44:	4649      	mov	r1, r9
 8005f46:	2200      	movs	r2, #0
 8005f48:	f7fa fb56 	bl	80005f8 <__aeabi_dmul>
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	4689      	mov	r9, r1
 8005f50:	e7c6      	b.n	8005ee0 <_dtoa_r+0x510>
 8005f52:	4650      	mov	r0, sl
 8005f54:	4659      	mov	r1, fp
 8005f56:	f7fa fb4f 	bl	80005f8 <__aeabi_dmul>
 8005f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f5c:	9d01      	ldr	r5, [sp, #4]
 8005f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f60:	4682      	mov	sl, r0
 8005f62:	468b      	mov	fp, r1
 8005f64:	4649      	mov	r1, r9
 8005f66:	4640      	mov	r0, r8
 8005f68:	f7fa fdf6 	bl	8000b58 <__aeabi_d2iz>
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	f7fa fad9 	bl	8000524 <__aeabi_i2d>
 8005f72:	3630      	adds	r6, #48	; 0x30
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	f7fa f984 	bl	8000288 <__aeabi_dsub>
 8005f80:	f805 6b01 	strb.w	r6, [r5], #1
 8005f84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f86:	429d      	cmp	r5, r3
 8005f88:	4680      	mov	r8, r0
 8005f8a:	4689      	mov	r9, r1
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	d124      	bne.n	8005fdc <_dtoa_r+0x60c>
 8005f92:	4b1b      	ldr	r3, [pc, #108]	; (8006000 <_dtoa_r+0x630>)
 8005f94:	4650      	mov	r0, sl
 8005f96:	4659      	mov	r1, fp
 8005f98:	f7fa f978 	bl	800028c <__adddf3>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	f7fa fdb8 	bl	8000b18 <__aeabi_dcmpgt>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d173      	bne.n	8006094 <_dtoa_r+0x6c4>
 8005fac:	4652      	mov	r2, sl
 8005fae:	465b      	mov	r3, fp
 8005fb0:	4913      	ldr	r1, [pc, #76]	; (8006000 <_dtoa_r+0x630>)
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	f7fa f968 	bl	8000288 <__aeabi_dsub>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	f7fa fd8c 	bl	8000adc <__aeabi_dcmplt>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f43f af35 	beq.w	8005e34 <_dtoa_r+0x464>
 8005fca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005fcc:	1e6b      	subs	r3, r5, #1
 8005fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fd4:	2b30      	cmp	r3, #48	; 0x30
 8005fd6:	d0f8      	beq.n	8005fca <_dtoa_r+0x5fa>
 8005fd8:	9700      	str	r7, [sp, #0]
 8005fda:	e049      	b.n	8006070 <_dtoa_r+0x6a0>
 8005fdc:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <_dtoa_r+0x624>)
 8005fde:	f7fa fb0b 	bl	80005f8 <__aeabi_dmul>
 8005fe2:	4680      	mov	r8, r0
 8005fe4:	4689      	mov	r9, r1
 8005fe6:	e7bd      	b.n	8005f64 <_dtoa_r+0x594>
 8005fe8:	08007f28 	.word	0x08007f28
 8005fec:	08007f00 	.word	0x08007f00
 8005ff0:	3ff00000 	.word	0x3ff00000
 8005ff4:	40240000 	.word	0x40240000
 8005ff8:	401c0000 	.word	0x401c0000
 8005ffc:	40140000 	.word	0x40140000
 8006000:	3fe00000 	.word	0x3fe00000
 8006004:	9d01      	ldr	r5, [sp, #4]
 8006006:	4656      	mov	r6, sl
 8006008:	465f      	mov	r7, fp
 800600a:	4642      	mov	r2, r8
 800600c:	464b      	mov	r3, r9
 800600e:	4630      	mov	r0, r6
 8006010:	4639      	mov	r1, r7
 8006012:	f7fa fc1b 	bl	800084c <__aeabi_ddiv>
 8006016:	f7fa fd9f 	bl	8000b58 <__aeabi_d2iz>
 800601a:	4682      	mov	sl, r0
 800601c:	f7fa fa82 	bl	8000524 <__aeabi_i2d>
 8006020:	4642      	mov	r2, r8
 8006022:	464b      	mov	r3, r9
 8006024:	f7fa fae8 	bl	80005f8 <__aeabi_dmul>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4630      	mov	r0, r6
 800602e:	4639      	mov	r1, r7
 8006030:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006034:	f7fa f928 	bl	8000288 <__aeabi_dsub>
 8006038:	f805 6b01 	strb.w	r6, [r5], #1
 800603c:	9e01      	ldr	r6, [sp, #4]
 800603e:	9f03      	ldr	r7, [sp, #12]
 8006040:	1bae      	subs	r6, r5, r6
 8006042:	42b7      	cmp	r7, r6
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	d135      	bne.n	80060b6 <_dtoa_r+0x6e6>
 800604a:	f7fa f91f 	bl	800028c <__adddf3>
 800604e:	4642      	mov	r2, r8
 8006050:	464b      	mov	r3, r9
 8006052:	4606      	mov	r6, r0
 8006054:	460f      	mov	r7, r1
 8006056:	f7fa fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 800605a:	b9d0      	cbnz	r0, 8006092 <_dtoa_r+0x6c2>
 800605c:	4642      	mov	r2, r8
 800605e:	464b      	mov	r3, r9
 8006060:	4630      	mov	r0, r6
 8006062:	4639      	mov	r1, r7
 8006064:	f7fa fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 8006068:	b110      	cbz	r0, 8006070 <_dtoa_r+0x6a0>
 800606a:	f01a 0f01 	tst.w	sl, #1
 800606e:	d110      	bne.n	8006092 <_dtoa_r+0x6c2>
 8006070:	4620      	mov	r0, r4
 8006072:	ee18 1a10 	vmov	r1, s16
 8006076:	f000 faf3 	bl	8006660 <_Bfree>
 800607a:	2300      	movs	r3, #0
 800607c:	9800      	ldr	r0, [sp, #0]
 800607e:	702b      	strb	r3, [r5, #0]
 8006080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006082:	3001      	adds	r0, #1
 8006084:	6018      	str	r0, [r3, #0]
 8006086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006088:	2b00      	cmp	r3, #0
 800608a:	f43f acf1 	beq.w	8005a70 <_dtoa_r+0xa0>
 800608e:	601d      	str	r5, [r3, #0]
 8006090:	e4ee      	b.n	8005a70 <_dtoa_r+0xa0>
 8006092:	9f00      	ldr	r7, [sp, #0]
 8006094:	462b      	mov	r3, r5
 8006096:	461d      	mov	r5, r3
 8006098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800609c:	2a39      	cmp	r2, #57	; 0x39
 800609e:	d106      	bne.n	80060ae <_dtoa_r+0x6de>
 80060a0:	9a01      	ldr	r2, [sp, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d1f7      	bne.n	8006096 <_dtoa_r+0x6c6>
 80060a6:	9901      	ldr	r1, [sp, #4]
 80060a8:	2230      	movs	r2, #48	; 0x30
 80060aa:	3701      	adds	r7, #1
 80060ac:	700a      	strb	r2, [r1, #0]
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	3201      	adds	r2, #1
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	e790      	b.n	8005fd8 <_dtoa_r+0x608>
 80060b6:	4ba6      	ldr	r3, [pc, #664]	; (8006350 <_dtoa_r+0x980>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	f7fa fa9d 	bl	80005f8 <__aeabi_dmul>
 80060be:	2200      	movs	r2, #0
 80060c0:	2300      	movs	r3, #0
 80060c2:	4606      	mov	r6, r0
 80060c4:	460f      	mov	r7, r1
 80060c6:	f7fa fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d09d      	beq.n	800600a <_dtoa_r+0x63a>
 80060ce:	e7cf      	b.n	8006070 <_dtoa_r+0x6a0>
 80060d0:	9a08      	ldr	r2, [sp, #32]
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	f000 80d7 	beq.w	8006286 <_dtoa_r+0x8b6>
 80060d8:	9a06      	ldr	r2, [sp, #24]
 80060da:	2a01      	cmp	r2, #1
 80060dc:	f300 80ba 	bgt.w	8006254 <_dtoa_r+0x884>
 80060e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060e2:	2a00      	cmp	r2, #0
 80060e4:	f000 80b2 	beq.w	800624c <_dtoa_r+0x87c>
 80060e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060ec:	9e07      	ldr	r6, [sp, #28]
 80060ee:	9d04      	ldr	r5, [sp, #16]
 80060f0:	9a04      	ldr	r2, [sp, #16]
 80060f2:	441a      	add	r2, r3
 80060f4:	9204      	str	r2, [sp, #16]
 80060f6:	9a05      	ldr	r2, [sp, #20]
 80060f8:	2101      	movs	r1, #1
 80060fa:	441a      	add	r2, r3
 80060fc:	4620      	mov	r0, r4
 80060fe:	9205      	str	r2, [sp, #20]
 8006100:	f000 fb66 	bl	80067d0 <__i2b>
 8006104:	4607      	mov	r7, r0
 8006106:	2d00      	cmp	r5, #0
 8006108:	dd0c      	ble.n	8006124 <_dtoa_r+0x754>
 800610a:	9b05      	ldr	r3, [sp, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	dd09      	ble.n	8006124 <_dtoa_r+0x754>
 8006110:	42ab      	cmp	r3, r5
 8006112:	9a04      	ldr	r2, [sp, #16]
 8006114:	bfa8      	it	ge
 8006116:	462b      	movge	r3, r5
 8006118:	1ad2      	subs	r2, r2, r3
 800611a:	9204      	str	r2, [sp, #16]
 800611c:	9a05      	ldr	r2, [sp, #20]
 800611e:	1aed      	subs	r5, r5, r3
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	9305      	str	r3, [sp, #20]
 8006124:	9b07      	ldr	r3, [sp, #28]
 8006126:	b31b      	cbz	r3, 8006170 <_dtoa_r+0x7a0>
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80af 	beq.w	800628e <_dtoa_r+0x8be>
 8006130:	2e00      	cmp	r6, #0
 8006132:	dd13      	ble.n	800615c <_dtoa_r+0x78c>
 8006134:	4639      	mov	r1, r7
 8006136:	4632      	mov	r2, r6
 8006138:	4620      	mov	r0, r4
 800613a:	f000 fc09 	bl	8006950 <__pow5mult>
 800613e:	ee18 2a10 	vmov	r2, s16
 8006142:	4601      	mov	r1, r0
 8006144:	4607      	mov	r7, r0
 8006146:	4620      	mov	r0, r4
 8006148:	f000 fb58 	bl	80067fc <__multiply>
 800614c:	ee18 1a10 	vmov	r1, s16
 8006150:	4680      	mov	r8, r0
 8006152:	4620      	mov	r0, r4
 8006154:	f000 fa84 	bl	8006660 <_Bfree>
 8006158:	ee08 8a10 	vmov	s16, r8
 800615c:	9b07      	ldr	r3, [sp, #28]
 800615e:	1b9a      	subs	r2, r3, r6
 8006160:	d006      	beq.n	8006170 <_dtoa_r+0x7a0>
 8006162:	ee18 1a10 	vmov	r1, s16
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fbf2 	bl	8006950 <__pow5mult>
 800616c:	ee08 0a10 	vmov	s16, r0
 8006170:	2101      	movs	r1, #1
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fb2c 	bl	80067d0 <__i2b>
 8006178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800617a:	2b00      	cmp	r3, #0
 800617c:	4606      	mov	r6, r0
 800617e:	f340 8088 	ble.w	8006292 <_dtoa_r+0x8c2>
 8006182:	461a      	mov	r2, r3
 8006184:	4601      	mov	r1, r0
 8006186:	4620      	mov	r0, r4
 8006188:	f000 fbe2 	bl	8006950 <__pow5mult>
 800618c:	9b06      	ldr	r3, [sp, #24]
 800618e:	2b01      	cmp	r3, #1
 8006190:	4606      	mov	r6, r0
 8006192:	f340 8081 	ble.w	8006298 <_dtoa_r+0x8c8>
 8006196:	f04f 0800 	mov.w	r8, #0
 800619a:	6933      	ldr	r3, [r6, #16]
 800619c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061a0:	6918      	ldr	r0, [r3, #16]
 80061a2:	f000 fac5 	bl	8006730 <__hi0bits>
 80061a6:	f1c0 0020 	rsb	r0, r0, #32
 80061aa:	9b05      	ldr	r3, [sp, #20]
 80061ac:	4418      	add	r0, r3
 80061ae:	f010 001f 	ands.w	r0, r0, #31
 80061b2:	f000 8092 	beq.w	80062da <_dtoa_r+0x90a>
 80061b6:	f1c0 0320 	rsb	r3, r0, #32
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	f340 808a 	ble.w	80062d4 <_dtoa_r+0x904>
 80061c0:	f1c0 001c 	rsb	r0, r0, #28
 80061c4:	9b04      	ldr	r3, [sp, #16]
 80061c6:	4403      	add	r3, r0
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	9b05      	ldr	r3, [sp, #20]
 80061cc:	4403      	add	r3, r0
 80061ce:	4405      	add	r5, r0
 80061d0:	9305      	str	r3, [sp, #20]
 80061d2:	9b04      	ldr	r3, [sp, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dd07      	ble.n	80061e8 <_dtoa_r+0x818>
 80061d8:	ee18 1a10 	vmov	r1, s16
 80061dc:	461a      	mov	r2, r3
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 fc10 	bl	8006a04 <__lshift>
 80061e4:	ee08 0a10 	vmov	s16, r0
 80061e8:	9b05      	ldr	r3, [sp, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dd05      	ble.n	80061fa <_dtoa_r+0x82a>
 80061ee:	4631      	mov	r1, r6
 80061f0:	461a      	mov	r2, r3
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 fc06 	bl	8006a04 <__lshift>
 80061f8:	4606      	mov	r6, r0
 80061fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d06e      	beq.n	80062de <_dtoa_r+0x90e>
 8006200:	ee18 0a10 	vmov	r0, s16
 8006204:	4631      	mov	r1, r6
 8006206:	f000 fc6d 	bl	8006ae4 <__mcmp>
 800620a:	2800      	cmp	r0, #0
 800620c:	da67      	bge.n	80062de <_dtoa_r+0x90e>
 800620e:	9b00      	ldr	r3, [sp, #0]
 8006210:	3b01      	subs	r3, #1
 8006212:	ee18 1a10 	vmov	r1, s16
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	220a      	movs	r2, #10
 800621a:	2300      	movs	r3, #0
 800621c:	4620      	mov	r0, r4
 800621e:	f000 fa41 	bl	80066a4 <__multadd>
 8006222:	9b08      	ldr	r3, [sp, #32]
 8006224:	ee08 0a10 	vmov	s16, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 81b1 	beq.w	8006590 <_dtoa_r+0xbc0>
 800622e:	2300      	movs	r3, #0
 8006230:	4639      	mov	r1, r7
 8006232:	220a      	movs	r2, #10
 8006234:	4620      	mov	r0, r4
 8006236:	f000 fa35 	bl	80066a4 <__multadd>
 800623a:	9b02      	ldr	r3, [sp, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	4607      	mov	r7, r0
 8006240:	f300 808e 	bgt.w	8006360 <_dtoa_r+0x990>
 8006244:	9b06      	ldr	r3, [sp, #24]
 8006246:	2b02      	cmp	r3, #2
 8006248:	dc51      	bgt.n	80062ee <_dtoa_r+0x91e>
 800624a:	e089      	b.n	8006360 <_dtoa_r+0x990>
 800624c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800624e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006252:	e74b      	b.n	80060ec <_dtoa_r+0x71c>
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	1e5e      	subs	r6, r3, #1
 8006258:	9b07      	ldr	r3, [sp, #28]
 800625a:	42b3      	cmp	r3, r6
 800625c:	bfbf      	itttt	lt
 800625e:	9b07      	ldrlt	r3, [sp, #28]
 8006260:	9607      	strlt	r6, [sp, #28]
 8006262:	1af2      	sublt	r2, r6, r3
 8006264:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006266:	bfb6      	itet	lt
 8006268:	189b      	addlt	r3, r3, r2
 800626a:	1b9e      	subge	r6, r3, r6
 800626c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	bfb8      	it	lt
 8006272:	2600      	movlt	r6, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	bfb7      	itett	lt
 8006278:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800627c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006280:	1a9d      	sublt	r5, r3, r2
 8006282:	2300      	movlt	r3, #0
 8006284:	e734      	b.n	80060f0 <_dtoa_r+0x720>
 8006286:	9e07      	ldr	r6, [sp, #28]
 8006288:	9d04      	ldr	r5, [sp, #16]
 800628a:	9f08      	ldr	r7, [sp, #32]
 800628c:	e73b      	b.n	8006106 <_dtoa_r+0x736>
 800628e:	9a07      	ldr	r2, [sp, #28]
 8006290:	e767      	b.n	8006162 <_dtoa_r+0x792>
 8006292:	9b06      	ldr	r3, [sp, #24]
 8006294:	2b01      	cmp	r3, #1
 8006296:	dc18      	bgt.n	80062ca <_dtoa_r+0x8fa>
 8006298:	f1ba 0f00 	cmp.w	sl, #0
 800629c:	d115      	bne.n	80062ca <_dtoa_r+0x8fa>
 800629e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062a2:	b993      	cbnz	r3, 80062ca <_dtoa_r+0x8fa>
 80062a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062a8:	0d1b      	lsrs	r3, r3, #20
 80062aa:	051b      	lsls	r3, r3, #20
 80062ac:	b183      	cbz	r3, 80062d0 <_dtoa_r+0x900>
 80062ae:	9b04      	ldr	r3, [sp, #16]
 80062b0:	3301      	adds	r3, #1
 80062b2:	9304      	str	r3, [sp, #16]
 80062b4:	9b05      	ldr	r3, [sp, #20]
 80062b6:	3301      	adds	r3, #1
 80062b8:	9305      	str	r3, [sp, #20]
 80062ba:	f04f 0801 	mov.w	r8, #1
 80062be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f47f af6a 	bne.w	800619a <_dtoa_r+0x7ca>
 80062c6:	2001      	movs	r0, #1
 80062c8:	e76f      	b.n	80061aa <_dtoa_r+0x7da>
 80062ca:	f04f 0800 	mov.w	r8, #0
 80062ce:	e7f6      	b.n	80062be <_dtoa_r+0x8ee>
 80062d0:	4698      	mov	r8, r3
 80062d2:	e7f4      	b.n	80062be <_dtoa_r+0x8ee>
 80062d4:	f43f af7d 	beq.w	80061d2 <_dtoa_r+0x802>
 80062d8:	4618      	mov	r0, r3
 80062da:	301c      	adds	r0, #28
 80062dc:	e772      	b.n	80061c4 <_dtoa_r+0x7f4>
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dc37      	bgt.n	8006354 <_dtoa_r+0x984>
 80062e4:	9b06      	ldr	r3, [sp, #24]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	dd34      	ble.n	8006354 <_dtoa_r+0x984>
 80062ea:	9b03      	ldr	r3, [sp, #12]
 80062ec:	9302      	str	r3, [sp, #8]
 80062ee:	9b02      	ldr	r3, [sp, #8]
 80062f0:	b96b      	cbnz	r3, 800630e <_dtoa_r+0x93e>
 80062f2:	4631      	mov	r1, r6
 80062f4:	2205      	movs	r2, #5
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 f9d4 	bl	80066a4 <__multadd>
 80062fc:	4601      	mov	r1, r0
 80062fe:	4606      	mov	r6, r0
 8006300:	ee18 0a10 	vmov	r0, s16
 8006304:	f000 fbee 	bl	8006ae4 <__mcmp>
 8006308:	2800      	cmp	r0, #0
 800630a:	f73f adbb 	bgt.w	8005e84 <_dtoa_r+0x4b4>
 800630e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006310:	9d01      	ldr	r5, [sp, #4]
 8006312:	43db      	mvns	r3, r3
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	f04f 0800 	mov.w	r8, #0
 800631a:	4631      	mov	r1, r6
 800631c:	4620      	mov	r0, r4
 800631e:	f000 f99f 	bl	8006660 <_Bfree>
 8006322:	2f00      	cmp	r7, #0
 8006324:	f43f aea4 	beq.w	8006070 <_dtoa_r+0x6a0>
 8006328:	f1b8 0f00 	cmp.w	r8, #0
 800632c:	d005      	beq.n	800633a <_dtoa_r+0x96a>
 800632e:	45b8      	cmp	r8, r7
 8006330:	d003      	beq.n	800633a <_dtoa_r+0x96a>
 8006332:	4641      	mov	r1, r8
 8006334:	4620      	mov	r0, r4
 8006336:	f000 f993 	bl	8006660 <_Bfree>
 800633a:	4639      	mov	r1, r7
 800633c:	4620      	mov	r0, r4
 800633e:	f000 f98f 	bl	8006660 <_Bfree>
 8006342:	e695      	b.n	8006070 <_dtoa_r+0x6a0>
 8006344:	2600      	movs	r6, #0
 8006346:	4637      	mov	r7, r6
 8006348:	e7e1      	b.n	800630e <_dtoa_r+0x93e>
 800634a:	9700      	str	r7, [sp, #0]
 800634c:	4637      	mov	r7, r6
 800634e:	e599      	b.n	8005e84 <_dtoa_r+0x4b4>
 8006350:	40240000 	.word	0x40240000
 8006354:	9b08      	ldr	r3, [sp, #32]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80ca 	beq.w	80064f0 <_dtoa_r+0xb20>
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	9302      	str	r3, [sp, #8]
 8006360:	2d00      	cmp	r5, #0
 8006362:	dd05      	ble.n	8006370 <_dtoa_r+0x9a0>
 8006364:	4639      	mov	r1, r7
 8006366:	462a      	mov	r2, r5
 8006368:	4620      	mov	r0, r4
 800636a:	f000 fb4b 	bl	8006a04 <__lshift>
 800636e:	4607      	mov	r7, r0
 8006370:	f1b8 0f00 	cmp.w	r8, #0
 8006374:	d05b      	beq.n	800642e <_dtoa_r+0xa5e>
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	4620      	mov	r0, r4
 800637a:	f000 f931 	bl	80065e0 <_Balloc>
 800637e:	4605      	mov	r5, r0
 8006380:	b928      	cbnz	r0, 800638e <_dtoa_r+0x9be>
 8006382:	4b87      	ldr	r3, [pc, #540]	; (80065a0 <_dtoa_r+0xbd0>)
 8006384:	4602      	mov	r2, r0
 8006386:	f240 21ea 	movw	r1, #746	; 0x2ea
 800638a:	f7ff bb3b 	b.w	8005a04 <_dtoa_r+0x34>
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	3202      	adds	r2, #2
 8006392:	0092      	lsls	r2, r2, #2
 8006394:	f107 010c 	add.w	r1, r7, #12
 8006398:	300c      	adds	r0, #12
 800639a:	f000 f913 	bl	80065c4 <memcpy>
 800639e:	2201      	movs	r2, #1
 80063a0:	4629      	mov	r1, r5
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 fb2e 	bl	8006a04 <__lshift>
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	f103 0901 	add.w	r9, r3, #1
 80063ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80063b2:	4413      	add	r3, r2
 80063b4:	9305      	str	r3, [sp, #20]
 80063b6:	f00a 0301 	and.w	r3, sl, #1
 80063ba:	46b8      	mov	r8, r7
 80063bc:	9304      	str	r3, [sp, #16]
 80063be:	4607      	mov	r7, r0
 80063c0:	4631      	mov	r1, r6
 80063c2:	ee18 0a10 	vmov	r0, s16
 80063c6:	f7ff fa75 	bl	80058b4 <quorem>
 80063ca:	4641      	mov	r1, r8
 80063cc:	9002      	str	r0, [sp, #8]
 80063ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80063d2:	ee18 0a10 	vmov	r0, s16
 80063d6:	f000 fb85 	bl	8006ae4 <__mcmp>
 80063da:	463a      	mov	r2, r7
 80063dc:	9003      	str	r0, [sp, #12]
 80063de:	4631      	mov	r1, r6
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fb9b 	bl	8006b1c <__mdiff>
 80063e6:	68c2      	ldr	r2, [r0, #12]
 80063e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80063ec:	4605      	mov	r5, r0
 80063ee:	bb02      	cbnz	r2, 8006432 <_dtoa_r+0xa62>
 80063f0:	4601      	mov	r1, r0
 80063f2:	ee18 0a10 	vmov	r0, s16
 80063f6:	f000 fb75 	bl	8006ae4 <__mcmp>
 80063fa:	4602      	mov	r2, r0
 80063fc:	4629      	mov	r1, r5
 80063fe:	4620      	mov	r0, r4
 8006400:	9207      	str	r2, [sp, #28]
 8006402:	f000 f92d 	bl	8006660 <_Bfree>
 8006406:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800640a:	ea43 0102 	orr.w	r1, r3, r2
 800640e:	9b04      	ldr	r3, [sp, #16]
 8006410:	430b      	orrs	r3, r1
 8006412:	464d      	mov	r5, r9
 8006414:	d10f      	bne.n	8006436 <_dtoa_r+0xa66>
 8006416:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800641a:	d02a      	beq.n	8006472 <_dtoa_r+0xaa2>
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	dd02      	ble.n	8006428 <_dtoa_r+0xa58>
 8006422:	9b02      	ldr	r3, [sp, #8]
 8006424:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006428:	f88b a000 	strb.w	sl, [fp]
 800642c:	e775      	b.n	800631a <_dtoa_r+0x94a>
 800642e:	4638      	mov	r0, r7
 8006430:	e7ba      	b.n	80063a8 <_dtoa_r+0x9d8>
 8006432:	2201      	movs	r2, #1
 8006434:	e7e2      	b.n	80063fc <_dtoa_r+0xa2c>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	db04      	blt.n	8006446 <_dtoa_r+0xa76>
 800643c:	9906      	ldr	r1, [sp, #24]
 800643e:	430b      	orrs	r3, r1
 8006440:	9904      	ldr	r1, [sp, #16]
 8006442:	430b      	orrs	r3, r1
 8006444:	d122      	bne.n	800648c <_dtoa_r+0xabc>
 8006446:	2a00      	cmp	r2, #0
 8006448:	ddee      	ble.n	8006428 <_dtoa_r+0xa58>
 800644a:	ee18 1a10 	vmov	r1, s16
 800644e:	2201      	movs	r2, #1
 8006450:	4620      	mov	r0, r4
 8006452:	f000 fad7 	bl	8006a04 <__lshift>
 8006456:	4631      	mov	r1, r6
 8006458:	ee08 0a10 	vmov	s16, r0
 800645c:	f000 fb42 	bl	8006ae4 <__mcmp>
 8006460:	2800      	cmp	r0, #0
 8006462:	dc03      	bgt.n	800646c <_dtoa_r+0xa9c>
 8006464:	d1e0      	bne.n	8006428 <_dtoa_r+0xa58>
 8006466:	f01a 0f01 	tst.w	sl, #1
 800646a:	d0dd      	beq.n	8006428 <_dtoa_r+0xa58>
 800646c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006470:	d1d7      	bne.n	8006422 <_dtoa_r+0xa52>
 8006472:	2339      	movs	r3, #57	; 0x39
 8006474:	f88b 3000 	strb.w	r3, [fp]
 8006478:	462b      	mov	r3, r5
 800647a:	461d      	mov	r5, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006482:	2a39      	cmp	r2, #57	; 0x39
 8006484:	d071      	beq.n	800656a <_dtoa_r+0xb9a>
 8006486:	3201      	adds	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e746      	b.n	800631a <_dtoa_r+0x94a>
 800648c:	2a00      	cmp	r2, #0
 800648e:	dd07      	ble.n	80064a0 <_dtoa_r+0xad0>
 8006490:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006494:	d0ed      	beq.n	8006472 <_dtoa_r+0xaa2>
 8006496:	f10a 0301 	add.w	r3, sl, #1
 800649a:	f88b 3000 	strb.w	r3, [fp]
 800649e:	e73c      	b.n	800631a <_dtoa_r+0x94a>
 80064a0:	9b05      	ldr	r3, [sp, #20]
 80064a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80064a6:	4599      	cmp	r9, r3
 80064a8:	d047      	beq.n	800653a <_dtoa_r+0xb6a>
 80064aa:	ee18 1a10 	vmov	r1, s16
 80064ae:	2300      	movs	r3, #0
 80064b0:	220a      	movs	r2, #10
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 f8f6 	bl	80066a4 <__multadd>
 80064b8:	45b8      	cmp	r8, r7
 80064ba:	ee08 0a10 	vmov	s16, r0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	f04f 020a 	mov.w	r2, #10
 80064c6:	4641      	mov	r1, r8
 80064c8:	4620      	mov	r0, r4
 80064ca:	d106      	bne.n	80064da <_dtoa_r+0xb0a>
 80064cc:	f000 f8ea 	bl	80066a4 <__multadd>
 80064d0:	4680      	mov	r8, r0
 80064d2:	4607      	mov	r7, r0
 80064d4:	f109 0901 	add.w	r9, r9, #1
 80064d8:	e772      	b.n	80063c0 <_dtoa_r+0x9f0>
 80064da:	f000 f8e3 	bl	80066a4 <__multadd>
 80064de:	4639      	mov	r1, r7
 80064e0:	4680      	mov	r8, r0
 80064e2:	2300      	movs	r3, #0
 80064e4:	220a      	movs	r2, #10
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 f8dc 	bl	80066a4 <__multadd>
 80064ec:	4607      	mov	r7, r0
 80064ee:	e7f1      	b.n	80064d4 <_dtoa_r+0xb04>
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	9302      	str	r3, [sp, #8]
 80064f4:	9d01      	ldr	r5, [sp, #4]
 80064f6:	ee18 0a10 	vmov	r0, s16
 80064fa:	4631      	mov	r1, r6
 80064fc:	f7ff f9da 	bl	80058b4 <quorem>
 8006500:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	f805 ab01 	strb.w	sl, [r5], #1
 800650a:	1aea      	subs	r2, r5, r3
 800650c:	9b02      	ldr	r3, [sp, #8]
 800650e:	4293      	cmp	r3, r2
 8006510:	dd09      	ble.n	8006526 <_dtoa_r+0xb56>
 8006512:	ee18 1a10 	vmov	r1, s16
 8006516:	2300      	movs	r3, #0
 8006518:	220a      	movs	r2, #10
 800651a:	4620      	mov	r0, r4
 800651c:	f000 f8c2 	bl	80066a4 <__multadd>
 8006520:	ee08 0a10 	vmov	s16, r0
 8006524:	e7e7      	b.n	80064f6 <_dtoa_r+0xb26>
 8006526:	9b02      	ldr	r3, [sp, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	bfc8      	it	gt
 800652c:	461d      	movgt	r5, r3
 800652e:	9b01      	ldr	r3, [sp, #4]
 8006530:	bfd8      	it	le
 8006532:	2501      	movle	r5, #1
 8006534:	441d      	add	r5, r3
 8006536:	f04f 0800 	mov.w	r8, #0
 800653a:	ee18 1a10 	vmov	r1, s16
 800653e:	2201      	movs	r2, #1
 8006540:	4620      	mov	r0, r4
 8006542:	f000 fa5f 	bl	8006a04 <__lshift>
 8006546:	4631      	mov	r1, r6
 8006548:	ee08 0a10 	vmov	s16, r0
 800654c:	f000 faca 	bl	8006ae4 <__mcmp>
 8006550:	2800      	cmp	r0, #0
 8006552:	dc91      	bgt.n	8006478 <_dtoa_r+0xaa8>
 8006554:	d102      	bne.n	800655c <_dtoa_r+0xb8c>
 8006556:	f01a 0f01 	tst.w	sl, #1
 800655a:	d18d      	bne.n	8006478 <_dtoa_r+0xaa8>
 800655c:	462b      	mov	r3, r5
 800655e:	461d      	mov	r5, r3
 8006560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006564:	2a30      	cmp	r2, #48	; 0x30
 8006566:	d0fa      	beq.n	800655e <_dtoa_r+0xb8e>
 8006568:	e6d7      	b.n	800631a <_dtoa_r+0x94a>
 800656a:	9a01      	ldr	r2, [sp, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	d184      	bne.n	800647a <_dtoa_r+0xaaa>
 8006570:	9b00      	ldr	r3, [sp, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	2331      	movs	r3, #49	; 0x31
 8006578:	7013      	strb	r3, [r2, #0]
 800657a:	e6ce      	b.n	800631a <_dtoa_r+0x94a>
 800657c:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <_dtoa_r+0xbd4>)
 800657e:	f7ff ba95 	b.w	8005aac <_dtoa_r+0xdc>
 8006582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006584:	2b00      	cmp	r3, #0
 8006586:	f47f aa6e 	bne.w	8005a66 <_dtoa_r+0x96>
 800658a:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <_dtoa_r+0xbd8>)
 800658c:	f7ff ba8e 	b.w	8005aac <_dtoa_r+0xdc>
 8006590:	9b02      	ldr	r3, [sp, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	dcae      	bgt.n	80064f4 <_dtoa_r+0xb24>
 8006596:	9b06      	ldr	r3, [sp, #24]
 8006598:	2b02      	cmp	r3, #2
 800659a:	f73f aea8 	bgt.w	80062ee <_dtoa_r+0x91e>
 800659e:	e7a9      	b.n	80064f4 <_dtoa_r+0xb24>
 80065a0:	08007e8f 	.word	0x08007e8f
 80065a4:	08007dec 	.word	0x08007dec
 80065a8:	08007e10 	.word	0x08007e10

080065ac <_localeconv_r>:
 80065ac:	4800      	ldr	r0, [pc, #0]	; (80065b0 <_localeconv_r+0x4>)
 80065ae:	4770      	bx	lr
 80065b0:	20000160 	.word	0x20000160

080065b4 <malloc>:
 80065b4:	4b02      	ldr	r3, [pc, #8]	; (80065c0 <malloc+0xc>)
 80065b6:	4601      	mov	r1, r0
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	f000 bc17 	b.w	8006dec <_malloc_r>
 80065be:	bf00      	nop
 80065c0:	2000000c 	.word	0x2000000c

080065c4 <memcpy>:
 80065c4:	440a      	add	r2, r1
 80065c6:	4291      	cmp	r1, r2
 80065c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065cc:	d100      	bne.n	80065d0 <memcpy+0xc>
 80065ce:	4770      	bx	lr
 80065d0:	b510      	push	{r4, lr}
 80065d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065da:	4291      	cmp	r1, r2
 80065dc:	d1f9      	bne.n	80065d2 <memcpy+0xe>
 80065de:	bd10      	pop	{r4, pc}

080065e0 <_Balloc>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065e4:	4604      	mov	r4, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	b976      	cbnz	r6, 8006608 <_Balloc+0x28>
 80065ea:	2010      	movs	r0, #16
 80065ec:	f7ff ffe2 	bl	80065b4 <malloc>
 80065f0:	4602      	mov	r2, r0
 80065f2:	6260      	str	r0, [r4, #36]	; 0x24
 80065f4:	b920      	cbnz	r0, 8006600 <_Balloc+0x20>
 80065f6:	4b18      	ldr	r3, [pc, #96]	; (8006658 <_Balloc+0x78>)
 80065f8:	4818      	ldr	r0, [pc, #96]	; (800665c <_Balloc+0x7c>)
 80065fa:	2166      	movs	r1, #102	; 0x66
 80065fc:	f000 fdd6 	bl	80071ac <__assert_func>
 8006600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006604:	6006      	str	r6, [r0, #0]
 8006606:	60c6      	str	r6, [r0, #12]
 8006608:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800660a:	68f3      	ldr	r3, [r6, #12]
 800660c:	b183      	cbz	r3, 8006630 <_Balloc+0x50>
 800660e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006616:	b9b8      	cbnz	r0, 8006648 <_Balloc+0x68>
 8006618:	2101      	movs	r1, #1
 800661a:	fa01 f605 	lsl.w	r6, r1, r5
 800661e:	1d72      	adds	r2, r6, #5
 8006620:	0092      	lsls	r2, r2, #2
 8006622:	4620      	mov	r0, r4
 8006624:	f000 fb60 	bl	8006ce8 <_calloc_r>
 8006628:	b160      	cbz	r0, 8006644 <_Balloc+0x64>
 800662a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800662e:	e00e      	b.n	800664e <_Balloc+0x6e>
 8006630:	2221      	movs	r2, #33	; 0x21
 8006632:	2104      	movs	r1, #4
 8006634:	4620      	mov	r0, r4
 8006636:	f000 fb57 	bl	8006ce8 <_calloc_r>
 800663a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800663c:	60f0      	str	r0, [r6, #12]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e4      	bne.n	800660e <_Balloc+0x2e>
 8006644:	2000      	movs	r0, #0
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	6802      	ldr	r2, [r0, #0]
 800664a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800664e:	2300      	movs	r3, #0
 8006650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006654:	e7f7      	b.n	8006646 <_Balloc+0x66>
 8006656:	bf00      	nop
 8006658:	08007e1d 	.word	0x08007e1d
 800665c:	08007ea0 	.word	0x08007ea0

08006660 <_Bfree>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006664:	4605      	mov	r5, r0
 8006666:	460c      	mov	r4, r1
 8006668:	b976      	cbnz	r6, 8006688 <_Bfree+0x28>
 800666a:	2010      	movs	r0, #16
 800666c:	f7ff ffa2 	bl	80065b4 <malloc>
 8006670:	4602      	mov	r2, r0
 8006672:	6268      	str	r0, [r5, #36]	; 0x24
 8006674:	b920      	cbnz	r0, 8006680 <_Bfree+0x20>
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <_Bfree+0x3c>)
 8006678:	4809      	ldr	r0, [pc, #36]	; (80066a0 <_Bfree+0x40>)
 800667a:	218a      	movs	r1, #138	; 0x8a
 800667c:	f000 fd96 	bl	80071ac <__assert_func>
 8006680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006684:	6006      	str	r6, [r0, #0]
 8006686:	60c6      	str	r6, [r0, #12]
 8006688:	b13c      	cbz	r4, 800669a <_Bfree+0x3a>
 800668a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800668c:	6862      	ldr	r2, [r4, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006694:	6021      	str	r1, [r4, #0]
 8006696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	08007e1d 	.word	0x08007e1d
 80066a0:	08007ea0 	.word	0x08007ea0

080066a4 <__multadd>:
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	690d      	ldr	r5, [r1, #16]
 80066aa:	4607      	mov	r7, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	461e      	mov	r6, r3
 80066b0:	f101 0c14 	add.w	ip, r1, #20
 80066b4:	2000      	movs	r0, #0
 80066b6:	f8dc 3000 	ldr.w	r3, [ip]
 80066ba:	b299      	uxth	r1, r3
 80066bc:	fb02 6101 	mla	r1, r2, r1, r6
 80066c0:	0c1e      	lsrs	r6, r3, #16
 80066c2:	0c0b      	lsrs	r3, r1, #16
 80066c4:	fb02 3306 	mla	r3, r2, r6, r3
 80066c8:	b289      	uxth	r1, r1
 80066ca:	3001      	adds	r0, #1
 80066cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066d0:	4285      	cmp	r5, r0
 80066d2:	f84c 1b04 	str.w	r1, [ip], #4
 80066d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066da:	dcec      	bgt.n	80066b6 <__multadd+0x12>
 80066dc:	b30e      	cbz	r6, 8006722 <__multadd+0x7e>
 80066de:	68a3      	ldr	r3, [r4, #8]
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	dc19      	bgt.n	8006718 <__multadd+0x74>
 80066e4:	6861      	ldr	r1, [r4, #4]
 80066e6:	4638      	mov	r0, r7
 80066e8:	3101      	adds	r1, #1
 80066ea:	f7ff ff79 	bl	80065e0 <_Balloc>
 80066ee:	4680      	mov	r8, r0
 80066f0:	b928      	cbnz	r0, 80066fe <__multadd+0x5a>
 80066f2:	4602      	mov	r2, r0
 80066f4:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <__multadd+0x84>)
 80066f6:	480d      	ldr	r0, [pc, #52]	; (800672c <__multadd+0x88>)
 80066f8:	21b5      	movs	r1, #181	; 0xb5
 80066fa:	f000 fd57 	bl	80071ac <__assert_func>
 80066fe:	6922      	ldr	r2, [r4, #16]
 8006700:	3202      	adds	r2, #2
 8006702:	f104 010c 	add.w	r1, r4, #12
 8006706:	0092      	lsls	r2, r2, #2
 8006708:	300c      	adds	r0, #12
 800670a:	f7ff ff5b 	bl	80065c4 <memcpy>
 800670e:	4621      	mov	r1, r4
 8006710:	4638      	mov	r0, r7
 8006712:	f7ff ffa5 	bl	8006660 <_Bfree>
 8006716:	4644      	mov	r4, r8
 8006718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800671c:	3501      	adds	r5, #1
 800671e:	615e      	str	r6, [r3, #20]
 8006720:	6125      	str	r5, [r4, #16]
 8006722:	4620      	mov	r0, r4
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006728:	08007e8f 	.word	0x08007e8f
 800672c:	08007ea0 	.word	0x08007ea0

08006730 <__hi0bits>:
 8006730:	0c03      	lsrs	r3, r0, #16
 8006732:	041b      	lsls	r3, r3, #16
 8006734:	b9d3      	cbnz	r3, 800676c <__hi0bits+0x3c>
 8006736:	0400      	lsls	r0, r0, #16
 8006738:	2310      	movs	r3, #16
 800673a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800673e:	bf04      	itt	eq
 8006740:	0200      	lsleq	r0, r0, #8
 8006742:	3308      	addeq	r3, #8
 8006744:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006748:	bf04      	itt	eq
 800674a:	0100      	lsleq	r0, r0, #4
 800674c:	3304      	addeq	r3, #4
 800674e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006752:	bf04      	itt	eq
 8006754:	0080      	lsleq	r0, r0, #2
 8006756:	3302      	addeq	r3, #2
 8006758:	2800      	cmp	r0, #0
 800675a:	db05      	blt.n	8006768 <__hi0bits+0x38>
 800675c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006760:	f103 0301 	add.w	r3, r3, #1
 8006764:	bf08      	it	eq
 8006766:	2320      	moveq	r3, #32
 8006768:	4618      	mov	r0, r3
 800676a:	4770      	bx	lr
 800676c:	2300      	movs	r3, #0
 800676e:	e7e4      	b.n	800673a <__hi0bits+0xa>

08006770 <__lo0bits>:
 8006770:	6803      	ldr	r3, [r0, #0]
 8006772:	f013 0207 	ands.w	r2, r3, #7
 8006776:	4601      	mov	r1, r0
 8006778:	d00b      	beq.n	8006792 <__lo0bits+0x22>
 800677a:	07da      	lsls	r2, r3, #31
 800677c:	d423      	bmi.n	80067c6 <__lo0bits+0x56>
 800677e:	0798      	lsls	r0, r3, #30
 8006780:	bf49      	itett	mi
 8006782:	085b      	lsrmi	r3, r3, #1
 8006784:	089b      	lsrpl	r3, r3, #2
 8006786:	2001      	movmi	r0, #1
 8006788:	600b      	strmi	r3, [r1, #0]
 800678a:	bf5c      	itt	pl
 800678c:	600b      	strpl	r3, [r1, #0]
 800678e:	2002      	movpl	r0, #2
 8006790:	4770      	bx	lr
 8006792:	b298      	uxth	r0, r3
 8006794:	b9a8      	cbnz	r0, 80067c2 <__lo0bits+0x52>
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	2010      	movs	r0, #16
 800679a:	b2da      	uxtb	r2, r3
 800679c:	b90a      	cbnz	r2, 80067a2 <__lo0bits+0x32>
 800679e:	3008      	adds	r0, #8
 80067a0:	0a1b      	lsrs	r3, r3, #8
 80067a2:	071a      	lsls	r2, r3, #28
 80067a4:	bf04      	itt	eq
 80067a6:	091b      	lsreq	r3, r3, #4
 80067a8:	3004      	addeq	r0, #4
 80067aa:	079a      	lsls	r2, r3, #30
 80067ac:	bf04      	itt	eq
 80067ae:	089b      	lsreq	r3, r3, #2
 80067b0:	3002      	addeq	r0, #2
 80067b2:	07da      	lsls	r2, r3, #31
 80067b4:	d403      	bmi.n	80067be <__lo0bits+0x4e>
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	f100 0001 	add.w	r0, r0, #1
 80067bc:	d005      	beq.n	80067ca <__lo0bits+0x5a>
 80067be:	600b      	str	r3, [r1, #0]
 80067c0:	4770      	bx	lr
 80067c2:	4610      	mov	r0, r2
 80067c4:	e7e9      	b.n	800679a <__lo0bits+0x2a>
 80067c6:	2000      	movs	r0, #0
 80067c8:	4770      	bx	lr
 80067ca:	2020      	movs	r0, #32
 80067cc:	4770      	bx	lr
	...

080067d0 <__i2b>:
 80067d0:	b510      	push	{r4, lr}
 80067d2:	460c      	mov	r4, r1
 80067d4:	2101      	movs	r1, #1
 80067d6:	f7ff ff03 	bl	80065e0 <_Balloc>
 80067da:	4602      	mov	r2, r0
 80067dc:	b928      	cbnz	r0, 80067ea <__i2b+0x1a>
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <__i2b+0x24>)
 80067e0:	4805      	ldr	r0, [pc, #20]	; (80067f8 <__i2b+0x28>)
 80067e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067e6:	f000 fce1 	bl	80071ac <__assert_func>
 80067ea:	2301      	movs	r3, #1
 80067ec:	6144      	str	r4, [r0, #20]
 80067ee:	6103      	str	r3, [r0, #16]
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	bf00      	nop
 80067f4:	08007e8f 	.word	0x08007e8f
 80067f8:	08007ea0 	.word	0x08007ea0

080067fc <__multiply>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	4691      	mov	r9, r2
 8006802:	690a      	ldr	r2, [r1, #16]
 8006804:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006808:	429a      	cmp	r2, r3
 800680a:	bfb8      	it	lt
 800680c:	460b      	movlt	r3, r1
 800680e:	460c      	mov	r4, r1
 8006810:	bfbc      	itt	lt
 8006812:	464c      	movlt	r4, r9
 8006814:	4699      	movlt	r9, r3
 8006816:	6927      	ldr	r7, [r4, #16]
 8006818:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800681c:	68a3      	ldr	r3, [r4, #8]
 800681e:	6861      	ldr	r1, [r4, #4]
 8006820:	eb07 060a 	add.w	r6, r7, sl
 8006824:	42b3      	cmp	r3, r6
 8006826:	b085      	sub	sp, #20
 8006828:	bfb8      	it	lt
 800682a:	3101      	addlt	r1, #1
 800682c:	f7ff fed8 	bl	80065e0 <_Balloc>
 8006830:	b930      	cbnz	r0, 8006840 <__multiply+0x44>
 8006832:	4602      	mov	r2, r0
 8006834:	4b44      	ldr	r3, [pc, #272]	; (8006948 <__multiply+0x14c>)
 8006836:	4845      	ldr	r0, [pc, #276]	; (800694c <__multiply+0x150>)
 8006838:	f240 115d 	movw	r1, #349	; 0x15d
 800683c:	f000 fcb6 	bl	80071ac <__assert_func>
 8006840:	f100 0514 	add.w	r5, r0, #20
 8006844:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006848:	462b      	mov	r3, r5
 800684a:	2200      	movs	r2, #0
 800684c:	4543      	cmp	r3, r8
 800684e:	d321      	bcc.n	8006894 <__multiply+0x98>
 8006850:	f104 0314 	add.w	r3, r4, #20
 8006854:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006858:	f109 0314 	add.w	r3, r9, #20
 800685c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006860:	9202      	str	r2, [sp, #8]
 8006862:	1b3a      	subs	r2, r7, r4
 8006864:	3a15      	subs	r2, #21
 8006866:	f022 0203 	bic.w	r2, r2, #3
 800686a:	3204      	adds	r2, #4
 800686c:	f104 0115 	add.w	r1, r4, #21
 8006870:	428f      	cmp	r7, r1
 8006872:	bf38      	it	cc
 8006874:	2204      	movcc	r2, #4
 8006876:	9201      	str	r2, [sp, #4]
 8006878:	9a02      	ldr	r2, [sp, #8]
 800687a:	9303      	str	r3, [sp, #12]
 800687c:	429a      	cmp	r2, r3
 800687e:	d80c      	bhi.n	800689a <__multiply+0x9e>
 8006880:	2e00      	cmp	r6, #0
 8006882:	dd03      	ble.n	800688c <__multiply+0x90>
 8006884:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006888:	2b00      	cmp	r3, #0
 800688a:	d05a      	beq.n	8006942 <__multiply+0x146>
 800688c:	6106      	str	r6, [r0, #16]
 800688e:	b005      	add	sp, #20
 8006890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006894:	f843 2b04 	str.w	r2, [r3], #4
 8006898:	e7d8      	b.n	800684c <__multiply+0x50>
 800689a:	f8b3 a000 	ldrh.w	sl, [r3]
 800689e:	f1ba 0f00 	cmp.w	sl, #0
 80068a2:	d024      	beq.n	80068ee <__multiply+0xf2>
 80068a4:	f104 0e14 	add.w	lr, r4, #20
 80068a8:	46a9      	mov	r9, r5
 80068aa:	f04f 0c00 	mov.w	ip, #0
 80068ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068b2:	f8d9 1000 	ldr.w	r1, [r9]
 80068b6:	fa1f fb82 	uxth.w	fp, r2
 80068ba:	b289      	uxth	r1, r1
 80068bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80068c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80068c4:	f8d9 2000 	ldr.w	r2, [r9]
 80068c8:	4461      	add	r1, ip
 80068ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80068d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068d6:	b289      	uxth	r1, r1
 80068d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068dc:	4577      	cmp	r7, lr
 80068de:	f849 1b04 	str.w	r1, [r9], #4
 80068e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068e6:	d8e2      	bhi.n	80068ae <__multiply+0xb2>
 80068e8:	9a01      	ldr	r2, [sp, #4]
 80068ea:	f845 c002 	str.w	ip, [r5, r2]
 80068ee:	9a03      	ldr	r2, [sp, #12]
 80068f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068f4:	3304      	adds	r3, #4
 80068f6:	f1b9 0f00 	cmp.w	r9, #0
 80068fa:	d020      	beq.n	800693e <__multiply+0x142>
 80068fc:	6829      	ldr	r1, [r5, #0]
 80068fe:	f104 0c14 	add.w	ip, r4, #20
 8006902:	46ae      	mov	lr, r5
 8006904:	f04f 0a00 	mov.w	sl, #0
 8006908:	f8bc b000 	ldrh.w	fp, [ip]
 800690c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006910:	fb09 220b 	mla	r2, r9, fp, r2
 8006914:	4492      	add	sl, r2
 8006916:	b289      	uxth	r1, r1
 8006918:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800691c:	f84e 1b04 	str.w	r1, [lr], #4
 8006920:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006924:	f8be 1000 	ldrh.w	r1, [lr]
 8006928:	0c12      	lsrs	r2, r2, #16
 800692a:	fb09 1102 	mla	r1, r9, r2, r1
 800692e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006932:	4567      	cmp	r7, ip
 8006934:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006938:	d8e6      	bhi.n	8006908 <__multiply+0x10c>
 800693a:	9a01      	ldr	r2, [sp, #4]
 800693c:	50a9      	str	r1, [r5, r2]
 800693e:	3504      	adds	r5, #4
 8006940:	e79a      	b.n	8006878 <__multiply+0x7c>
 8006942:	3e01      	subs	r6, #1
 8006944:	e79c      	b.n	8006880 <__multiply+0x84>
 8006946:	bf00      	nop
 8006948:	08007e8f 	.word	0x08007e8f
 800694c:	08007ea0 	.word	0x08007ea0

08006950 <__pow5mult>:
 8006950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006954:	4615      	mov	r5, r2
 8006956:	f012 0203 	ands.w	r2, r2, #3
 800695a:	4606      	mov	r6, r0
 800695c:	460f      	mov	r7, r1
 800695e:	d007      	beq.n	8006970 <__pow5mult+0x20>
 8006960:	4c25      	ldr	r4, [pc, #148]	; (80069f8 <__pow5mult+0xa8>)
 8006962:	3a01      	subs	r2, #1
 8006964:	2300      	movs	r3, #0
 8006966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800696a:	f7ff fe9b 	bl	80066a4 <__multadd>
 800696e:	4607      	mov	r7, r0
 8006970:	10ad      	asrs	r5, r5, #2
 8006972:	d03d      	beq.n	80069f0 <__pow5mult+0xa0>
 8006974:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006976:	b97c      	cbnz	r4, 8006998 <__pow5mult+0x48>
 8006978:	2010      	movs	r0, #16
 800697a:	f7ff fe1b 	bl	80065b4 <malloc>
 800697e:	4602      	mov	r2, r0
 8006980:	6270      	str	r0, [r6, #36]	; 0x24
 8006982:	b928      	cbnz	r0, 8006990 <__pow5mult+0x40>
 8006984:	4b1d      	ldr	r3, [pc, #116]	; (80069fc <__pow5mult+0xac>)
 8006986:	481e      	ldr	r0, [pc, #120]	; (8006a00 <__pow5mult+0xb0>)
 8006988:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800698c:	f000 fc0e 	bl	80071ac <__assert_func>
 8006990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006994:	6004      	str	r4, [r0, #0]
 8006996:	60c4      	str	r4, [r0, #12]
 8006998:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800699c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069a0:	b94c      	cbnz	r4, 80069b6 <__pow5mult+0x66>
 80069a2:	f240 2171 	movw	r1, #625	; 0x271
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff ff12 	bl	80067d0 <__i2b>
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80069b2:	4604      	mov	r4, r0
 80069b4:	6003      	str	r3, [r0, #0]
 80069b6:	f04f 0900 	mov.w	r9, #0
 80069ba:	07eb      	lsls	r3, r5, #31
 80069bc:	d50a      	bpl.n	80069d4 <__pow5mult+0x84>
 80069be:	4639      	mov	r1, r7
 80069c0:	4622      	mov	r2, r4
 80069c2:	4630      	mov	r0, r6
 80069c4:	f7ff ff1a 	bl	80067fc <__multiply>
 80069c8:	4639      	mov	r1, r7
 80069ca:	4680      	mov	r8, r0
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7ff fe47 	bl	8006660 <_Bfree>
 80069d2:	4647      	mov	r7, r8
 80069d4:	106d      	asrs	r5, r5, #1
 80069d6:	d00b      	beq.n	80069f0 <__pow5mult+0xa0>
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	b938      	cbnz	r0, 80069ec <__pow5mult+0x9c>
 80069dc:	4622      	mov	r2, r4
 80069de:	4621      	mov	r1, r4
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7ff ff0b 	bl	80067fc <__multiply>
 80069e6:	6020      	str	r0, [r4, #0]
 80069e8:	f8c0 9000 	str.w	r9, [r0]
 80069ec:	4604      	mov	r4, r0
 80069ee:	e7e4      	b.n	80069ba <__pow5mult+0x6a>
 80069f0:	4638      	mov	r0, r7
 80069f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f6:	bf00      	nop
 80069f8:	08007ff0 	.word	0x08007ff0
 80069fc:	08007e1d 	.word	0x08007e1d
 8006a00:	08007ea0 	.word	0x08007ea0

08006a04 <__lshift>:
 8006a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a08:	460c      	mov	r4, r1
 8006a0a:	6849      	ldr	r1, [r1, #4]
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	4607      	mov	r7, r0
 8006a16:	4691      	mov	r9, r2
 8006a18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a1c:	f108 0601 	add.w	r6, r8, #1
 8006a20:	42b3      	cmp	r3, r6
 8006a22:	db0b      	blt.n	8006a3c <__lshift+0x38>
 8006a24:	4638      	mov	r0, r7
 8006a26:	f7ff fddb 	bl	80065e0 <_Balloc>
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	b948      	cbnz	r0, 8006a42 <__lshift+0x3e>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	4b2a      	ldr	r3, [pc, #168]	; (8006adc <__lshift+0xd8>)
 8006a32:	482b      	ldr	r0, [pc, #172]	; (8006ae0 <__lshift+0xdc>)
 8006a34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a38:	f000 fbb8 	bl	80071ac <__assert_func>
 8006a3c:	3101      	adds	r1, #1
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	e7ee      	b.n	8006a20 <__lshift+0x1c>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f100 0114 	add.w	r1, r0, #20
 8006a48:	f100 0210 	add.w	r2, r0, #16
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	4553      	cmp	r3, sl
 8006a50:	db37      	blt.n	8006ac2 <__lshift+0xbe>
 8006a52:	6920      	ldr	r0, [r4, #16]
 8006a54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a58:	f104 0314 	add.w	r3, r4, #20
 8006a5c:	f019 091f 	ands.w	r9, r9, #31
 8006a60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a68:	d02f      	beq.n	8006aca <__lshift+0xc6>
 8006a6a:	f1c9 0e20 	rsb	lr, r9, #32
 8006a6e:	468a      	mov	sl, r1
 8006a70:	f04f 0c00 	mov.w	ip, #0
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	fa02 f209 	lsl.w	r2, r2, r9
 8006a7a:	ea42 020c 	orr.w	r2, r2, ip
 8006a7e:	f84a 2b04 	str.w	r2, [sl], #4
 8006a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a86:	4298      	cmp	r0, r3
 8006a88:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006a8c:	d8f2      	bhi.n	8006a74 <__lshift+0x70>
 8006a8e:	1b03      	subs	r3, r0, r4
 8006a90:	3b15      	subs	r3, #21
 8006a92:	f023 0303 	bic.w	r3, r3, #3
 8006a96:	3304      	adds	r3, #4
 8006a98:	f104 0215 	add.w	r2, r4, #21
 8006a9c:	4290      	cmp	r0, r2
 8006a9e:	bf38      	it	cc
 8006aa0:	2304      	movcc	r3, #4
 8006aa2:	f841 c003 	str.w	ip, [r1, r3]
 8006aa6:	f1bc 0f00 	cmp.w	ip, #0
 8006aaa:	d001      	beq.n	8006ab0 <__lshift+0xac>
 8006aac:	f108 0602 	add.w	r6, r8, #2
 8006ab0:	3e01      	subs	r6, #1
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	612e      	str	r6, [r5, #16]
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	f7ff fdd2 	bl	8006660 <_Bfree>
 8006abc:	4628      	mov	r0, r5
 8006abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	e7c1      	b.n	8006a4e <__lshift+0x4a>
 8006aca:	3904      	subs	r1, #4
 8006acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ad4:	4298      	cmp	r0, r3
 8006ad6:	d8f9      	bhi.n	8006acc <__lshift+0xc8>
 8006ad8:	e7ea      	b.n	8006ab0 <__lshift+0xac>
 8006ada:	bf00      	nop
 8006adc:	08007e8f 	.word	0x08007e8f
 8006ae0:	08007ea0 	.word	0x08007ea0

08006ae4 <__mcmp>:
 8006ae4:	b530      	push	{r4, r5, lr}
 8006ae6:	6902      	ldr	r2, [r0, #16]
 8006ae8:	690c      	ldr	r4, [r1, #16]
 8006aea:	1b12      	subs	r2, r2, r4
 8006aec:	d10e      	bne.n	8006b0c <__mcmp+0x28>
 8006aee:	f100 0314 	add.w	r3, r0, #20
 8006af2:	3114      	adds	r1, #20
 8006af4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006af8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006afc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b04:	42a5      	cmp	r5, r4
 8006b06:	d003      	beq.n	8006b10 <__mcmp+0x2c>
 8006b08:	d305      	bcc.n	8006b16 <__mcmp+0x32>
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	bd30      	pop	{r4, r5, pc}
 8006b10:	4283      	cmp	r3, r0
 8006b12:	d3f3      	bcc.n	8006afc <__mcmp+0x18>
 8006b14:	e7fa      	b.n	8006b0c <__mcmp+0x28>
 8006b16:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1a:	e7f7      	b.n	8006b0c <__mcmp+0x28>

08006b1c <__mdiff>:
 8006b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	4606      	mov	r6, r0
 8006b24:	4611      	mov	r1, r2
 8006b26:	4620      	mov	r0, r4
 8006b28:	4690      	mov	r8, r2
 8006b2a:	f7ff ffdb 	bl	8006ae4 <__mcmp>
 8006b2e:	1e05      	subs	r5, r0, #0
 8006b30:	d110      	bne.n	8006b54 <__mdiff+0x38>
 8006b32:	4629      	mov	r1, r5
 8006b34:	4630      	mov	r0, r6
 8006b36:	f7ff fd53 	bl	80065e0 <_Balloc>
 8006b3a:	b930      	cbnz	r0, 8006b4a <__mdiff+0x2e>
 8006b3c:	4b3a      	ldr	r3, [pc, #232]	; (8006c28 <__mdiff+0x10c>)
 8006b3e:	4602      	mov	r2, r0
 8006b40:	f240 2132 	movw	r1, #562	; 0x232
 8006b44:	4839      	ldr	r0, [pc, #228]	; (8006c2c <__mdiff+0x110>)
 8006b46:	f000 fb31 	bl	80071ac <__assert_func>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b54:	bfa4      	itt	ge
 8006b56:	4643      	movge	r3, r8
 8006b58:	46a0      	movge	r8, r4
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006b60:	bfa6      	itte	ge
 8006b62:	461c      	movge	r4, r3
 8006b64:	2500      	movge	r5, #0
 8006b66:	2501      	movlt	r5, #1
 8006b68:	f7ff fd3a 	bl	80065e0 <_Balloc>
 8006b6c:	b920      	cbnz	r0, 8006b78 <__mdiff+0x5c>
 8006b6e:	4b2e      	ldr	r3, [pc, #184]	; (8006c28 <__mdiff+0x10c>)
 8006b70:	4602      	mov	r2, r0
 8006b72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b76:	e7e5      	b.n	8006b44 <__mdiff+0x28>
 8006b78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006b7c:	6926      	ldr	r6, [r4, #16]
 8006b7e:	60c5      	str	r5, [r0, #12]
 8006b80:	f104 0914 	add.w	r9, r4, #20
 8006b84:	f108 0514 	add.w	r5, r8, #20
 8006b88:	f100 0e14 	add.w	lr, r0, #20
 8006b8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006b90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b94:	f108 0210 	add.w	r2, r8, #16
 8006b98:	46f2      	mov	sl, lr
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ba0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ba4:	fa1f f883 	uxth.w	r8, r3
 8006ba8:	fa11 f18b 	uxtah	r1, r1, fp
 8006bac:	0c1b      	lsrs	r3, r3, #16
 8006bae:	eba1 0808 	sub.w	r8, r1, r8
 8006bb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006bba:	fa1f f888 	uxth.w	r8, r8
 8006bbe:	1419      	asrs	r1, r3, #16
 8006bc0:	454e      	cmp	r6, r9
 8006bc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006bc6:	f84a 3b04 	str.w	r3, [sl], #4
 8006bca:	d8e7      	bhi.n	8006b9c <__mdiff+0x80>
 8006bcc:	1b33      	subs	r3, r6, r4
 8006bce:	3b15      	subs	r3, #21
 8006bd0:	f023 0303 	bic.w	r3, r3, #3
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	3415      	adds	r4, #21
 8006bd8:	42a6      	cmp	r6, r4
 8006bda:	bf38      	it	cc
 8006bdc:	2304      	movcc	r3, #4
 8006bde:	441d      	add	r5, r3
 8006be0:	4473      	add	r3, lr
 8006be2:	469e      	mov	lr, r3
 8006be4:	462e      	mov	r6, r5
 8006be6:	4566      	cmp	r6, ip
 8006be8:	d30e      	bcc.n	8006c08 <__mdiff+0xec>
 8006bea:	f10c 0203 	add.w	r2, ip, #3
 8006bee:	1b52      	subs	r2, r2, r5
 8006bf0:	f022 0203 	bic.w	r2, r2, #3
 8006bf4:	3d03      	subs	r5, #3
 8006bf6:	45ac      	cmp	ip, r5
 8006bf8:	bf38      	it	cc
 8006bfa:	2200      	movcc	r2, #0
 8006bfc:	441a      	add	r2, r3
 8006bfe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006c02:	b17b      	cbz	r3, 8006c24 <__mdiff+0x108>
 8006c04:	6107      	str	r7, [r0, #16]
 8006c06:	e7a3      	b.n	8006b50 <__mdiff+0x34>
 8006c08:	f856 8b04 	ldr.w	r8, [r6], #4
 8006c0c:	fa11 f288 	uxtah	r2, r1, r8
 8006c10:	1414      	asrs	r4, r2, #16
 8006c12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c16:	b292      	uxth	r2, r2
 8006c18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006c1c:	f84e 2b04 	str.w	r2, [lr], #4
 8006c20:	1421      	asrs	r1, r4, #16
 8006c22:	e7e0      	b.n	8006be6 <__mdiff+0xca>
 8006c24:	3f01      	subs	r7, #1
 8006c26:	e7ea      	b.n	8006bfe <__mdiff+0xe2>
 8006c28:	08007e8f 	.word	0x08007e8f
 8006c2c:	08007ea0 	.word	0x08007ea0

08006c30 <__d2b>:
 8006c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c34:	4689      	mov	r9, r1
 8006c36:	2101      	movs	r1, #1
 8006c38:	ec57 6b10 	vmov	r6, r7, d0
 8006c3c:	4690      	mov	r8, r2
 8006c3e:	f7ff fccf 	bl	80065e0 <_Balloc>
 8006c42:	4604      	mov	r4, r0
 8006c44:	b930      	cbnz	r0, 8006c54 <__d2b+0x24>
 8006c46:	4602      	mov	r2, r0
 8006c48:	4b25      	ldr	r3, [pc, #148]	; (8006ce0 <__d2b+0xb0>)
 8006c4a:	4826      	ldr	r0, [pc, #152]	; (8006ce4 <__d2b+0xb4>)
 8006c4c:	f240 310a 	movw	r1, #778	; 0x30a
 8006c50:	f000 faac 	bl	80071ac <__assert_func>
 8006c54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006c58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c5c:	bb35      	cbnz	r5, 8006cac <__d2b+0x7c>
 8006c5e:	2e00      	cmp	r6, #0
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	d028      	beq.n	8006cb6 <__d2b+0x86>
 8006c64:	4668      	mov	r0, sp
 8006c66:	9600      	str	r6, [sp, #0]
 8006c68:	f7ff fd82 	bl	8006770 <__lo0bits>
 8006c6c:	9900      	ldr	r1, [sp, #0]
 8006c6e:	b300      	cbz	r0, 8006cb2 <__d2b+0x82>
 8006c70:	9a01      	ldr	r2, [sp, #4]
 8006c72:	f1c0 0320 	rsb	r3, r0, #32
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	40c2      	lsrs	r2, r0
 8006c7e:	6163      	str	r3, [r4, #20]
 8006c80:	9201      	str	r2, [sp, #4]
 8006c82:	9b01      	ldr	r3, [sp, #4]
 8006c84:	61a3      	str	r3, [r4, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bf14      	ite	ne
 8006c8a:	2202      	movne	r2, #2
 8006c8c:	2201      	moveq	r2, #1
 8006c8e:	6122      	str	r2, [r4, #16]
 8006c90:	b1d5      	cbz	r5, 8006cc8 <__d2b+0x98>
 8006c92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c96:	4405      	add	r5, r0
 8006c98:	f8c9 5000 	str.w	r5, [r9]
 8006c9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ca0:	f8c8 0000 	str.w	r0, [r8]
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	b003      	add	sp, #12
 8006ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cb0:	e7d5      	b.n	8006c5e <__d2b+0x2e>
 8006cb2:	6161      	str	r1, [r4, #20]
 8006cb4:	e7e5      	b.n	8006c82 <__d2b+0x52>
 8006cb6:	a801      	add	r0, sp, #4
 8006cb8:	f7ff fd5a 	bl	8006770 <__lo0bits>
 8006cbc:	9b01      	ldr	r3, [sp, #4]
 8006cbe:	6163      	str	r3, [r4, #20]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	6122      	str	r2, [r4, #16]
 8006cc4:	3020      	adds	r0, #32
 8006cc6:	e7e3      	b.n	8006c90 <__d2b+0x60>
 8006cc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ccc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cd0:	f8c9 0000 	str.w	r0, [r9]
 8006cd4:	6918      	ldr	r0, [r3, #16]
 8006cd6:	f7ff fd2b 	bl	8006730 <__hi0bits>
 8006cda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006cde:	e7df      	b.n	8006ca0 <__d2b+0x70>
 8006ce0:	08007e8f 	.word	0x08007e8f
 8006ce4:	08007ea0 	.word	0x08007ea0

08006ce8 <_calloc_r>:
 8006ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cea:	fba1 2402 	umull	r2, r4, r1, r2
 8006cee:	b94c      	cbnz	r4, 8006d04 <_calloc_r+0x1c>
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	9201      	str	r2, [sp, #4]
 8006cf4:	f000 f87a 	bl	8006dec <_malloc_r>
 8006cf8:	9a01      	ldr	r2, [sp, #4]
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	b930      	cbnz	r0, 8006d0c <_calloc_r+0x24>
 8006cfe:	4628      	mov	r0, r5
 8006d00:	b003      	add	sp, #12
 8006d02:	bd30      	pop	{r4, r5, pc}
 8006d04:	220c      	movs	r2, #12
 8006d06:	6002      	str	r2, [r0, #0]
 8006d08:	2500      	movs	r5, #0
 8006d0a:	e7f8      	b.n	8006cfe <_calloc_r+0x16>
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	f7fe f93f 	bl	8004f90 <memset>
 8006d12:	e7f4      	b.n	8006cfe <_calloc_r+0x16>

08006d14 <_free_r>:
 8006d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d16:	2900      	cmp	r1, #0
 8006d18:	d044      	beq.n	8006da4 <_free_r+0x90>
 8006d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d1e:	9001      	str	r0, [sp, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f1a1 0404 	sub.w	r4, r1, #4
 8006d26:	bfb8      	it	lt
 8006d28:	18e4      	addlt	r4, r4, r3
 8006d2a:	f000 fa9b 	bl	8007264 <__malloc_lock>
 8006d2e:	4a1e      	ldr	r2, [pc, #120]	; (8006da8 <_free_r+0x94>)
 8006d30:	9801      	ldr	r0, [sp, #4]
 8006d32:	6813      	ldr	r3, [r2, #0]
 8006d34:	b933      	cbnz	r3, 8006d44 <_free_r+0x30>
 8006d36:	6063      	str	r3, [r4, #4]
 8006d38:	6014      	str	r4, [r2, #0]
 8006d3a:	b003      	add	sp, #12
 8006d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d40:	f000 ba96 	b.w	8007270 <__malloc_unlock>
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	d908      	bls.n	8006d5a <_free_r+0x46>
 8006d48:	6825      	ldr	r5, [r4, #0]
 8006d4a:	1961      	adds	r1, r4, r5
 8006d4c:	428b      	cmp	r3, r1
 8006d4e:	bf01      	itttt	eq
 8006d50:	6819      	ldreq	r1, [r3, #0]
 8006d52:	685b      	ldreq	r3, [r3, #4]
 8006d54:	1949      	addeq	r1, r1, r5
 8006d56:	6021      	streq	r1, [r4, #0]
 8006d58:	e7ed      	b.n	8006d36 <_free_r+0x22>
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	b10b      	cbz	r3, 8006d64 <_free_r+0x50>
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	d9fa      	bls.n	8006d5a <_free_r+0x46>
 8006d64:	6811      	ldr	r1, [r2, #0]
 8006d66:	1855      	adds	r5, r2, r1
 8006d68:	42a5      	cmp	r5, r4
 8006d6a:	d10b      	bne.n	8006d84 <_free_r+0x70>
 8006d6c:	6824      	ldr	r4, [r4, #0]
 8006d6e:	4421      	add	r1, r4
 8006d70:	1854      	adds	r4, r2, r1
 8006d72:	42a3      	cmp	r3, r4
 8006d74:	6011      	str	r1, [r2, #0]
 8006d76:	d1e0      	bne.n	8006d3a <_free_r+0x26>
 8006d78:	681c      	ldr	r4, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	6053      	str	r3, [r2, #4]
 8006d7e:	4421      	add	r1, r4
 8006d80:	6011      	str	r1, [r2, #0]
 8006d82:	e7da      	b.n	8006d3a <_free_r+0x26>
 8006d84:	d902      	bls.n	8006d8c <_free_r+0x78>
 8006d86:	230c      	movs	r3, #12
 8006d88:	6003      	str	r3, [r0, #0]
 8006d8a:	e7d6      	b.n	8006d3a <_free_r+0x26>
 8006d8c:	6825      	ldr	r5, [r4, #0]
 8006d8e:	1961      	adds	r1, r4, r5
 8006d90:	428b      	cmp	r3, r1
 8006d92:	bf04      	itt	eq
 8006d94:	6819      	ldreq	r1, [r3, #0]
 8006d96:	685b      	ldreq	r3, [r3, #4]
 8006d98:	6063      	str	r3, [r4, #4]
 8006d9a:	bf04      	itt	eq
 8006d9c:	1949      	addeq	r1, r1, r5
 8006d9e:	6021      	streq	r1, [r4, #0]
 8006da0:	6054      	str	r4, [r2, #4]
 8006da2:	e7ca      	b.n	8006d3a <_free_r+0x26>
 8006da4:	b003      	add	sp, #12
 8006da6:	bd30      	pop	{r4, r5, pc}
 8006da8:	20000440 	.word	0x20000440

08006dac <sbrk_aligned>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	4e0e      	ldr	r6, [pc, #56]	; (8006de8 <sbrk_aligned+0x3c>)
 8006db0:	460c      	mov	r4, r1
 8006db2:	6831      	ldr	r1, [r6, #0]
 8006db4:	4605      	mov	r5, r0
 8006db6:	b911      	cbnz	r1, 8006dbe <sbrk_aligned+0x12>
 8006db8:	f000 f9e8 	bl	800718c <_sbrk_r>
 8006dbc:	6030      	str	r0, [r6, #0]
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f000 f9e3 	bl	800718c <_sbrk_r>
 8006dc6:	1c43      	adds	r3, r0, #1
 8006dc8:	d00a      	beq.n	8006de0 <sbrk_aligned+0x34>
 8006dca:	1cc4      	adds	r4, r0, #3
 8006dcc:	f024 0403 	bic.w	r4, r4, #3
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d007      	beq.n	8006de4 <sbrk_aligned+0x38>
 8006dd4:	1a21      	subs	r1, r4, r0
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 f9d8 	bl	800718c <_sbrk_r>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d101      	bne.n	8006de4 <sbrk_aligned+0x38>
 8006de0:	f04f 34ff 	mov.w	r4, #4294967295
 8006de4:	4620      	mov	r0, r4
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	20000444 	.word	0x20000444

08006dec <_malloc_r>:
 8006dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df0:	1ccd      	adds	r5, r1, #3
 8006df2:	f025 0503 	bic.w	r5, r5, #3
 8006df6:	3508      	adds	r5, #8
 8006df8:	2d0c      	cmp	r5, #12
 8006dfa:	bf38      	it	cc
 8006dfc:	250c      	movcc	r5, #12
 8006dfe:	2d00      	cmp	r5, #0
 8006e00:	4607      	mov	r7, r0
 8006e02:	db01      	blt.n	8006e08 <_malloc_r+0x1c>
 8006e04:	42a9      	cmp	r1, r5
 8006e06:	d905      	bls.n	8006e14 <_malloc_r+0x28>
 8006e08:	230c      	movs	r3, #12
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	2600      	movs	r6, #0
 8006e0e:	4630      	mov	r0, r6
 8006e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e14:	4e2e      	ldr	r6, [pc, #184]	; (8006ed0 <_malloc_r+0xe4>)
 8006e16:	f000 fa25 	bl	8007264 <__malloc_lock>
 8006e1a:	6833      	ldr	r3, [r6, #0]
 8006e1c:	461c      	mov	r4, r3
 8006e1e:	bb34      	cbnz	r4, 8006e6e <_malloc_r+0x82>
 8006e20:	4629      	mov	r1, r5
 8006e22:	4638      	mov	r0, r7
 8006e24:	f7ff ffc2 	bl	8006dac <sbrk_aligned>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	d14d      	bne.n	8006eca <_malloc_r+0xde>
 8006e2e:	6834      	ldr	r4, [r6, #0]
 8006e30:	4626      	mov	r6, r4
 8006e32:	2e00      	cmp	r6, #0
 8006e34:	d140      	bne.n	8006eb8 <_malloc_r+0xcc>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	eb04 0803 	add.w	r8, r4, r3
 8006e40:	f000 f9a4 	bl	800718c <_sbrk_r>
 8006e44:	4580      	cmp	r8, r0
 8006e46:	d13a      	bne.n	8006ebe <_malloc_r+0xd2>
 8006e48:	6821      	ldr	r1, [r4, #0]
 8006e4a:	3503      	adds	r5, #3
 8006e4c:	1a6d      	subs	r5, r5, r1
 8006e4e:	f025 0503 	bic.w	r5, r5, #3
 8006e52:	3508      	adds	r5, #8
 8006e54:	2d0c      	cmp	r5, #12
 8006e56:	bf38      	it	cc
 8006e58:	250c      	movcc	r5, #12
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	f7ff ffa5 	bl	8006dac <sbrk_aligned>
 8006e62:	3001      	adds	r0, #1
 8006e64:	d02b      	beq.n	8006ebe <_malloc_r+0xd2>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	442b      	add	r3, r5
 8006e6a:	6023      	str	r3, [r4, #0]
 8006e6c:	e00e      	b.n	8006e8c <_malloc_r+0xa0>
 8006e6e:	6822      	ldr	r2, [r4, #0]
 8006e70:	1b52      	subs	r2, r2, r5
 8006e72:	d41e      	bmi.n	8006eb2 <_malloc_r+0xc6>
 8006e74:	2a0b      	cmp	r2, #11
 8006e76:	d916      	bls.n	8006ea6 <_malloc_r+0xba>
 8006e78:	1961      	adds	r1, r4, r5
 8006e7a:	42a3      	cmp	r3, r4
 8006e7c:	6025      	str	r5, [r4, #0]
 8006e7e:	bf18      	it	ne
 8006e80:	6059      	strne	r1, [r3, #4]
 8006e82:	6863      	ldr	r3, [r4, #4]
 8006e84:	bf08      	it	eq
 8006e86:	6031      	streq	r1, [r6, #0]
 8006e88:	5162      	str	r2, [r4, r5]
 8006e8a:	604b      	str	r3, [r1, #4]
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f104 060b 	add.w	r6, r4, #11
 8006e92:	f000 f9ed 	bl	8007270 <__malloc_unlock>
 8006e96:	f026 0607 	bic.w	r6, r6, #7
 8006e9a:	1d23      	adds	r3, r4, #4
 8006e9c:	1af2      	subs	r2, r6, r3
 8006e9e:	d0b6      	beq.n	8006e0e <_malloc_r+0x22>
 8006ea0:	1b9b      	subs	r3, r3, r6
 8006ea2:	50a3      	str	r3, [r4, r2]
 8006ea4:	e7b3      	b.n	8006e0e <_malloc_r+0x22>
 8006ea6:	6862      	ldr	r2, [r4, #4]
 8006ea8:	42a3      	cmp	r3, r4
 8006eaa:	bf0c      	ite	eq
 8006eac:	6032      	streq	r2, [r6, #0]
 8006eae:	605a      	strne	r2, [r3, #4]
 8006eb0:	e7ec      	b.n	8006e8c <_malloc_r+0xa0>
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	6864      	ldr	r4, [r4, #4]
 8006eb6:	e7b2      	b.n	8006e1e <_malloc_r+0x32>
 8006eb8:	4634      	mov	r4, r6
 8006eba:	6876      	ldr	r6, [r6, #4]
 8006ebc:	e7b9      	b.n	8006e32 <_malloc_r+0x46>
 8006ebe:	230c      	movs	r3, #12
 8006ec0:	603b      	str	r3, [r7, #0]
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f000 f9d4 	bl	8007270 <__malloc_unlock>
 8006ec8:	e7a1      	b.n	8006e0e <_malloc_r+0x22>
 8006eca:	6025      	str	r5, [r4, #0]
 8006ecc:	e7de      	b.n	8006e8c <_malloc_r+0xa0>
 8006ece:	bf00      	nop
 8006ed0:	20000440 	.word	0x20000440

08006ed4 <__ssputs_r>:
 8006ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed8:	688e      	ldr	r6, [r1, #8]
 8006eda:	429e      	cmp	r6, r3
 8006edc:	4682      	mov	sl, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	4690      	mov	r8, r2
 8006ee2:	461f      	mov	r7, r3
 8006ee4:	d838      	bhi.n	8006f58 <__ssputs_r+0x84>
 8006ee6:	898a      	ldrh	r2, [r1, #12]
 8006ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006eec:	d032      	beq.n	8006f54 <__ssputs_r+0x80>
 8006eee:	6825      	ldr	r5, [r4, #0]
 8006ef0:	6909      	ldr	r1, [r1, #16]
 8006ef2:	eba5 0901 	sub.w	r9, r5, r1
 8006ef6:	6965      	ldr	r5, [r4, #20]
 8006ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f00:	3301      	adds	r3, #1
 8006f02:	444b      	add	r3, r9
 8006f04:	106d      	asrs	r5, r5, #1
 8006f06:	429d      	cmp	r5, r3
 8006f08:	bf38      	it	cc
 8006f0a:	461d      	movcc	r5, r3
 8006f0c:	0553      	lsls	r3, r2, #21
 8006f0e:	d531      	bpl.n	8006f74 <__ssputs_r+0xa0>
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7ff ff6b 	bl	8006dec <_malloc_r>
 8006f16:	4606      	mov	r6, r0
 8006f18:	b950      	cbnz	r0, 8006f30 <__ssputs_r+0x5c>
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	f8ca 3000 	str.w	r3, [sl]
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f30:	6921      	ldr	r1, [r4, #16]
 8006f32:	464a      	mov	r2, r9
 8006f34:	f7ff fb46 	bl	80065c4 <memcpy>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	6126      	str	r6, [r4, #16]
 8006f46:	6165      	str	r5, [r4, #20]
 8006f48:	444e      	add	r6, r9
 8006f4a:	eba5 0509 	sub.w	r5, r5, r9
 8006f4e:	6026      	str	r6, [r4, #0]
 8006f50:	60a5      	str	r5, [r4, #8]
 8006f52:	463e      	mov	r6, r7
 8006f54:	42be      	cmp	r6, r7
 8006f56:	d900      	bls.n	8006f5a <__ssputs_r+0x86>
 8006f58:	463e      	mov	r6, r7
 8006f5a:	6820      	ldr	r0, [r4, #0]
 8006f5c:	4632      	mov	r2, r6
 8006f5e:	4641      	mov	r1, r8
 8006f60:	f000 f966 	bl	8007230 <memmove>
 8006f64:	68a3      	ldr	r3, [r4, #8]
 8006f66:	1b9b      	subs	r3, r3, r6
 8006f68:	60a3      	str	r3, [r4, #8]
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	4433      	add	r3, r6
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	2000      	movs	r0, #0
 8006f72:	e7db      	b.n	8006f2c <__ssputs_r+0x58>
 8006f74:	462a      	mov	r2, r5
 8006f76:	f000 f981 	bl	800727c <_realloc_r>
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d1e1      	bne.n	8006f44 <__ssputs_r+0x70>
 8006f80:	6921      	ldr	r1, [r4, #16]
 8006f82:	4650      	mov	r0, sl
 8006f84:	f7ff fec6 	bl	8006d14 <_free_r>
 8006f88:	e7c7      	b.n	8006f1a <__ssputs_r+0x46>
	...

08006f8c <_svfiprintf_r>:
 8006f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f90:	4698      	mov	r8, r3
 8006f92:	898b      	ldrh	r3, [r1, #12]
 8006f94:	061b      	lsls	r3, r3, #24
 8006f96:	b09d      	sub	sp, #116	; 0x74
 8006f98:	4607      	mov	r7, r0
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	d50e      	bpl.n	8006fbe <_svfiprintf_r+0x32>
 8006fa0:	690b      	ldr	r3, [r1, #16]
 8006fa2:	b963      	cbnz	r3, 8006fbe <_svfiprintf_r+0x32>
 8006fa4:	2140      	movs	r1, #64	; 0x40
 8006fa6:	f7ff ff21 	bl	8006dec <_malloc_r>
 8006faa:	6028      	str	r0, [r5, #0]
 8006fac:	6128      	str	r0, [r5, #16]
 8006fae:	b920      	cbnz	r0, 8006fba <_svfiprintf_r+0x2e>
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb8:	e0d1      	b.n	800715e <_svfiprintf_r+0x1d2>
 8006fba:	2340      	movs	r3, #64	; 0x40
 8006fbc:	616b      	str	r3, [r5, #20]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc2:	2320      	movs	r3, #32
 8006fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fcc:	2330      	movs	r3, #48	; 0x30
 8006fce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007178 <_svfiprintf_r+0x1ec>
 8006fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fd6:	f04f 0901 	mov.w	r9, #1
 8006fda:	4623      	mov	r3, r4
 8006fdc:	469a      	mov	sl, r3
 8006fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe2:	b10a      	cbz	r2, 8006fe8 <_svfiprintf_r+0x5c>
 8006fe4:	2a25      	cmp	r2, #37	; 0x25
 8006fe6:	d1f9      	bne.n	8006fdc <_svfiprintf_r+0x50>
 8006fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8006fec:	d00b      	beq.n	8007006 <_svfiprintf_r+0x7a>
 8006fee:	465b      	mov	r3, fp
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f7ff ff6d 	bl	8006ed4 <__ssputs_r>
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	f000 80aa 	beq.w	8007154 <_svfiprintf_r+0x1c8>
 8007000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007002:	445a      	add	r2, fp
 8007004:	9209      	str	r2, [sp, #36]	; 0x24
 8007006:	f89a 3000 	ldrb.w	r3, [sl]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80a2 	beq.w	8007154 <_svfiprintf_r+0x1c8>
 8007010:	2300      	movs	r3, #0
 8007012:	f04f 32ff 	mov.w	r2, #4294967295
 8007016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800701a:	f10a 0a01 	add.w	sl, sl, #1
 800701e:	9304      	str	r3, [sp, #16]
 8007020:	9307      	str	r3, [sp, #28]
 8007022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007026:	931a      	str	r3, [sp, #104]	; 0x68
 8007028:	4654      	mov	r4, sl
 800702a:	2205      	movs	r2, #5
 800702c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007030:	4851      	ldr	r0, [pc, #324]	; (8007178 <_svfiprintf_r+0x1ec>)
 8007032:	f7f9 f8d5 	bl	80001e0 <memchr>
 8007036:	9a04      	ldr	r2, [sp, #16]
 8007038:	b9d8      	cbnz	r0, 8007072 <_svfiprintf_r+0xe6>
 800703a:	06d0      	lsls	r0, r2, #27
 800703c:	bf44      	itt	mi
 800703e:	2320      	movmi	r3, #32
 8007040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007044:	0711      	lsls	r1, r2, #28
 8007046:	bf44      	itt	mi
 8007048:	232b      	movmi	r3, #43	; 0x2b
 800704a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800704e:	f89a 3000 	ldrb.w	r3, [sl]
 8007052:	2b2a      	cmp	r3, #42	; 0x2a
 8007054:	d015      	beq.n	8007082 <_svfiprintf_r+0xf6>
 8007056:	9a07      	ldr	r2, [sp, #28]
 8007058:	4654      	mov	r4, sl
 800705a:	2000      	movs	r0, #0
 800705c:	f04f 0c0a 	mov.w	ip, #10
 8007060:	4621      	mov	r1, r4
 8007062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007066:	3b30      	subs	r3, #48	; 0x30
 8007068:	2b09      	cmp	r3, #9
 800706a:	d94e      	bls.n	800710a <_svfiprintf_r+0x17e>
 800706c:	b1b0      	cbz	r0, 800709c <_svfiprintf_r+0x110>
 800706e:	9207      	str	r2, [sp, #28]
 8007070:	e014      	b.n	800709c <_svfiprintf_r+0x110>
 8007072:	eba0 0308 	sub.w	r3, r0, r8
 8007076:	fa09 f303 	lsl.w	r3, r9, r3
 800707a:	4313      	orrs	r3, r2
 800707c:	9304      	str	r3, [sp, #16]
 800707e:	46a2      	mov	sl, r4
 8007080:	e7d2      	b.n	8007028 <_svfiprintf_r+0x9c>
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	1d19      	adds	r1, r3, #4
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	9103      	str	r1, [sp, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	bfbb      	ittet	lt
 800708e:	425b      	neglt	r3, r3
 8007090:	f042 0202 	orrlt.w	r2, r2, #2
 8007094:	9307      	strge	r3, [sp, #28]
 8007096:	9307      	strlt	r3, [sp, #28]
 8007098:	bfb8      	it	lt
 800709a:	9204      	strlt	r2, [sp, #16]
 800709c:	7823      	ldrb	r3, [r4, #0]
 800709e:	2b2e      	cmp	r3, #46	; 0x2e
 80070a0:	d10c      	bne.n	80070bc <_svfiprintf_r+0x130>
 80070a2:	7863      	ldrb	r3, [r4, #1]
 80070a4:	2b2a      	cmp	r3, #42	; 0x2a
 80070a6:	d135      	bne.n	8007114 <_svfiprintf_r+0x188>
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	1d1a      	adds	r2, r3, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	9203      	str	r2, [sp, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bfb8      	it	lt
 80070b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80070b8:	3402      	adds	r4, #2
 80070ba:	9305      	str	r3, [sp, #20]
 80070bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007188 <_svfiprintf_r+0x1fc>
 80070c0:	7821      	ldrb	r1, [r4, #0]
 80070c2:	2203      	movs	r2, #3
 80070c4:	4650      	mov	r0, sl
 80070c6:	f7f9 f88b 	bl	80001e0 <memchr>
 80070ca:	b140      	cbz	r0, 80070de <_svfiprintf_r+0x152>
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	eba0 000a 	sub.w	r0, r0, sl
 80070d2:	fa03 f000 	lsl.w	r0, r3, r0
 80070d6:	9b04      	ldr	r3, [sp, #16]
 80070d8:	4303      	orrs	r3, r0
 80070da:	3401      	adds	r4, #1
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e2:	4826      	ldr	r0, [pc, #152]	; (800717c <_svfiprintf_r+0x1f0>)
 80070e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070e8:	2206      	movs	r2, #6
 80070ea:	f7f9 f879 	bl	80001e0 <memchr>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d038      	beq.n	8007164 <_svfiprintf_r+0x1d8>
 80070f2:	4b23      	ldr	r3, [pc, #140]	; (8007180 <_svfiprintf_r+0x1f4>)
 80070f4:	bb1b      	cbnz	r3, 800713e <_svfiprintf_r+0x1b2>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	3307      	adds	r3, #7
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	3308      	adds	r3, #8
 8007100:	9303      	str	r3, [sp, #12]
 8007102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007104:	4433      	add	r3, r6
 8007106:	9309      	str	r3, [sp, #36]	; 0x24
 8007108:	e767      	b.n	8006fda <_svfiprintf_r+0x4e>
 800710a:	fb0c 3202 	mla	r2, ip, r2, r3
 800710e:	460c      	mov	r4, r1
 8007110:	2001      	movs	r0, #1
 8007112:	e7a5      	b.n	8007060 <_svfiprintf_r+0xd4>
 8007114:	2300      	movs	r3, #0
 8007116:	3401      	adds	r4, #1
 8007118:	9305      	str	r3, [sp, #20]
 800711a:	4619      	mov	r1, r3
 800711c:	f04f 0c0a 	mov.w	ip, #10
 8007120:	4620      	mov	r0, r4
 8007122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007126:	3a30      	subs	r2, #48	; 0x30
 8007128:	2a09      	cmp	r2, #9
 800712a:	d903      	bls.n	8007134 <_svfiprintf_r+0x1a8>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0c5      	beq.n	80070bc <_svfiprintf_r+0x130>
 8007130:	9105      	str	r1, [sp, #20]
 8007132:	e7c3      	b.n	80070bc <_svfiprintf_r+0x130>
 8007134:	fb0c 2101 	mla	r1, ip, r1, r2
 8007138:	4604      	mov	r4, r0
 800713a:	2301      	movs	r3, #1
 800713c:	e7f0      	b.n	8007120 <_svfiprintf_r+0x194>
 800713e:	ab03      	add	r3, sp, #12
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	462a      	mov	r2, r5
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <_svfiprintf_r+0x1f8>)
 8007146:	a904      	add	r1, sp, #16
 8007148:	4638      	mov	r0, r7
 800714a:	f7fd ffc9 	bl	80050e0 <_printf_float>
 800714e:	1c42      	adds	r2, r0, #1
 8007150:	4606      	mov	r6, r0
 8007152:	d1d6      	bne.n	8007102 <_svfiprintf_r+0x176>
 8007154:	89ab      	ldrh	r3, [r5, #12]
 8007156:	065b      	lsls	r3, r3, #25
 8007158:	f53f af2c 	bmi.w	8006fb4 <_svfiprintf_r+0x28>
 800715c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800715e:	b01d      	add	sp, #116	; 0x74
 8007160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007164:	ab03      	add	r3, sp, #12
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	462a      	mov	r2, r5
 800716a:	4b06      	ldr	r3, [pc, #24]	; (8007184 <_svfiprintf_r+0x1f8>)
 800716c:	a904      	add	r1, sp, #16
 800716e:	4638      	mov	r0, r7
 8007170:	f7fe fa5a 	bl	8005628 <_printf_i>
 8007174:	e7eb      	b.n	800714e <_svfiprintf_r+0x1c2>
 8007176:	bf00      	nop
 8007178:	08007ffc 	.word	0x08007ffc
 800717c:	08008006 	.word	0x08008006
 8007180:	080050e1 	.word	0x080050e1
 8007184:	08006ed5 	.word	0x08006ed5
 8007188:	08008002 	.word	0x08008002

0800718c <_sbrk_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4d06      	ldr	r5, [pc, #24]	; (80071a8 <_sbrk_r+0x1c>)
 8007190:	2300      	movs	r3, #0
 8007192:	4604      	mov	r4, r0
 8007194:	4608      	mov	r0, r1
 8007196:	602b      	str	r3, [r5, #0]
 8007198:	f7fa f9e6 	bl	8001568 <_sbrk>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_sbrk_r+0x1a>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_sbrk_r+0x1a>
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	20000448 	.word	0x20000448

080071ac <__assert_func>:
 80071ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ae:	4614      	mov	r4, r2
 80071b0:	461a      	mov	r2, r3
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <__assert_func+0x2c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4605      	mov	r5, r0
 80071b8:	68d8      	ldr	r0, [r3, #12]
 80071ba:	b14c      	cbz	r4, 80071d0 <__assert_func+0x24>
 80071bc:	4b07      	ldr	r3, [pc, #28]	; (80071dc <__assert_func+0x30>)
 80071be:	9100      	str	r1, [sp, #0]
 80071c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071c4:	4906      	ldr	r1, [pc, #24]	; (80071e0 <__assert_func+0x34>)
 80071c6:	462b      	mov	r3, r5
 80071c8:	f000 f80e 	bl	80071e8 <fiprintf>
 80071cc:	f000 faac 	bl	8007728 <abort>
 80071d0:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <__assert_func+0x38>)
 80071d2:	461c      	mov	r4, r3
 80071d4:	e7f3      	b.n	80071be <__assert_func+0x12>
 80071d6:	bf00      	nop
 80071d8:	2000000c 	.word	0x2000000c
 80071dc:	0800800d 	.word	0x0800800d
 80071e0:	0800801a 	.word	0x0800801a
 80071e4:	08008048 	.word	0x08008048

080071e8 <fiprintf>:
 80071e8:	b40e      	push	{r1, r2, r3}
 80071ea:	b503      	push	{r0, r1, lr}
 80071ec:	4601      	mov	r1, r0
 80071ee:	ab03      	add	r3, sp, #12
 80071f0:	4805      	ldr	r0, [pc, #20]	; (8007208 <fiprintf+0x20>)
 80071f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f6:	6800      	ldr	r0, [r0, #0]
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	f000 f897 	bl	800732c <_vfiprintf_r>
 80071fe:	b002      	add	sp, #8
 8007200:	f85d eb04 	ldr.w	lr, [sp], #4
 8007204:	b003      	add	sp, #12
 8007206:	4770      	bx	lr
 8007208:	2000000c 	.word	0x2000000c

0800720c <__ascii_mbtowc>:
 800720c:	b082      	sub	sp, #8
 800720e:	b901      	cbnz	r1, 8007212 <__ascii_mbtowc+0x6>
 8007210:	a901      	add	r1, sp, #4
 8007212:	b142      	cbz	r2, 8007226 <__ascii_mbtowc+0x1a>
 8007214:	b14b      	cbz	r3, 800722a <__ascii_mbtowc+0x1e>
 8007216:	7813      	ldrb	r3, [r2, #0]
 8007218:	600b      	str	r3, [r1, #0]
 800721a:	7812      	ldrb	r2, [r2, #0]
 800721c:	1e10      	subs	r0, r2, #0
 800721e:	bf18      	it	ne
 8007220:	2001      	movne	r0, #1
 8007222:	b002      	add	sp, #8
 8007224:	4770      	bx	lr
 8007226:	4610      	mov	r0, r2
 8007228:	e7fb      	b.n	8007222 <__ascii_mbtowc+0x16>
 800722a:	f06f 0001 	mvn.w	r0, #1
 800722e:	e7f8      	b.n	8007222 <__ascii_mbtowc+0x16>

08007230 <memmove>:
 8007230:	4288      	cmp	r0, r1
 8007232:	b510      	push	{r4, lr}
 8007234:	eb01 0402 	add.w	r4, r1, r2
 8007238:	d902      	bls.n	8007240 <memmove+0x10>
 800723a:	4284      	cmp	r4, r0
 800723c:	4623      	mov	r3, r4
 800723e:	d807      	bhi.n	8007250 <memmove+0x20>
 8007240:	1e43      	subs	r3, r0, #1
 8007242:	42a1      	cmp	r1, r4
 8007244:	d008      	beq.n	8007258 <memmove+0x28>
 8007246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800724a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800724e:	e7f8      	b.n	8007242 <memmove+0x12>
 8007250:	4402      	add	r2, r0
 8007252:	4601      	mov	r1, r0
 8007254:	428a      	cmp	r2, r1
 8007256:	d100      	bne.n	800725a <memmove+0x2a>
 8007258:	bd10      	pop	{r4, pc}
 800725a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800725e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007262:	e7f7      	b.n	8007254 <memmove+0x24>

08007264 <__malloc_lock>:
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <__malloc_lock+0x8>)
 8007266:	f000 bc1f 	b.w	8007aa8 <__retarget_lock_acquire_recursive>
 800726a:	bf00      	nop
 800726c:	2000044c 	.word	0x2000044c

08007270 <__malloc_unlock>:
 8007270:	4801      	ldr	r0, [pc, #4]	; (8007278 <__malloc_unlock+0x8>)
 8007272:	f000 bc1a 	b.w	8007aaa <__retarget_lock_release_recursive>
 8007276:	bf00      	nop
 8007278:	2000044c 	.word	0x2000044c

0800727c <_realloc_r>:
 800727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007280:	4680      	mov	r8, r0
 8007282:	4614      	mov	r4, r2
 8007284:	460e      	mov	r6, r1
 8007286:	b921      	cbnz	r1, 8007292 <_realloc_r+0x16>
 8007288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800728c:	4611      	mov	r1, r2
 800728e:	f7ff bdad 	b.w	8006dec <_malloc_r>
 8007292:	b92a      	cbnz	r2, 80072a0 <_realloc_r+0x24>
 8007294:	f7ff fd3e 	bl	8006d14 <_free_r>
 8007298:	4625      	mov	r5, r4
 800729a:	4628      	mov	r0, r5
 800729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a0:	f000 fc6a 	bl	8007b78 <_malloc_usable_size_r>
 80072a4:	4284      	cmp	r4, r0
 80072a6:	4607      	mov	r7, r0
 80072a8:	d802      	bhi.n	80072b0 <_realloc_r+0x34>
 80072aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80072ae:	d812      	bhi.n	80072d6 <_realloc_r+0x5a>
 80072b0:	4621      	mov	r1, r4
 80072b2:	4640      	mov	r0, r8
 80072b4:	f7ff fd9a 	bl	8006dec <_malloc_r>
 80072b8:	4605      	mov	r5, r0
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d0ed      	beq.n	800729a <_realloc_r+0x1e>
 80072be:	42bc      	cmp	r4, r7
 80072c0:	4622      	mov	r2, r4
 80072c2:	4631      	mov	r1, r6
 80072c4:	bf28      	it	cs
 80072c6:	463a      	movcs	r2, r7
 80072c8:	f7ff f97c 	bl	80065c4 <memcpy>
 80072cc:	4631      	mov	r1, r6
 80072ce:	4640      	mov	r0, r8
 80072d0:	f7ff fd20 	bl	8006d14 <_free_r>
 80072d4:	e7e1      	b.n	800729a <_realloc_r+0x1e>
 80072d6:	4635      	mov	r5, r6
 80072d8:	e7df      	b.n	800729a <_realloc_r+0x1e>

080072da <__sfputc_r>:
 80072da:	6893      	ldr	r3, [r2, #8]
 80072dc:	3b01      	subs	r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	b410      	push	{r4}
 80072e2:	6093      	str	r3, [r2, #8]
 80072e4:	da08      	bge.n	80072f8 <__sfputc_r+0x1e>
 80072e6:	6994      	ldr	r4, [r2, #24]
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	db01      	blt.n	80072f0 <__sfputc_r+0x16>
 80072ec:	290a      	cmp	r1, #10
 80072ee:	d103      	bne.n	80072f8 <__sfputc_r+0x1e>
 80072f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072f4:	f000 b94a 	b.w	800758c <__swbuf_r>
 80072f8:	6813      	ldr	r3, [r2, #0]
 80072fa:	1c58      	adds	r0, r3, #1
 80072fc:	6010      	str	r0, [r2, #0]
 80072fe:	7019      	strb	r1, [r3, #0]
 8007300:	4608      	mov	r0, r1
 8007302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007306:	4770      	bx	lr

08007308 <__sfputs_r>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	4614      	mov	r4, r2
 8007310:	18d5      	adds	r5, r2, r3
 8007312:	42ac      	cmp	r4, r5
 8007314:	d101      	bne.n	800731a <__sfputs_r+0x12>
 8007316:	2000      	movs	r0, #0
 8007318:	e007      	b.n	800732a <__sfputs_r+0x22>
 800731a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731e:	463a      	mov	r2, r7
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff ffda 	bl	80072da <__sfputc_r>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	d1f3      	bne.n	8007312 <__sfputs_r+0xa>
 800732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800732c <_vfiprintf_r>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	460d      	mov	r5, r1
 8007332:	b09d      	sub	sp, #116	; 0x74
 8007334:	4614      	mov	r4, r2
 8007336:	4698      	mov	r8, r3
 8007338:	4606      	mov	r6, r0
 800733a:	b118      	cbz	r0, 8007344 <_vfiprintf_r+0x18>
 800733c:	6983      	ldr	r3, [r0, #24]
 800733e:	b90b      	cbnz	r3, 8007344 <_vfiprintf_r+0x18>
 8007340:	f000 fb14 	bl	800796c <__sinit>
 8007344:	4b89      	ldr	r3, [pc, #548]	; (800756c <_vfiprintf_r+0x240>)
 8007346:	429d      	cmp	r5, r3
 8007348:	d11b      	bne.n	8007382 <_vfiprintf_r+0x56>
 800734a:	6875      	ldr	r5, [r6, #4]
 800734c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800734e:	07d9      	lsls	r1, r3, #31
 8007350:	d405      	bmi.n	800735e <_vfiprintf_r+0x32>
 8007352:	89ab      	ldrh	r3, [r5, #12]
 8007354:	059a      	lsls	r2, r3, #22
 8007356:	d402      	bmi.n	800735e <_vfiprintf_r+0x32>
 8007358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800735a:	f000 fba5 	bl	8007aa8 <__retarget_lock_acquire_recursive>
 800735e:	89ab      	ldrh	r3, [r5, #12]
 8007360:	071b      	lsls	r3, r3, #28
 8007362:	d501      	bpl.n	8007368 <_vfiprintf_r+0x3c>
 8007364:	692b      	ldr	r3, [r5, #16]
 8007366:	b9eb      	cbnz	r3, 80073a4 <_vfiprintf_r+0x78>
 8007368:	4629      	mov	r1, r5
 800736a:	4630      	mov	r0, r6
 800736c:	f000 f96e 	bl	800764c <__swsetup_r>
 8007370:	b1c0      	cbz	r0, 80073a4 <_vfiprintf_r+0x78>
 8007372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007374:	07dc      	lsls	r4, r3, #31
 8007376:	d50e      	bpl.n	8007396 <_vfiprintf_r+0x6a>
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	b01d      	add	sp, #116	; 0x74
 800737e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007382:	4b7b      	ldr	r3, [pc, #492]	; (8007570 <_vfiprintf_r+0x244>)
 8007384:	429d      	cmp	r5, r3
 8007386:	d101      	bne.n	800738c <_vfiprintf_r+0x60>
 8007388:	68b5      	ldr	r5, [r6, #8]
 800738a:	e7df      	b.n	800734c <_vfiprintf_r+0x20>
 800738c:	4b79      	ldr	r3, [pc, #484]	; (8007574 <_vfiprintf_r+0x248>)
 800738e:	429d      	cmp	r5, r3
 8007390:	bf08      	it	eq
 8007392:	68f5      	ldreq	r5, [r6, #12]
 8007394:	e7da      	b.n	800734c <_vfiprintf_r+0x20>
 8007396:	89ab      	ldrh	r3, [r5, #12]
 8007398:	0598      	lsls	r0, r3, #22
 800739a:	d4ed      	bmi.n	8007378 <_vfiprintf_r+0x4c>
 800739c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800739e:	f000 fb84 	bl	8007aaa <__retarget_lock_release_recursive>
 80073a2:	e7e9      	b.n	8007378 <_vfiprintf_r+0x4c>
 80073a4:	2300      	movs	r3, #0
 80073a6:	9309      	str	r3, [sp, #36]	; 0x24
 80073a8:	2320      	movs	r3, #32
 80073aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b2:	2330      	movs	r3, #48	; 0x30
 80073b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007578 <_vfiprintf_r+0x24c>
 80073b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073bc:	f04f 0901 	mov.w	r9, #1
 80073c0:	4623      	mov	r3, r4
 80073c2:	469a      	mov	sl, r3
 80073c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073c8:	b10a      	cbz	r2, 80073ce <_vfiprintf_r+0xa2>
 80073ca:	2a25      	cmp	r2, #37	; 0x25
 80073cc:	d1f9      	bne.n	80073c2 <_vfiprintf_r+0x96>
 80073ce:	ebba 0b04 	subs.w	fp, sl, r4
 80073d2:	d00b      	beq.n	80073ec <_vfiprintf_r+0xc0>
 80073d4:	465b      	mov	r3, fp
 80073d6:	4622      	mov	r2, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff ff94 	bl	8007308 <__sfputs_r>
 80073e0:	3001      	adds	r0, #1
 80073e2:	f000 80aa 	beq.w	800753a <_vfiprintf_r+0x20e>
 80073e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e8:	445a      	add	r2, fp
 80073ea:	9209      	str	r2, [sp, #36]	; 0x24
 80073ec:	f89a 3000 	ldrb.w	r3, [sl]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80a2 	beq.w	800753a <_vfiprintf_r+0x20e>
 80073f6:	2300      	movs	r3, #0
 80073f8:	f04f 32ff 	mov.w	r2, #4294967295
 80073fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007400:	f10a 0a01 	add.w	sl, sl, #1
 8007404:	9304      	str	r3, [sp, #16]
 8007406:	9307      	str	r3, [sp, #28]
 8007408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800740c:	931a      	str	r3, [sp, #104]	; 0x68
 800740e:	4654      	mov	r4, sl
 8007410:	2205      	movs	r2, #5
 8007412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007416:	4858      	ldr	r0, [pc, #352]	; (8007578 <_vfiprintf_r+0x24c>)
 8007418:	f7f8 fee2 	bl	80001e0 <memchr>
 800741c:	9a04      	ldr	r2, [sp, #16]
 800741e:	b9d8      	cbnz	r0, 8007458 <_vfiprintf_r+0x12c>
 8007420:	06d1      	lsls	r1, r2, #27
 8007422:	bf44      	itt	mi
 8007424:	2320      	movmi	r3, #32
 8007426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800742a:	0713      	lsls	r3, r2, #28
 800742c:	bf44      	itt	mi
 800742e:	232b      	movmi	r3, #43	; 0x2b
 8007430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007434:	f89a 3000 	ldrb.w	r3, [sl]
 8007438:	2b2a      	cmp	r3, #42	; 0x2a
 800743a:	d015      	beq.n	8007468 <_vfiprintf_r+0x13c>
 800743c:	9a07      	ldr	r2, [sp, #28]
 800743e:	4654      	mov	r4, sl
 8007440:	2000      	movs	r0, #0
 8007442:	f04f 0c0a 	mov.w	ip, #10
 8007446:	4621      	mov	r1, r4
 8007448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800744c:	3b30      	subs	r3, #48	; 0x30
 800744e:	2b09      	cmp	r3, #9
 8007450:	d94e      	bls.n	80074f0 <_vfiprintf_r+0x1c4>
 8007452:	b1b0      	cbz	r0, 8007482 <_vfiprintf_r+0x156>
 8007454:	9207      	str	r2, [sp, #28]
 8007456:	e014      	b.n	8007482 <_vfiprintf_r+0x156>
 8007458:	eba0 0308 	sub.w	r3, r0, r8
 800745c:	fa09 f303 	lsl.w	r3, r9, r3
 8007460:	4313      	orrs	r3, r2
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	46a2      	mov	sl, r4
 8007466:	e7d2      	b.n	800740e <_vfiprintf_r+0xe2>
 8007468:	9b03      	ldr	r3, [sp, #12]
 800746a:	1d19      	adds	r1, r3, #4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	9103      	str	r1, [sp, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	bfbb      	ittet	lt
 8007474:	425b      	neglt	r3, r3
 8007476:	f042 0202 	orrlt.w	r2, r2, #2
 800747a:	9307      	strge	r3, [sp, #28]
 800747c:	9307      	strlt	r3, [sp, #28]
 800747e:	bfb8      	it	lt
 8007480:	9204      	strlt	r2, [sp, #16]
 8007482:	7823      	ldrb	r3, [r4, #0]
 8007484:	2b2e      	cmp	r3, #46	; 0x2e
 8007486:	d10c      	bne.n	80074a2 <_vfiprintf_r+0x176>
 8007488:	7863      	ldrb	r3, [r4, #1]
 800748a:	2b2a      	cmp	r3, #42	; 0x2a
 800748c:	d135      	bne.n	80074fa <_vfiprintf_r+0x1ce>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	1d1a      	adds	r2, r3, #4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	9203      	str	r2, [sp, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfb8      	it	lt
 800749a:	f04f 33ff 	movlt.w	r3, #4294967295
 800749e:	3402      	adds	r4, #2
 80074a0:	9305      	str	r3, [sp, #20]
 80074a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007588 <_vfiprintf_r+0x25c>
 80074a6:	7821      	ldrb	r1, [r4, #0]
 80074a8:	2203      	movs	r2, #3
 80074aa:	4650      	mov	r0, sl
 80074ac:	f7f8 fe98 	bl	80001e0 <memchr>
 80074b0:	b140      	cbz	r0, 80074c4 <_vfiprintf_r+0x198>
 80074b2:	2340      	movs	r3, #64	; 0x40
 80074b4:	eba0 000a 	sub.w	r0, r0, sl
 80074b8:	fa03 f000 	lsl.w	r0, r3, r0
 80074bc:	9b04      	ldr	r3, [sp, #16]
 80074be:	4303      	orrs	r3, r0
 80074c0:	3401      	adds	r4, #1
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c8:	482c      	ldr	r0, [pc, #176]	; (800757c <_vfiprintf_r+0x250>)
 80074ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074ce:	2206      	movs	r2, #6
 80074d0:	f7f8 fe86 	bl	80001e0 <memchr>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d03f      	beq.n	8007558 <_vfiprintf_r+0x22c>
 80074d8:	4b29      	ldr	r3, [pc, #164]	; (8007580 <_vfiprintf_r+0x254>)
 80074da:	bb1b      	cbnz	r3, 8007524 <_vfiprintf_r+0x1f8>
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	3307      	adds	r3, #7
 80074e0:	f023 0307 	bic.w	r3, r3, #7
 80074e4:	3308      	adds	r3, #8
 80074e6:	9303      	str	r3, [sp, #12]
 80074e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ea:	443b      	add	r3, r7
 80074ec:	9309      	str	r3, [sp, #36]	; 0x24
 80074ee:	e767      	b.n	80073c0 <_vfiprintf_r+0x94>
 80074f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074f4:	460c      	mov	r4, r1
 80074f6:	2001      	movs	r0, #1
 80074f8:	e7a5      	b.n	8007446 <_vfiprintf_r+0x11a>
 80074fa:	2300      	movs	r3, #0
 80074fc:	3401      	adds	r4, #1
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	4619      	mov	r1, r3
 8007502:	f04f 0c0a 	mov.w	ip, #10
 8007506:	4620      	mov	r0, r4
 8007508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800750c:	3a30      	subs	r2, #48	; 0x30
 800750e:	2a09      	cmp	r2, #9
 8007510:	d903      	bls.n	800751a <_vfiprintf_r+0x1ee>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0c5      	beq.n	80074a2 <_vfiprintf_r+0x176>
 8007516:	9105      	str	r1, [sp, #20]
 8007518:	e7c3      	b.n	80074a2 <_vfiprintf_r+0x176>
 800751a:	fb0c 2101 	mla	r1, ip, r1, r2
 800751e:	4604      	mov	r4, r0
 8007520:	2301      	movs	r3, #1
 8007522:	e7f0      	b.n	8007506 <_vfiprintf_r+0x1da>
 8007524:	ab03      	add	r3, sp, #12
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	462a      	mov	r2, r5
 800752a:	4b16      	ldr	r3, [pc, #88]	; (8007584 <_vfiprintf_r+0x258>)
 800752c:	a904      	add	r1, sp, #16
 800752e:	4630      	mov	r0, r6
 8007530:	f7fd fdd6 	bl	80050e0 <_printf_float>
 8007534:	4607      	mov	r7, r0
 8007536:	1c78      	adds	r0, r7, #1
 8007538:	d1d6      	bne.n	80074e8 <_vfiprintf_r+0x1bc>
 800753a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800753c:	07d9      	lsls	r1, r3, #31
 800753e:	d405      	bmi.n	800754c <_vfiprintf_r+0x220>
 8007540:	89ab      	ldrh	r3, [r5, #12]
 8007542:	059a      	lsls	r2, r3, #22
 8007544:	d402      	bmi.n	800754c <_vfiprintf_r+0x220>
 8007546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007548:	f000 faaf 	bl	8007aaa <__retarget_lock_release_recursive>
 800754c:	89ab      	ldrh	r3, [r5, #12]
 800754e:	065b      	lsls	r3, r3, #25
 8007550:	f53f af12 	bmi.w	8007378 <_vfiprintf_r+0x4c>
 8007554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007556:	e711      	b.n	800737c <_vfiprintf_r+0x50>
 8007558:	ab03      	add	r3, sp, #12
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	462a      	mov	r2, r5
 800755e:	4b09      	ldr	r3, [pc, #36]	; (8007584 <_vfiprintf_r+0x258>)
 8007560:	a904      	add	r1, sp, #16
 8007562:	4630      	mov	r0, r6
 8007564:	f7fe f860 	bl	8005628 <_printf_i>
 8007568:	e7e4      	b.n	8007534 <_vfiprintf_r+0x208>
 800756a:	bf00      	nop
 800756c:	08008174 	.word	0x08008174
 8007570:	08008194 	.word	0x08008194
 8007574:	08008154 	.word	0x08008154
 8007578:	08007ffc 	.word	0x08007ffc
 800757c:	08008006 	.word	0x08008006
 8007580:	080050e1 	.word	0x080050e1
 8007584:	08007309 	.word	0x08007309
 8007588:	08008002 	.word	0x08008002

0800758c <__swbuf_r>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	460e      	mov	r6, r1
 8007590:	4614      	mov	r4, r2
 8007592:	4605      	mov	r5, r0
 8007594:	b118      	cbz	r0, 800759e <__swbuf_r+0x12>
 8007596:	6983      	ldr	r3, [r0, #24]
 8007598:	b90b      	cbnz	r3, 800759e <__swbuf_r+0x12>
 800759a:	f000 f9e7 	bl	800796c <__sinit>
 800759e:	4b21      	ldr	r3, [pc, #132]	; (8007624 <__swbuf_r+0x98>)
 80075a0:	429c      	cmp	r4, r3
 80075a2:	d12b      	bne.n	80075fc <__swbuf_r+0x70>
 80075a4:	686c      	ldr	r4, [r5, #4]
 80075a6:	69a3      	ldr	r3, [r4, #24]
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	071a      	lsls	r2, r3, #28
 80075ae:	d52f      	bpl.n	8007610 <__swbuf_r+0x84>
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	b36b      	cbz	r3, 8007610 <__swbuf_r+0x84>
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	6820      	ldr	r0, [r4, #0]
 80075b8:	1ac0      	subs	r0, r0, r3
 80075ba:	6963      	ldr	r3, [r4, #20]
 80075bc:	b2f6      	uxtb	r6, r6
 80075be:	4283      	cmp	r3, r0
 80075c0:	4637      	mov	r7, r6
 80075c2:	dc04      	bgt.n	80075ce <__swbuf_r+0x42>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	f000 f93c 	bl	8007844 <_fflush_r>
 80075cc:	bb30      	cbnz	r0, 800761c <__swbuf_r+0x90>
 80075ce:	68a3      	ldr	r3, [r4, #8]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	60a3      	str	r3, [r4, #8]
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	6022      	str	r2, [r4, #0]
 80075da:	701e      	strb	r6, [r3, #0]
 80075dc:	6963      	ldr	r3, [r4, #20]
 80075de:	3001      	adds	r0, #1
 80075e0:	4283      	cmp	r3, r0
 80075e2:	d004      	beq.n	80075ee <__swbuf_r+0x62>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	07db      	lsls	r3, r3, #31
 80075e8:	d506      	bpl.n	80075f8 <__swbuf_r+0x6c>
 80075ea:	2e0a      	cmp	r6, #10
 80075ec:	d104      	bne.n	80075f8 <__swbuf_r+0x6c>
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 f927 	bl	8007844 <_fflush_r>
 80075f6:	b988      	cbnz	r0, 800761c <__swbuf_r+0x90>
 80075f8:	4638      	mov	r0, r7
 80075fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <__swbuf_r+0x9c>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	d101      	bne.n	8007606 <__swbuf_r+0x7a>
 8007602:	68ac      	ldr	r4, [r5, #8]
 8007604:	e7cf      	b.n	80075a6 <__swbuf_r+0x1a>
 8007606:	4b09      	ldr	r3, [pc, #36]	; (800762c <__swbuf_r+0xa0>)
 8007608:	429c      	cmp	r4, r3
 800760a:	bf08      	it	eq
 800760c:	68ec      	ldreq	r4, [r5, #12]
 800760e:	e7ca      	b.n	80075a6 <__swbuf_r+0x1a>
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f000 f81a 	bl	800764c <__swsetup_r>
 8007618:	2800      	cmp	r0, #0
 800761a:	d0cb      	beq.n	80075b4 <__swbuf_r+0x28>
 800761c:	f04f 37ff 	mov.w	r7, #4294967295
 8007620:	e7ea      	b.n	80075f8 <__swbuf_r+0x6c>
 8007622:	bf00      	nop
 8007624:	08008174 	.word	0x08008174
 8007628:	08008194 	.word	0x08008194
 800762c:	08008154 	.word	0x08008154

08007630 <__ascii_wctomb>:
 8007630:	b149      	cbz	r1, 8007646 <__ascii_wctomb+0x16>
 8007632:	2aff      	cmp	r2, #255	; 0xff
 8007634:	bf85      	ittet	hi
 8007636:	238a      	movhi	r3, #138	; 0x8a
 8007638:	6003      	strhi	r3, [r0, #0]
 800763a:	700a      	strbls	r2, [r1, #0]
 800763c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007640:	bf98      	it	ls
 8007642:	2001      	movls	r0, #1
 8007644:	4770      	bx	lr
 8007646:	4608      	mov	r0, r1
 8007648:	4770      	bx	lr
	...

0800764c <__swsetup_r>:
 800764c:	4b32      	ldr	r3, [pc, #200]	; (8007718 <__swsetup_r+0xcc>)
 800764e:	b570      	push	{r4, r5, r6, lr}
 8007650:	681d      	ldr	r5, [r3, #0]
 8007652:	4606      	mov	r6, r0
 8007654:	460c      	mov	r4, r1
 8007656:	b125      	cbz	r5, 8007662 <__swsetup_r+0x16>
 8007658:	69ab      	ldr	r3, [r5, #24]
 800765a:	b913      	cbnz	r3, 8007662 <__swsetup_r+0x16>
 800765c:	4628      	mov	r0, r5
 800765e:	f000 f985 	bl	800796c <__sinit>
 8007662:	4b2e      	ldr	r3, [pc, #184]	; (800771c <__swsetup_r+0xd0>)
 8007664:	429c      	cmp	r4, r3
 8007666:	d10f      	bne.n	8007688 <__swsetup_r+0x3c>
 8007668:	686c      	ldr	r4, [r5, #4]
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007670:	0719      	lsls	r1, r3, #28
 8007672:	d42c      	bmi.n	80076ce <__swsetup_r+0x82>
 8007674:	06dd      	lsls	r5, r3, #27
 8007676:	d411      	bmi.n	800769c <__swsetup_r+0x50>
 8007678:	2309      	movs	r3, #9
 800767a:	6033      	str	r3, [r6, #0]
 800767c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	f04f 30ff 	mov.w	r0, #4294967295
 8007686:	e03e      	b.n	8007706 <__swsetup_r+0xba>
 8007688:	4b25      	ldr	r3, [pc, #148]	; (8007720 <__swsetup_r+0xd4>)
 800768a:	429c      	cmp	r4, r3
 800768c:	d101      	bne.n	8007692 <__swsetup_r+0x46>
 800768e:	68ac      	ldr	r4, [r5, #8]
 8007690:	e7eb      	b.n	800766a <__swsetup_r+0x1e>
 8007692:	4b24      	ldr	r3, [pc, #144]	; (8007724 <__swsetup_r+0xd8>)
 8007694:	429c      	cmp	r4, r3
 8007696:	bf08      	it	eq
 8007698:	68ec      	ldreq	r4, [r5, #12]
 800769a:	e7e6      	b.n	800766a <__swsetup_r+0x1e>
 800769c:	0758      	lsls	r0, r3, #29
 800769e:	d512      	bpl.n	80076c6 <__swsetup_r+0x7a>
 80076a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076a2:	b141      	cbz	r1, 80076b6 <__swsetup_r+0x6a>
 80076a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076a8:	4299      	cmp	r1, r3
 80076aa:	d002      	beq.n	80076b2 <__swsetup_r+0x66>
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff fb31 	bl	8006d14 <_free_r>
 80076b2:	2300      	movs	r3, #0
 80076b4:	6363      	str	r3, [r4, #52]	; 0x34
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	2300      	movs	r3, #0
 80076c0:	6063      	str	r3, [r4, #4]
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	f043 0308 	orr.w	r3, r3, #8
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	6923      	ldr	r3, [r4, #16]
 80076d0:	b94b      	cbnz	r3, 80076e6 <__swsetup_r+0x9a>
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076dc:	d003      	beq.n	80076e6 <__swsetup_r+0x9a>
 80076de:	4621      	mov	r1, r4
 80076e0:	4630      	mov	r0, r6
 80076e2:	f000 fa09 	bl	8007af8 <__smakebuf_r>
 80076e6:	89a0      	ldrh	r0, [r4, #12]
 80076e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076ec:	f010 0301 	ands.w	r3, r0, #1
 80076f0:	d00a      	beq.n	8007708 <__swsetup_r+0xbc>
 80076f2:	2300      	movs	r3, #0
 80076f4:	60a3      	str	r3, [r4, #8]
 80076f6:	6963      	ldr	r3, [r4, #20]
 80076f8:	425b      	negs	r3, r3
 80076fa:	61a3      	str	r3, [r4, #24]
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	b943      	cbnz	r3, 8007712 <__swsetup_r+0xc6>
 8007700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007704:	d1ba      	bne.n	800767c <__swsetup_r+0x30>
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	0781      	lsls	r1, r0, #30
 800770a:	bf58      	it	pl
 800770c:	6963      	ldrpl	r3, [r4, #20]
 800770e:	60a3      	str	r3, [r4, #8]
 8007710:	e7f4      	b.n	80076fc <__swsetup_r+0xb0>
 8007712:	2000      	movs	r0, #0
 8007714:	e7f7      	b.n	8007706 <__swsetup_r+0xba>
 8007716:	bf00      	nop
 8007718:	2000000c 	.word	0x2000000c
 800771c:	08008174 	.word	0x08008174
 8007720:	08008194 	.word	0x08008194
 8007724:	08008154 	.word	0x08008154

08007728 <abort>:
 8007728:	b508      	push	{r3, lr}
 800772a:	2006      	movs	r0, #6
 800772c:	f000 fa54 	bl	8007bd8 <raise>
 8007730:	2001      	movs	r0, #1
 8007732:	f7f9 fea1 	bl	8001478 <_exit>
	...

08007738 <__sflush_r>:
 8007738:	898a      	ldrh	r2, [r1, #12]
 800773a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773e:	4605      	mov	r5, r0
 8007740:	0710      	lsls	r0, r2, #28
 8007742:	460c      	mov	r4, r1
 8007744:	d458      	bmi.n	80077f8 <__sflush_r+0xc0>
 8007746:	684b      	ldr	r3, [r1, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	dc05      	bgt.n	8007758 <__sflush_r+0x20>
 800774c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	dc02      	bgt.n	8007758 <__sflush_r+0x20>
 8007752:	2000      	movs	r0, #0
 8007754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800775a:	2e00      	cmp	r6, #0
 800775c:	d0f9      	beq.n	8007752 <__sflush_r+0x1a>
 800775e:	2300      	movs	r3, #0
 8007760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007764:	682f      	ldr	r7, [r5, #0]
 8007766:	602b      	str	r3, [r5, #0]
 8007768:	d032      	beq.n	80077d0 <__sflush_r+0x98>
 800776a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	075a      	lsls	r2, r3, #29
 8007770:	d505      	bpl.n	800777e <__sflush_r+0x46>
 8007772:	6863      	ldr	r3, [r4, #4]
 8007774:	1ac0      	subs	r0, r0, r3
 8007776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007778:	b10b      	cbz	r3, 800777e <__sflush_r+0x46>
 800777a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800777c:	1ac0      	subs	r0, r0, r3
 800777e:	2300      	movs	r3, #0
 8007780:	4602      	mov	r2, r0
 8007782:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007784:	6a21      	ldr	r1, [r4, #32]
 8007786:	4628      	mov	r0, r5
 8007788:	47b0      	blx	r6
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	d106      	bne.n	800779e <__sflush_r+0x66>
 8007790:	6829      	ldr	r1, [r5, #0]
 8007792:	291d      	cmp	r1, #29
 8007794:	d82c      	bhi.n	80077f0 <__sflush_r+0xb8>
 8007796:	4a2a      	ldr	r2, [pc, #168]	; (8007840 <__sflush_r+0x108>)
 8007798:	40ca      	lsrs	r2, r1
 800779a:	07d6      	lsls	r6, r2, #31
 800779c:	d528      	bpl.n	80077f0 <__sflush_r+0xb8>
 800779e:	2200      	movs	r2, #0
 80077a0:	6062      	str	r2, [r4, #4]
 80077a2:	04d9      	lsls	r1, r3, #19
 80077a4:	6922      	ldr	r2, [r4, #16]
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	d504      	bpl.n	80077b4 <__sflush_r+0x7c>
 80077aa:	1c42      	adds	r2, r0, #1
 80077ac:	d101      	bne.n	80077b2 <__sflush_r+0x7a>
 80077ae:	682b      	ldr	r3, [r5, #0]
 80077b0:	b903      	cbnz	r3, 80077b4 <__sflush_r+0x7c>
 80077b2:	6560      	str	r0, [r4, #84]	; 0x54
 80077b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077b6:	602f      	str	r7, [r5, #0]
 80077b8:	2900      	cmp	r1, #0
 80077ba:	d0ca      	beq.n	8007752 <__sflush_r+0x1a>
 80077bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077c0:	4299      	cmp	r1, r3
 80077c2:	d002      	beq.n	80077ca <__sflush_r+0x92>
 80077c4:	4628      	mov	r0, r5
 80077c6:	f7ff faa5 	bl	8006d14 <_free_r>
 80077ca:	2000      	movs	r0, #0
 80077cc:	6360      	str	r0, [r4, #52]	; 0x34
 80077ce:	e7c1      	b.n	8007754 <__sflush_r+0x1c>
 80077d0:	6a21      	ldr	r1, [r4, #32]
 80077d2:	2301      	movs	r3, #1
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b0      	blx	r6
 80077d8:	1c41      	adds	r1, r0, #1
 80077da:	d1c7      	bne.n	800776c <__sflush_r+0x34>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0c4      	beq.n	800776c <__sflush_r+0x34>
 80077e2:	2b1d      	cmp	r3, #29
 80077e4:	d001      	beq.n	80077ea <__sflush_r+0xb2>
 80077e6:	2b16      	cmp	r3, #22
 80077e8:	d101      	bne.n	80077ee <__sflush_r+0xb6>
 80077ea:	602f      	str	r7, [r5, #0]
 80077ec:	e7b1      	b.n	8007752 <__sflush_r+0x1a>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f4:	81a3      	strh	r3, [r4, #12]
 80077f6:	e7ad      	b.n	8007754 <__sflush_r+0x1c>
 80077f8:	690f      	ldr	r7, [r1, #16]
 80077fa:	2f00      	cmp	r7, #0
 80077fc:	d0a9      	beq.n	8007752 <__sflush_r+0x1a>
 80077fe:	0793      	lsls	r3, r2, #30
 8007800:	680e      	ldr	r6, [r1, #0]
 8007802:	bf08      	it	eq
 8007804:	694b      	ldreq	r3, [r1, #20]
 8007806:	600f      	str	r7, [r1, #0]
 8007808:	bf18      	it	ne
 800780a:	2300      	movne	r3, #0
 800780c:	eba6 0807 	sub.w	r8, r6, r7
 8007810:	608b      	str	r3, [r1, #8]
 8007812:	f1b8 0f00 	cmp.w	r8, #0
 8007816:	dd9c      	ble.n	8007752 <__sflush_r+0x1a>
 8007818:	6a21      	ldr	r1, [r4, #32]
 800781a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800781c:	4643      	mov	r3, r8
 800781e:	463a      	mov	r2, r7
 8007820:	4628      	mov	r0, r5
 8007822:	47b0      	blx	r6
 8007824:	2800      	cmp	r0, #0
 8007826:	dc06      	bgt.n	8007836 <__sflush_r+0xfe>
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800782e:	81a3      	strh	r3, [r4, #12]
 8007830:	f04f 30ff 	mov.w	r0, #4294967295
 8007834:	e78e      	b.n	8007754 <__sflush_r+0x1c>
 8007836:	4407      	add	r7, r0
 8007838:	eba8 0800 	sub.w	r8, r8, r0
 800783c:	e7e9      	b.n	8007812 <__sflush_r+0xda>
 800783e:	bf00      	nop
 8007840:	20400001 	.word	0x20400001

08007844 <_fflush_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	690b      	ldr	r3, [r1, #16]
 8007848:	4605      	mov	r5, r0
 800784a:	460c      	mov	r4, r1
 800784c:	b913      	cbnz	r3, 8007854 <_fflush_r+0x10>
 800784e:	2500      	movs	r5, #0
 8007850:	4628      	mov	r0, r5
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	b118      	cbz	r0, 800785e <_fflush_r+0x1a>
 8007856:	6983      	ldr	r3, [r0, #24]
 8007858:	b90b      	cbnz	r3, 800785e <_fflush_r+0x1a>
 800785a:	f000 f887 	bl	800796c <__sinit>
 800785e:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <_fflush_r+0x6c>)
 8007860:	429c      	cmp	r4, r3
 8007862:	d11b      	bne.n	800789c <_fflush_r+0x58>
 8007864:	686c      	ldr	r4, [r5, #4]
 8007866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0ef      	beq.n	800784e <_fflush_r+0xa>
 800786e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007870:	07d0      	lsls	r0, r2, #31
 8007872:	d404      	bmi.n	800787e <_fflush_r+0x3a>
 8007874:	0599      	lsls	r1, r3, #22
 8007876:	d402      	bmi.n	800787e <_fflush_r+0x3a>
 8007878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800787a:	f000 f915 	bl	8007aa8 <__retarget_lock_acquire_recursive>
 800787e:	4628      	mov	r0, r5
 8007880:	4621      	mov	r1, r4
 8007882:	f7ff ff59 	bl	8007738 <__sflush_r>
 8007886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007888:	07da      	lsls	r2, r3, #31
 800788a:	4605      	mov	r5, r0
 800788c:	d4e0      	bmi.n	8007850 <_fflush_r+0xc>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	059b      	lsls	r3, r3, #22
 8007892:	d4dd      	bmi.n	8007850 <_fflush_r+0xc>
 8007894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007896:	f000 f908 	bl	8007aaa <__retarget_lock_release_recursive>
 800789a:	e7d9      	b.n	8007850 <_fflush_r+0xc>
 800789c:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <_fflush_r+0x70>)
 800789e:	429c      	cmp	r4, r3
 80078a0:	d101      	bne.n	80078a6 <_fflush_r+0x62>
 80078a2:	68ac      	ldr	r4, [r5, #8]
 80078a4:	e7df      	b.n	8007866 <_fflush_r+0x22>
 80078a6:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <_fflush_r+0x74>)
 80078a8:	429c      	cmp	r4, r3
 80078aa:	bf08      	it	eq
 80078ac:	68ec      	ldreq	r4, [r5, #12]
 80078ae:	e7da      	b.n	8007866 <_fflush_r+0x22>
 80078b0:	08008174 	.word	0x08008174
 80078b4:	08008194 	.word	0x08008194
 80078b8:	08008154 	.word	0x08008154

080078bc <std>:
 80078bc:	2300      	movs	r3, #0
 80078be:	b510      	push	{r4, lr}
 80078c0:	4604      	mov	r4, r0
 80078c2:	e9c0 3300 	strd	r3, r3, [r0]
 80078c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078ca:	6083      	str	r3, [r0, #8]
 80078cc:	8181      	strh	r1, [r0, #12]
 80078ce:	6643      	str	r3, [r0, #100]	; 0x64
 80078d0:	81c2      	strh	r2, [r0, #14]
 80078d2:	6183      	str	r3, [r0, #24]
 80078d4:	4619      	mov	r1, r3
 80078d6:	2208      	movs	r2, #8
 80078d8:	305c      	adds	r0, #92	; 0x5c
 80078da:	f7fd fb59 	bl	8004f90 <memset>
 80078de:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <std+0x38>)
 80078e0:	6263      	str	r3, [r4, #36]	; 0x24
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <std+0x3c>)
 80078e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80078e6:	4b05      	ldr	r3, [pc, #20]	; (80078fc <std+0x40>)
 80078e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <std+0x44>)
 80078ec:	6224      	str	r4, [r4, #32]
 80078ee:	6323      	str	r3, [r4, #48]	; 0x30
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	bf00      	nop
 80078f4:	08007c11 	.word	0x08007c11
 80078f8:	08007c33 	.word	0x08007c33
 80078fc:	08007c6b 	.word	0x08007c6b
 8007900:	08007c8f 	.word	0x08007c8f

08007904 <_cleanup_r>:
 8007904:	4901      	ldr	r1, [pc, #4]	; (800790c <_cleanup_r+0x8>)
 8007906:	f000 b8af 	b.w	8007a68 <_fwalk_reent>
 800790a:	bf00      	nop
 800790c:	08007845 	.word	0x08007845

08007910 <__sfmoreglue>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	2268      	movs	r2, #104	; 0x68
 8007914:	1e4d      	subs	r5, r1, #1
 8007916:	4355      	muls	r5, r2
 8007918:	460e      	mov	r6, r1
 800791a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800791e:	f7ff fa65 	bl	8006dec <_malloc_r>
 8007922:	4604      	mov	r4, r0
 8007924:	b140      	cbz	r0, 8007938 <__sfmoreglue+0x28>
 8007926:	2100      	movs	r1, #0
 8007928:	e9c0 1600 	strd	r1, r6, [r0]
 800792c:	300c      	adds	r0, #12
 800792e:	60a0      	str	r0, [r4, #8]
 8007930:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007934:	f7fd fb2c 	bl	8004f90 <memset>
 8007938:	4620      	mov	r0, r4
 800793a:	bd70      	pop	{r4, r5, r6, pc}

0800793c <__sfp_lock_acquire>:
 800793c:	4801      	ldr	r0, [pc, #4]	; (8007944 <__sfp_lock_acquire+0x8>)
 800793e:	f000 b8b3 	b.w	8007aa8 <__retarget_lock_acquire_recursive>
 8007942:	bf00      	nop
 8007944:	2000044d 	.word	0x2000044d

08007948 <__sfp_lock_release>:
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <__sfp_lock_release+0x8>)
 800794a:	f000 b8ae 	b.w	8007aaa <__retarget_lock_release_recursive>
 800794e:	bf00      	nop
 8007950:	2000044d 	.word	0x2000044d

08007954 <__sinit_lock_acquire>:
 8007954:	4801      	ldr	r0, [pc, #4]	; (800795c <__sinit_lock_acquire+0x8>)
 8007956:	f000 b8a7 	b.w	8007aa8 <__retarget_lock_acquire_recursive>
 800795a:	bf00      	nop
 800795c:	2000044e 	.word	0x2000044e

08007960 <__sinit_lock_release>:
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <__sinit_lock_release+0x8>)
 8007962:	f000 b8a2 	b.w	8007aaa <__retarget_lock_release_recursive>
 8007966:	bf00      	nop
 8007968:	2000044e 	.word	0x2000044e

0800796c <__sinit>:
 800796c:	b510      	push	{r4, lr}
 800796e:	4604      	mov	r4, r0
 8007970:	f7ff fff0 	bl	8007954 <__sinit_lock_acquire>
 8007974:	69a3      	ldr	r3, [r4, #24]
 8007976:	b11b      	cbz	r3, 8007980 <__sinit+0x14>
 8007978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800797c:	f7ff bff0 	b.w	8007960 <__sinit_lock_release>
 8007980:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007984:	6523      	str	r3, [r4, #80]	; 0x50
 8007986:	4b13      	ldr	r3, [pc, #76]	; (80079d4 <__sinit+0x68>)
 8007988:	4a13      	ldr	r2, [pc, #76]	; (80079d8 <__sinit+0x6c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	62a2      	str	r2, [r4, #40]	; 0x28
 800798e:	42a3      	cmp	r3, r4
 8007990:	bf04      	itt	eq
 8007992:	2301      	moveq	r3, #1
 8007994:	61a3      	streq	r3, [r4, #24]
 8007996:	4620      	mov	r0, r4
 8007998:	f000 f820 	bl	80079dc <__sfp>
 800799c:	6060      	str	r0, [r4, #4]
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 f81c 	bl	80079dc <__sfp>
 80079a4:	60a0      	str	r0, [r4, #8]
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 f818 	bl	80079dc <__sfp>
 80079ac:	2200      	movs	r2, #0
 80079ae:	60e0      	str	r0, [r4, #12]
 80079b0:	2104      	movs	r1, #4
 80079b2:	6860      	ldr	r0, [r4, #4]
 80079b4:	f7ff ff82 	bl	80078bc <std>
 80079b8:	68a0      	ldr	r0, [r4, #8]
 80079ba:	2201      	movs	r2, #1
 80079bc:	2109      	movs	r1, #9
 80079be:	f7ff ff7d 	bl	80078bc <std>
 80079c2:	68e0      	ldr	r0, [r4, #12]
 80079c4:	2202      	movs	r2, #2
 80079c6:	2112      	movs	r1, #18
 80079c8:	f7ff ff78 	bl	80078bc <std>
 80079cc:	2301      	movs	r3, #1
 80079ce:	61a3      	str	r3, [r4, #24]
 80079d0:	e7d2      	b.n	8007978 <__sinit+0xc>
 80079d2:	bf00      	nop
 80079d4:	08007dd8 	.word	0x08007dd8
 80079d8:	08007905 	.word	0x08007905

080079dc <__sfp>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	4607      	mov	r7, r0
 80079e0:	f7ff ffac 	bl	800793c <__sfp_lock_acquire>
 80079e4:	4b1e      	ldr	r3, [pc, #120]	; (8007a60 <__sfp+0x84>)
 80079e6:	681e      	ldr	r6, [r3, #0]
 80079e8:	69b3      	ldr	r3, [r6, #24]
 80079ea:	b913      	cbnz	r3, 80079f2 <__sfp+0x16>
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7ff ffbd 	bl	800796c <__sinit>
 80079f2:	3648      	adds	r6, #72	; 0x48
 80079f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	d503      	bpl.n	8007a04 <__sfp+0x28>
 80079fc:	6833      	ldr	r3, [r6, #0]
 80079fe:	b30b      	cbz	r3, 8007a44 <__sfp+0x68>
 8007a00:	6836      	ldr	r6, [r6, #0]
 8007a02:	e7f7      	b.n	80079f4 <__sfp+0x18>
 8007a04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a08:	b9d5      	cbnz	r5, 8007a40 <__sfp+0x64>
 8007a0a:	4b16      	ldr	r3, [pc, #88]	; (8007a64 <__sfp+0x88>)
 8007a0c:	60e3      	str	r3, [r4, #12]
 8007a0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a12:	6665      	str	r5, [r4, #100]	; 0x64
 8007a14:	f000 f847 	bl	8007aa6 <__retarget_lock_init_recursive>
 8007a18:	f7ff ff96 	bl	8007948 <__sfp_lock_release>
 8007a1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a24:	6025      	str	r5, [r4, #0]
 8007a26:	61a5      	str	r5, [r4, #24]
 8007a28:	2208      	movs	r2, #8
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a30:	f7fd faae 	bl	8004f90 <memset>
 8007a34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a40:	3468      	adds	r4, #104	; 0x68
 8007a42:	e7d9      	b.n	80079f8 <__sfp+0x1c>
 8007a44:	2104      	movs	r1, #4
 8007a46:	4638      	mov	r0, r7
 8007a48:	f7ff ff62 	bl	8007910 <__sfmoreglue>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	6030      	str	r0, [r6, #0]
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d1d5      	bne.n	8007a00 <__sfp+0x24>
 8007a54:	f7ff ff78 	bl	8007948 <__sfp_lock_release>
 8007a58:	230c      	movs	r3, #12
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	e7ee      	b.n	8007a3c <__sfp+0x60>
 8007a5e:	bf00      	nop
 8007a60:	08007dd8 	.word	0x08007dd8
 8007a64:	ffff0001 	.word	0xffff0001

08007a68 <_fwalk_reent>:
 8007a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	4688      	mov	r8, r1
 8007a70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a74:	2700      	movs	r7, #0
 8007a76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a7a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a7e:	d505      	bpl.n	8007a8c <_fwalk_reent+0x24>
 8007a80:	6824      	ldr	r4, [r4, #0]
 8007a82:	2c00      	cmp	r4, #0
 8007a84:	d1f7      	bne.n	8007a76 <_fwalk_reent+0xe>
 8007a86:	4638      	mov	r0, r7
 8007a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8c:	89ab      	ldrh	r3, [r5, #12]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d907      	bls.n	8007aa2 <_fwalk_reent+0x3a>
 8007a92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a96:	3301      	adds	r3, #1
 8007a98:	d003      	beq.n	8007aa2 <_fwalk_reent+0x3a>
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	47c0      	blx	r8
 8007aa0:	4307      	orrs	r7, r0
 8007aa2:	3568      	adds	r5, #104	; 0x68
 8007aa4:	e7e9      	b.n	8007a7a <_fwalk_reent+0x12>

08007aa6 <__retarget_lock_init_recursive>:
 8007aa6:	4770      	bx	lr

08007aa8 <__retarget_lock_acquire_recursive>:
 8007aa8:	4770      	bx	lr

08007aaa <__retarget_lock_release_recursive>:
 8007aaa:	4770      	bx	lr

08007aac <__swhatbuf_r>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	460e      	mov	r6, r1
 8007ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	b096      	sub	sp, #88	; 0x58
 8007ab8:	4614      	mov	r4, r2
 8007aba:	461d      	mov	r5, r3
 8007abc:	da08      	bge.n	8007ad0 <__swhatbuf_r+0x24>
 8007abe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	061a      	lsls	r2, r3, #24
 8007ac8:	d410      	bmi.n	8007aec <__swhatbuf_r+0x40>
 8007aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ace:	e00e      	b.n	8007aee <__swhatbuf_r+0x42>
 8007ad0:	466a      	mov	r2, sp
 8007ad2:	f000 f903 	bl	8007cdc <_fstat_r>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	dbf1      	blt.n	8007abe <__swhatbuf_r+0x12>
 8007ada:	9a01      	ldr	r2, [sp, #4]
 8007adc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ae0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ae4:	425a      	negs	r2, r3
 8007ae6:	415a      	adcs	r2, r3
 8007ae8:	602a      	str	r2, [r5, #0]
 8007aea:	e7ee      	b.n	8007aca <__swhatbuf_r+0x1e>
 8007aec:	2340      	movs	r3, #64	; 0x40
 8007aee:	2000      	movs	r0, #0
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	b016      	add	sp, #88	; 0x58
 8007af4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007af8 <__smakebuf_r>:
 8007af8:	898b      	ldrh	r3, [r1, #12]
 8007afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007afc:	079d      	lsls	r5, r3, #30
 8007afe:	4606      	mov	r6, r0
 8007b00:	460c      	mov	r4, r1
 8007b02:	d507      	bpl.n	8007b14 <__smakebuf_r+0x1c>
 8007b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	6123      	str	r3, [r4, #16]
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	6163      	str	r3, [r4, #20]
 8007b10:	b002      	add	sp, #8
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	ab01      	add	r3, sp, #4
 8007b16:	466a      	mov	r2, sp
 8007b18:	f7ff ffc8 	bl	8007aac <__swhatbuf_r>
 8007b1c:	9900      	ldr	r1, [sp, #0]
 8007b1e:	4605      	mov	r5, r0
 8007b20:	4630      	mov	r0, r6
 8007b22:	f7ff f963 	bl	8006dec <_malloc_r>
 8007b26:	b948      	cbnz	r0, 8007b3c <__smakebuf_r+0x44>
 8007b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b2c:	059a      	lsls	r2, r3, #22
 8007b2e:	d4ef      	bmi.n	8007b10 <__smakebuf_r+0x18>
 8007b30:	f023 0303 	bic.w	r3, r3, #3
 8007b34:	f043 0302 	orr.w	r3, r3, #2
 8007b38:	81a3      	strh	r3, [r4, #12]
 8007b3a:	e7e3      	b.n	8007b04 <__smakebuf_r+0xc>
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <__smakebuf_r+0x7c>)
 8007b3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	6020      	str	r0, [r4, #0]
 8007b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	9b00      	ldr	r3, [sp, #0]
 8007b4c:	6163      	str	r3, [r4, #20]
 8007b4e:	9b01      	ldr	r3, [sp, #4]
 8007b50:	6120      	str	r0, [r4, #16]
 8007b52:	b15b      	cbz	r3, 8007b6c <__smakebuf_r+0x74>
 8007b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f000 f8d1 	bl	8007d00 <_isatty_r>
 8007b5e:	b128      	cbz	r0, 8007b6c <__smakebuf_r+0x74>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	f023 0303 	bic.w	r3, r3, #3
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	89a0      	ldrh	r0, [r4, #12]
 8007b6e:	4305      	orrs	r5, r0
 8007b70:	81a5      	strh	r5, [r4, #12]
 8007b72:	e7cd      	b.n	8007b10 <__smakebuf_r+0x18>
 8007b74:	08007905 	.word	0x08007905

08007b78 <_malloc_usable_size_r>:
 8007b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7c:	1f18      	subs	r0, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfbc      	itt	lt
 8007b82:	580b      	ldrlt	r3, [r1, r0]
 8007b84:	18c0      	addlt	r0, r0, r3
 8007b86:	4770      	bx	lr

08007b88 <_raise_r>:
 8007b88:	291f      	cmp	r1, #31
 8007b8a:	b538      	push	{r3, r4, r5, lr}
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	d904      	bls.n	8007b9c <_raise_r+0x14>
 8007b92:	2316      	movs	r3, #22
 8007b94:	6003      	str	r3, [r0, #0]
 8007b96:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b9e:	b112      	cbz	r2, 8007ba6 <_raise_r+0x1e>
 8007ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ba4:	b94b      	cbnz	r3, 8007bba <_raise_r+0x32>
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 f830 	bl	8007c0c <_getpid_r>
 8007bac:	462a      	mov	r2, r5
 8007bae:	4601      	mov	r1, r0
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb6:	f000 b817 	b.w	8007be8 <_kill_r>
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d00a      	beq.n	8007bd4 <_raise_r+0x4c>
 8007bbe:	1c59      	adds	r1, r3, #1
 8007bc0:	d103      	bne.n	8007bca <_raise_r+0x42>
 8007bc2:	2316      	movs	r3, #22
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	e7e7      	b.n	8007b9a <_raise_r+0x12>
 8007bca:	2400      	movs	r4, #0
 8007bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	4798      	blx	r3
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	e7e0      	b.n	8007b9a <_raise_r+0x12>

08007bd8 <raise>:
 8007bd8:	4b02      	ldr	r3, [pc, #8]	; (8007be4 <raise+0xc>)
 8007bda:	4601      	mov	r1, r0
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	f7ff bfd3 	b.w	8007b88 <_raise_r>
 8007be2:	bf00      	nop
 8007be4:	2000000c 	.word	0x2000000c

08007be8 <_kill_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d07      	ldr	r5, [pc, #28]	; (8007c08 <_kill_r+0x20>)
 8007bec:	2300      	movs	r3, #0
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	602b      	str	r3, [r5, #0]
 8007bf6:	f7f9 fc2f 	bl	8001458 <_kill>
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	d102      	bne.n	8007c04 <_kill_r+0x1c>
 8007bfe:	682b      	ldr	r3, [r5, #0]
 8007c00:	b103      	cbz	r3, 8007c04 <_kill_r+0x1c>
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	bd38      	pop	{r3, r4, r5, pc}
 8007c06:	bf00      	nop
 8007c08:	20000448 	.word	0x20000448

08007c0c <_getpid_r>:
 8007c0c:	f7f9 bc1c 	b.w	8001448 <_getpid>

08007c10 <__sread>:
 8007c10:	b510      	push	{r4, lr}
 8007c12:	460c      	mov	r4, r1
 8007c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c18:	f000 f894 	bl	8007d44 <_read_r>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	bfab      	itete	ge
 8007c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c22:	89a3      	ldrhlt	r3, [r4, #12]
 8007c24:	181b      	addge	r3, r3, r0
 8007c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c2a:	bfac      	ite	ge
 8007c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c2e:	81a3      	strhlt	r3, [r4, #12]
 8007c30:	bd10      	pop	{r4, pc}

08007c32 <__swrite>:
 8007c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c36:	461f      	mov	r7, r3
 8007c38:	898b      	ldrh	r3, [r1, #12]
 8007c3a:	05db      	lsls	r3, r3, #23
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	4616      	mov	r6, r2
 8007c42:	d505      	bpl.n	8007c50 <__swrite+0x1e>
 8007c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c48:	2302      	movs	r3, #2
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f000 f868 	bl	8007d20 <_lseek_r>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	4632      	mov	r2, r6
 8007c5e:	463b      	mov	r3, r7
 8007c60:	4628      	mov	r0, r5
 8007c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c66:	f000 b817 	b.w	8007c98 <_write_r>

08007c6a <__sseek>:
 8007c6a:	b510      	push	{r4, lr}
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c72:	f000 f855 	bl	8007d20 <_lseek_r>
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	bf15      	itete	ne
 8007c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c86:	81a3      	strheq	r3, [r4, #12]
 8007c88:	bf18      	it	ne
 8007c8a:	81a3      	strhne	r3, [r4, #12]
 8007c8c:	bd10      	pop	{r4, pc}

08007c8e <__sclose>:
 8007c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c92:	f000 b813 	b.w	8007cbc <_close_r>
	...

08007c98 <_write_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d07      	ldr	r5, [pc, #28]	; (8007cb8 <_write_r+0x20>)
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	4608      	mov	r0, r1
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	602a      	str	r2, [r5, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f7f9 fc0d 	bl	80014c6 <_write>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_write_r+0x1e>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_write_r+0x1e>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	20000448 	.word	0x20000448

08007cbc <_close_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d06      	ldr	r5, [pc, #24]	; (8007cd8 <_close_r+0x1c>)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	f7f9 fc19 	bl	80014fe <_close>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_close_r+0x1a>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_close_r+0x1a>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	20000448 	.word	0x20000448

08007cdc <_fstat_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4d07      	ldr	r5, [pc, #28]	; (8007cfc <_fstat_r+0x20>)
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	f7f9 fc14 	bl	8001516 <_fstat>
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	d102      	bne.n	8007cf8 <_fstat_r+0x1c>
 8007cf2:	682b      	ldr	r3, [r5, #0]
 8007cf4:	b103      	cbz	r3, 8007cf8 <_fstat_r+0x1c>
 8007cf6:	6023      	str	r3, [r4, #0]
 8007cf8:	bd38      	pop	{r3, r4, r5, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000448 	.word	0x20000448

08007d00 <_isatty_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d06      	ldr	r5, [pc, #24]	; (8007d1c <_isatty_r+0x1c>)
 8007d04:	2300      	movs	r3, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	f7f9 fc13 	bl	8001536 <_isatty>
 8007d10:	1c43      	adds	r3, r0, #1
 8007d12:	d102      	bne.n	8007d1a <_isatty_r+0x1a>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	b103      	cbz	r3, 8007d1a <_isatty_r+0x1a>
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	20000448 	.word	0x20000448

08007d20 <_lseek_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4d07      	ldr	r5, [pc, #28]	; (8007d40 <_lseek_r+0x20>)
 8007d24:	4604      	mov	r4, r0
 8007d26:	4608      	mov	r0, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	602a      	str	r2, [r5, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f7f9 fc0c 	bl	800154c <_lseek>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_lseek_r+0x1e>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_lseek_r+0x1e>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	20000448 	.word	0x20000448

08007d44 <_read_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4d07      	ldr	r5, [pc, #28]	; (8007d64 <_read_r+0x20>)
 8007d48:	4604      	mov	r4, r0
 8007d4a:	4608      	mov	r0, r1
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	2200      	movs	r2, #0
 8007d50:	602a      	str	r2, [r5, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	f7f9 fb9a 	bl	800148c <_read>
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	d102      	bne.n	8007d62 <_read_r+0x1e>
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	b103      	cbz	r3, 8007d62 <_read_r+0x1e>
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	20000448 	.word	0x20000448

08007d68 <_init>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	bf00      	nop
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr

08007d74 <_fini>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr
